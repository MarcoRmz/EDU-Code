PROGRAMA  ::= START var_declaracion* funcion* main END

ASIGNACION ::= ID ('['expresion_logica']')? '=' (expresion_logica | input)

BLOQUE ::= '{' estatuto+ '}'

CONDICION  ::= IF '(' expresion_logica ')' ('{' PASS '}' | bloque) ((ELSEIF '(' expresion_logica ')'( ('{' PASS '}'| bloque)))? (ELSE (bloque | ('{' PASS '}')))?)?

DO_WHILE ::= DO bloque WHILE '(' expresion_logica ')'

ESTATUTO ::= (asignacion | llamada | return | condicion | switch | while | do_while | print | input | from)

EXP ::= termino (('+' | '-') exp)?

EXPRESION ::= exp ((('<=' expresion | '>=' expresion|'<' expresion | '>' expresion| '!=' expresion | '==' expresion)))?

EXPRESION_LOGICA ::= expresion (((AND | OR) expresion_logica))?

FACTOR ::= (('(' expresion_logica ')') |  var_cte)

CTEFROM ::=

FROM ::= 'FOR' CTE_INT TO CTE_INT BY '(' ('+' | '-' | '*' | '/') CTE_INT ')' bloque

FUNCION ::= FUNCTION (VOID | tipo) ID '(' parametros? ')' '{' var_declaracion* estatuto+ (RETURN exp)? '}'

RETURN ::=

INPUT ::= 'INPUT' '(' CTE_STRING? ')'

LLAMADA ::= ID '(' (exp (',' exp)*)? ')'

MAIN ::= 'MAIN' '{' var_declaracion* estatuto+ '}'

PARAMETROS ::= VECTOR? tipo '&'? ID (',' VECTOR? tipo '&'? ID)*

PRINT ::= 'PRINT' '(' ((ID | CTE_STRING) ('+' (ID | CTE_STRING))*) ')'

SWITCH ::= 'SWITCH' ID ('[' exp ']')?  '{' (CASE var_cte ':' (estatuto | '{' PASS '}'))* DEFAULT ':' (estatuto | '{' PASS '}') '}'

TERMINO ::= factor ((('*' | '/')factor)+)?

TIPO ::= (INT | FLOAT | STRING | BOOL)

CTE_INT1 ::=

CTE_FLOAT1 ::=

CTE_BOOL ::= (TRUE | FALSE)

VARSTRING1 ::=

VAR_CTE ::= (ID (('(' ( exp ( ',' exp )* )? ')')|('[' exp ']'))? | CTE_INT | CTE_FLOAT | CTE_STRING | cte_bool)

VAR_DECLARACION ::= ((tipo (ID | inicializacion)) | (vector tipo (ID | inicializacion_vector)))

WHILE ::= 'WHILE' '(' expresion_logica ')' bloque
