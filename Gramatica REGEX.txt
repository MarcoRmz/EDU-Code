PROGRAMA  ::= START var_declaracion* funcion* main END

ASIGNACION ::= ID ('['expresion_logica']')? '=' (expresion_logica | input)

BLOQUE ::= '{' estatuto+ '}'

CONDICION  ::= IF '(' expresion_logica ')' ('{' PASS '}' | bloque) ((ELSEIF '(' expresion_logica ')'( ('{' PASS '}'| bloque)))? (ELSE (bloque | ('{' PASS '}')))?)?

DO_WHILE ::= DO bloque WHILE '(' expresion_logica ')'

ESTATUTO ::= (asignacion | llamada | return | condicion | switch | while | do_while | print | input | from)

EXP ::= termino (('+' | '-') termino)*

EXPRESION ::= exp (('<=' | '>=' |'<' | '>'| '!=' | '==') exp)*

EXPRESION_LOGICA ::= expresion ((AND | OR) expresion)*

FACTOR ::= (('(' expresion_logica ')') | varcte)

CTEFROM ::= ('+' | '-')? CTE_INT

FROM ::= 'FROM' cteFrom TO cteFrom BY '(' ('+' | '-' | '*' | '/') cteFrom ')' bloque

FUNCION ::= FUNCTION (VOID | tipo) ID '(' parametros? ')' '{' var_declaracion* estatuto+ '}'

RETURN ::= 'RETURN' expresion_logica

INPUT ::= 'INPUT' '(' (varcte ('+' varcte)*)? ')'

LLAMADA ::= ID '(' ((expresion_logica | '&' llamada4)(','( expresion_logica | '&' llamada4))*)? ')'

MAIN ::= 'MAIN' '{' var_declaracion* estatuto+ '}'

PARAMETROS ::= tipo '&'? ID (',' tipo '&'? ID)*

PRINT ::= 'PRINT' '(' varcte ('+' varcte)* ')'

SWITCH ::= 'SWITCH' ID ('[' exp ']')?  '{' (CASE varcte ':' (bloque | '{' PASS '}'))* DEFAULT ':' (bloque | '{' PASS '}') '}'

TERMINO ::= factor (('*' | '/') factor)*

TIPO ::= (CTE_INT | CTE_FLOAT | VARSTRING | cte_bool)

CTE_INT1 ::= ('+' | '-')? CTE_INT

CTE_FLOAT1 ::= ('+' | '-')? CTE_FLOAT

CTE_BOOL ::= (TRUE | FALSE)

VARSTRING1 ::= VARSTRING

VAR_CTE ::= (ID (llamada3|('[' expresion_logica ']'))? | cte_int1 | cte_float1 | varstring1 | cte_bool)

VAR_DECLARACION ::= tipo ID ('[' cte_int1 ']')?

WHILE ::= 'WHILE' '(' expresion_logica ')' bloque
