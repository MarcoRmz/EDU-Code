<PROGRAMA>
PROGRAMA -> start programa1 programa2 MAIN end

programa1 -> VAR_DECLARACION programa1
programa1 -> vacio

programa2 -> FUNCION programa2
programa2 -> vacio

<VAR_DECLARACION>
VAR_DECLARACION -> TIPO var_declaracion1
VAR_DECLARACION -> list var_declaracion2

var_declaracion1 -> id
var_declaracion1 -> ASIGNACION

var_declaracion2 -> id
var_declaracion2 -> ASIGNACION_LIST

<PARAMETROS>
PARAMETROS -> TIPO parametros1 id parametros2
PARAMETROS -> list parametros1 id parametros2

parametros1 -> &
parametros1 -> vacio

parametros2 -> , TIPO parametros1 id parametros2
parametros2 -> , list parametros1 id parametros2
parametros2 -> vacio

<ASIGNACION>
ASIGNACION -> id EQUAL EXPRESION

<TIPO>
TIPO -> int
TIPO -> float
TIPO -> string
TIPO -> bool

<BLOQUE>
BLOQUE -> { bloque1 }

bloque1 -> vacio
bloque1 -> estatuto bloque1

<EXP>
EXP -> TERMINO exp1

exp1 -> + EXP
exp1 -> - EXP
exp1 -> vacio

<TERMINO>
TERMINO -> FACTOR termino1

termino1 -> * TERMINO
termino1 -> / TERMINO
termino1 -> vacio

<ASIGNACION_LIST>
ASIGNACION_LIST -> list ( asignacion_list1 )

asignacion_list1 -> VAR_CTE asignacion_list2
asignacion_list1 -> vacio

asignacion_list2 -> , asignacion_list1
asignacion_list2 -> vacio

<MAIN>
MAIN -> main { main1 ESTATUTO main2 }

main1 -> vacio
main1 -> VAR_DECLARACION main1

main2 -> ESTATUTO main2
main2 -> vacio

<WHILE>
WHILE -> while ( EXPRESION ) BLOQUE

<FACTOR>
FACTOR -> ( EXPRESION )
FACTOR -> factor1 VAR_CTE

factor1 -> -
factor1 -> +
factor1 -> vacio

<ESTATUTO>
ESTATUTO -> ASIGNACION
ESTATUTO -> COMENTARIO
ESTATUTO -> CONDICION
ESTATUTO -> PRINT
ESTATUTO -> INPUT
ESTATUTO -> SWITCH
ESTATUTO -> WHILE
ESTATUTO -> FOR

<EXPRESION>
EXPRESION -> EXP expresion1

expresion1 -> vacio
expresion1 -> expresion2 EXP

expresion2 -> >
expresion2 -> <
expresion2 -> and
expresion2 -> or
expresion2 -> ! =
expresion2 -> = =

<VAR_CTE>
VAR_CTE -> id
VAR_CTE -> cte_int
VAR_CTE -> cte_float
VAR_CTE -> cte_string
VAR_CTE -> cte_bool
VAR_CTE -> cte_list

<PRINT>
PRINT -> print ( print1 )

print1 -> cte_string print2
print1 -> id print2

print2 -> vacio
print2 -> + print1

<CONDICION>
CONDICION -> IF ( expresion_logica ) condicion3 condicion1

condicion1 -> condicion2
condicion1 -> else if condicion3 condicion1
condicion1 -> vacio

condicion2 -> else condicion3

condicion3 -> BLOQUE
condicion3 -> { pass }

<INPUT>
INPUT -> TIPO id = input ( input1 )
INPUT -> id = input ( input1 )

input1 -> vacio
input1 -> cte_string

<CTE_BOOL>
CTE_BOOL -> TRUE | FALSE

<FOR>
FOR -> FOR CTE_INT TO CTE_INT BY ( for1 CTE_INT ) bloque

for1 -> +
for1 -> -
for1 -> /
for1 -> *

<FUNCION>
FUNCION -> FUNCTION funcion1

funcion1 -> VOID ID ( funcion4 ) { funcion2 ESTATUTO funcion3 }
funcion1 -> TIPO ID ( funcion4 ) { funcion2 ESTATUTO funcion3 return id }

funcion2 -> vacio
funcion2 -> VAR_DECLARACION funcion2

funcion3 -> vacio
funcion3 -> ESTATUTO funcion3

funcion4 -> PARAMETROS
funcion4 -> vacio

<SWITCH>
SWITCH -> switch ID switch1  { switch2  switch3 }

switch1 -> vacio
switch1 -> [ exp ]

switch2 -> vacio
switch2 -> case VAR_CTE : switch4 switch2

switch3 -> default : switch4

switch4 -> ESTATUTO
switch4 -> { PASS }
