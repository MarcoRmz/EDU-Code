<PROGRAMA>
PROGRAMA -> START programa1 programa2 main END

programa1 -> VAR_DECLARACION programa1
programa1 -> vacio

programa2 -> FUNCION programa2
programa2 -> vacio

<VAR_DECLARACION>
VAR_DECLARACION -> tipo var_declaracion1
VAR_DECLARACION -> VECTOR tipo var_declaracion2

var_declaracion1 -> ID
var_declaracion1 -> inicializacion

var_declaracion2 -> ID
var_declaracion2 -> inicializacion_vector

<PARAMETROS>
PARAMETROS -> tipo parametros1 ID parametros2
PARAMETROS -> VECTOR tipo parametros1 ID parametros2

parametros1 -> '&'
parametros1 -> vacio

parametros2 -> ',' parametros
parametros2 -> vacio

<INICIALIZACION>
INICIALIZACION -> ID EQUAL var_cte

<TIPO>
TIPO -> int
TIPO -> float
TIPO -> string
TIPO -> bool

<BLOQUE>
BLOQUE -> { estatuto bloque1 }

bloque1 -> vacio
bloque1 -> estatuto bloque1

<EXP>
EXP -> termino exp1

exp1 -> '+' exp
exp1 -> '-' exp
exp1 -> vacio

<TERMINO>
TERMINO -> factor termino1

termino1 -> '*' termino
termino1 -> '/' termino
termino1 -> vacio

<INICIALIZACION_VECTOR>
INICIALIZACION_VECTOR -> ID = '(' inicializacion_vector1 ')'

inicializacion_vector1 -> var_cte inicializacion_vector2
inicializacion_vector1 -> vacio

inicializacion_vector2 -> ',' var_cte inicializacion_vector2
inicializacion_vector2 -> vacio

<MAIN>
MAIN -> MAIN '{' main1 estatuto main2 '}'

main1 -> vacio
main1 -> var_declaracion main1

main2 -> estatuto main2
main2 -> vacio

<WHILE>
WHILE -> WHILE '(' expresion ')' bloque

<FACTOR>
FACTOR -> '(' expresion ')'
FACTOR -> factor1 var_cte

factor1 -> '-' var_cte
factor1 -> '+' var_cte
factor1 -> vacio

<ESTATUTO>
ESTATUTO -> inicializacion
ESTATUTO -> condicion
ESTATUTO -> print
ESTATUTO -> input
ESTATUTO -> switch
ESTATUTO -> while
ESTATUTO -> for
ESTATUTO -> llamada

<EXPRESION>
EXPRESION -> expresion1

expresion1 -> vacio
expresion1 -> expresion2 exp

expresion2 -> '>'
expresion2 -> '<'
expresion2 -> '!' '='
expresion2 -> '=' '='

<EXPRESION_LOGICA>
EXPRESION_LOGICA -> exp expresion_logica1 expresion

expresion_logica1 -> AND exp
expresion_logica1 -> OR exp

<LLAMADA>
LLAMADA -> ID '(' llamada1 ')'

llamada1 -> vacio
llamada1-> exp llamada2

llamada2 -> vacio
llamada2 -> ',' exp llamada2

<VAR_CTE>
VAR_CTE -> ID var_cte1
VAR_CTE -> CTE_INT
VAR_CTE -> CTE_FLOAT
VAR_CTE -> CTE_STRING
VAR_CTE -> cte_bool

var_cte1 -> vacio
var_cte1 -> '(' exp var_cte2 ')'
var_cte1 -> '[' exp ']'

var_cte2 -> ',' exp var_cte2

<PRINT>
PRINT -> PRINT '(' print1 ')'

print1 -> CTE_STRING print2
print1 -> ID print2

print2 -> vacio
print2 -> + print1

<CONDICION>
CONDICION -> IF ( expresion_logica ) condicion3 condicion1

condicion1 -> condicion2
condicion1 -> else if condicion3 condicion1
condicion1 -> vacio

condicion2 -> else condicion3

condicion3 -> BLOQUE
condicion3 -> { pass }

<INPUT>
INPUT -> TIPO ID = input ( input1 )
INPUT -> ID = input ( input1 )

input1 -> vacio
input1 -> CTE_STRING

<CTE_BOOL>
CTE_BOOL -> TRUE | FALSE

<FOR>

FOR -> FOR CTE_INT TO CTE_INT BY ( for1 CTE_INT ) bloque


for1 -> +
for1 -> -
for1 -> /
for1 -> *

<FUNCION>

FUNCION -> FUNCTION funcion1

funcion1 -> VOID ID ( funcion4 ) { funcion2 ESTATUTO funcion3 }
funcion1 -> TIPO ID ( funcion4 ) { funcion2 ESTATUTO funcion3 return id }

funcion2 -> vacio
funcion2 -> VAR_DECLARACION funcion2

funcion3 -> vacio
funcion3 -> ESTATUTO funcion3

funcion4 -> PARAMETROS
funcion4 -> vacio

<SWITCH>
SWITCH -> switch ID switch1  { switch2  switch3 }

switch1 -> vacio
switch1 -> [ exp ]

switch2 -> vacio
switch2 -> case VAR_CTE : switch4 switch2

switch3 -> default : switch4

switch4 -> ESTATUTO
switch4 -> { PASS }
