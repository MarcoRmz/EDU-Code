Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> START programa1 programa2 main END
Rule 2     programa1 -> var_declaracion programa1
Rule 3     programa1 -> epsilon
Rule 4     programa2 -> funcion programa2
Rule 5     programa2 -> epsilon
Rule 6     var_declaracion -> tipo var_declaracion1
Rule 7     var_declaracion -> VECTOR tipo var_declaracion2
Rule 8     var_declaracion1 -> ID declareVar var_declaracion3
Rule 9     var_declaracion2 -> ID declareVar
Rule 10    var_declaracion2 -> inicializacion_vector
Rule 11    var_declaracion3 -> epsilon
Rule 12    var_declaracion3 -> inicializacion
Rule 13    declareVar -> <empty>
Rule 14    parametros -> tipo parametros1 ID parametros2
Rule 15    parametros -> VECTOR tipo parametros1 ID parametros2
Rule 16    parametros1 -> AMPERSON
Rule 17    parametros1 -> epsilon
Rule 18    parametros2 -> COMMA parametros
Rule 19    parametros2 -> epsilon
Rule 20    inicializacion -> EQUALS exp
Rule 21    tipo -> INT
Rule 22    tipo -> FLOAT
Rule 23    tipo -> BOOL
Rule 24    tipo -> STRING
Rule 25    bloque -> LCURL estatuto bloque1 RCURL
Rule 26    bloque1 -> estatuto bloque1
Rule 27    bloque1 -> epsilon
Rule 28    exp -> termino exp1
Rule 29    exp1 -> PLUS exp
Rule 30    exp1 -> MINUS exp
Rule 31    exp1 -> epsilon
Rule 32    termino -> factor termino1
Rule 33    termino1 -> TIMES termino
Rule 34    termino1 -> DIVIDE termino
Rule 35    termino1 -> epsilon
Rule 36    inicializacion_vector -> ID declareVar EQUALS LBRACKET inicializacion_vector1 RBRACKET
Rule 37    inicializacion_vector1 -> varcte inicializacion_vector2
Rule 38    inicializacion_vector1 -> epsilon
Rule 39    inicializacion_vector2 -> COMMA varcte inicializacion_vector2
Rule 40    inicializacion_vector2 -> epsilon
Rule 41    main -> MAIN LCURL main1 estatuto main2 RCURL
Rule 42    main1 -> var_declaracion main1
Rule 43    main1 -> epsilon
Rule 44    main2 -> estatuto main2
Rule 45    main2 -> epsilon
Rule 46    while -> WHILE LPAREN expresion RPAREN bloque
Rule 47    factor -> LPAREN expresion RPAREN
Rule 48    factor -> factor1
Rule 49    factor1 -> PLUS varcte
Rule 50    factor1 -> MINUS varcte
Rule 51    factor1 -> varcte
Rule 52    estatuto -> asignacion
Rule 53    estatuto -> llamada
Rule 54    estatuto -> condicion
Rule 55    estatuto -> switch
Rule 56    estatuto -> while
Rule 57    estatuto -> for
Rule 58    asignacion -> ID EQUALS asignacion1
Rule 59    asignacion1 -> exp
Rule 60    asignacion1 -> llamada
Rule 61    expresion -> expresion1
Rule 62    expresion1 -> epsilon
Rule 63    expresion1 -> expresion2 exp
Rule 64    expresion2 -> LESS
Rule 65    expresion2 -> GREATER
Rule 66    expresion2 -> DOUBLE_EQUAL
Rule 67    expresion2 -> DIFF
Rule 68    expresion_logica -> exp expresion_logica1 expresion
Rule 69    expresion_logica1 -> AND exp
Rule 70    expresion_logica1 -> epsilon
Rule 71    expresion_logica1 -> OR exp
Rule 72    llamada -> ID LPAREN llamada1 RPAREN
Rule 73    llamada -> print
Rule 74    llamada -> input
Rule 75    llamada1 -> epsilon
Rule 76    llamada1 -> exp llamada2
Rule 77    llamada2 -> epsilon
Rule 78    llamada2 -> COMMA exp llamada2
Rule 79    varcte -> ID varcte1
Rule 80    varcte -> CTE_INT
Rule 81    varcte -> CTE_FLOAT
Rule 82    varcte -> CTE_STRING
Rule 83    varcte -> cte_bool
Rule 84    varcte1 -> epsilon
Rule 85    varcte1 -> LPAREN exp varcte2 RPAREN
Rule 86    varcte1 -> LBRACKET exp RBRACKET
Rule 87    varcte2 -> epsilon
Rule 88    varcte2 -> COMMA exp varcte2
Rule 89    cte_bool -> TRUE
Rule 90    cte_bool -> FALSE
Rule 91    print -> PRINT LPAREN print1 RPAREN
Rule 92    print1 -> CTE_STRING print2
Rule 93    print1 -> ID print2
Rule 94    print2 -> epsilon
Rule 95    print2 -> PLUS print1
Rule 96    condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
Rule 97    condicion1 -> bloque
Rule 98    condicion1 -> LCURL bloque RCURL
Rule 99    condicion2 -> ELSEIF condicion1 condicion2
Rule 100   condicion2 -> epsilon
Rule 101   condicion3 -> ELSE condicion1
Rule 102   condicion3 -> epsilon
Rule 103   input -> INPUT LPAREN input1 RPAREN
Rule 104   input1 -> CTE_STRING
Rule 105   input1 -> epsilon
Rule 106   for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
Rule 107   for1 -> PLUS
Rule 108   for1 -> TIMES
Rule 109   for1 -> DIVIDE
Rule 110   for1 -> MINUS
Rule 111   funcion -> FUNCTION funcion4
Rule 112   funcion1 -> epsilon
Rule 113   funcion1 -> var_declaracion funcion1
Rule 114   funcion2 -> epsilon
Rule 115   funcion2 -> estatuto funcion2
Rule 116   funcion3 -> parametros
Rule 117   funcion3 -> epsilon
Rule 118   funcion4 -> VOID ID LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 RCURL
Rule 119   funcion4 -> tipo ID LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 RETURN ID RCURL
Rule 120   switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL
Rule 121   switch1 -> epsilon
Rule 122   switch1 -> LBRACKET exp RBRACKET
Rule 123   switch2 -> epsilon
Rule 124   switch2 -> CASE varcte COLON switch4 switch2
Rule 125   switch3 -> DEFAULT COLON switch4
Rule 126   switch4 -> LCURL PASS RCURL
Rule 127   switch4 -> estatuto
Rule 128   epsilon -> <empty>

Terminals, with rules where they appear

AMPERSON             : 16
AND                  : 69
BOOL                 : 23
BY                   : 106
CASE                 : 124
COLON                : 124 125
COMMA                : 18 39 78 88
CTE_FLOAT            : 81
CTE_INT              : 80 106 106 106
CTE_STRING           : 82 92 104
DEFAULT              : 125
DIFF                 : 67
DIVIDE               : 34 109
DOUBLE_EQUAL         : 66
ELSE                 : 101
ELSEIF               : 99
END                  : 1
EQUALS               : 20 36 58
FALSE                : 90
FLOAT                : 22
FOR                  : 106
FUNCTION             : 111
GREATER              : 65
ID                   : 8 9 14 15 36 58 72 79 93 118 119 119 120
IF                   : 96
INPUT                : 103
INT                  : 21
LBRACKET             : 36 86 122
LCURL                : 25 41 98 118 119 120 126
LESS                 : 64
LPAREN               : 46 47 72 85 91 96 103 106 118 119
MAIN                 : 41
MINUS                : 30 50 110
OR                   : 71
PASS                 : 126
PLUS                 : 29 49 95 107
PRINT                : 91
RBRACKET             : 36 86 122
RCURL                : 25 41 98 118 119 120 126
RETURN               : 119
RPAREN               : 46 47 72 85 91 96 103 106 118 119
START                : 1
STRING               : 24
SWITCH               : 120
TIMES                : 33 108
TO                   : 106
TRUE                 : 89
VECTOR               : 7 15
VOID                 : 118
WHILE                : 46
error                : 

Nonterminals, with rules where they appear

asignacion           : 52
asignacion1          : 58
bloque               : 46 97 98 106
bloque1              : 25 26
condicion            : 54
condicion1           : 96 99 101
condicion2           : 96 99
condicion3           : 96
cte_bool             : 83
declareVar           : 8 9 36
epsilon              : 3 5 11 17 19 27 31 35 38 40 43 45 62 70 75 77 84 87 94 100 102 105 112 114 117 121 123
estatuto             : 25 26 41 44 115 118 119 127
exp                  : 20 29 30 59 63 68 69 71 76 78 85 86 88 122
exp1                 : 28
expresion            : 46 47 68
expresion1           : 61
expresion2           : 63
expresion_logica     : 96
expresion_logica1    : 68
factor               : 32
factor1              : 48
for                  : 57
for1                 : 106
funcion              : 4
funcion1             : 113 118 119
funcion2             : 115 118 119
funcion3             : 118 119
funcion4             : 111
inicializacion       : 12
inicializacion_vector : 10
inicializacion_vector1 : 36
inicializacion_vector2 : 37 39
input                : 74
input1               : 103
llamada              : 53 60
llamada1             : 72
llamada2             : 76 78
main                 : 1
main1                : 41 42
main2                : 41 44
parametros           : 18 116
parametros1          : 14 15
parametros2          : 14 15
print                : 73
print1               : 91 95
print2               : 92 93
programa             : 0
programa1            : 1 2
programa2            : 1 4
switch               : 55
switch1              : 120
switch2              : 120 124
switch3              : 120
switch4              : 124 125
termino              : 28 33 34
termino1             : 32
tipo                 : 6 7 14 15 119
var_declaracion      : 2 42 113
var_declaracion1     : 6
var_declaracion2     : 7
var_declaracion3     : 8
varcte               : 37 39 49 50 51 124
varcte1              : 79
varcte2              : 85 88
while                : 56

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . START programa1 programa2 main END

    START           shift and go to state 1

    programa                       shift and go to state 2

state 1

    (1) programa -> START . programa1 programa2 main END
    (2) programa1 -> . var_declaracion programa1
    (3) programa1 -> . epsilon
    (6) var_declaracion -> . tipo var_declaracion1
    (7) var_declaracion -> . VECTOR tipo var_declaracion2
    (128) epsilon -> .
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . BOOL
    (24) tipo -> . STRING

    VECTOR          shift and go to state 8
    FUNCTION        reduce using rule 128 (epsilon -> .)
    MAIN            reduce using rule 128 (epsilon -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 5
    var_declaracion                shift and go to state 6
    programa1                      shift and go to state 7
    epsilon                        shift and go to state 10

state 2

    (0) S' -> programa .



state 3

    (22) tipo -> FLOAT .

    AMPERSON        reduce using rule 22 (tipo -> FLOAT .)
    ID              reduce using rule 22 (tipo -> FLOAT .)


state 4

    (24) tipo -> STRING .

    AMPERSON        reduce using rule 24 (tipo -> STRING .)
    ID              reduce using rule 24 (tipo -> STRING .)


state 5

    (6) var_declaracion -> tipo . var_declaracion1
    (8) var_declaracion1 -> . ID declareVar var_declaracion3

    ID              shift and go to state 13

    var_declaracion1               shift and go to state 12

state 6

    (2) programa1 -> var_declaracion . programa1
    (2) programa1 -> . var_declaracion programa1
    (3) programa1 -> . epsilon
    (6) var_declaracion -> . tipo var_declaracion1
    (7) var_declaracion -> . VECTOR tipo var_declaracion2
    (128) epsilon -> .
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . BOOL
    (24) tipo -> . STRING

    VECTOR          shift and go to state 8
    FUNCTION        reduce using rule 128 (epsilon -> .)
    MAIN            reduce using rule 128 (epsilon -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 5
    epsilon                        shift and go to state 10
    var_declaracion                shift and go to state 6
    programa1                      shift and go to state 14

state 7

    (1) programa -> START programa1 . programa2 main END
    (4) programa2 -> . funcion programa2
    (5) programa2 -> . epsilon
    (111) funcion -> . FUNCTION funcion4
    (128) epsilon -> .

    FUNCTION        shift and go to state 15
    MAIN            reduce using rule 128 (epsilon -> .)

    epsilon                        shift and go to state 16
    programa2                      shift and go to state 17
    funcion                        shift and go to state 18

state 8

    (7) var_declaracion -> VECTOR . tipo var_declaracion2
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . BOOL
    (24) tipo -> . STRING

    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 19

state 9

    (23) tipo -> BOOL .

    AMPERSON        reduce using rule 23 (tipo -> BOOL .)
    ID              reduce using rule 23 (tipo -> BOOL .)


state 10

    (3) programa1 -> epsilon .

    FUNCTION        reduce using rule 3 (programa1 -> epsilon .)
    MAIN            reduce using rule 3 (programa1 -> epsilon .)


state 11

    (21) tipo -> INT .

    AMPERSON        reduce using rule 21 (tipo -> INT .)
    ID              reduce using rule 21 (tipo -> INT .)


state 12

    (6) var_declaracion -> tipo var_declaracion1 .

    VECTOR          reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    INT             reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    FLOAT           reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    BOOL            reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    STRING          reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    ID              reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    IF              reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    SWITCH          reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    WHILE           reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    FOR             reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    PRINT           reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    INPUT           reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    FUNCTION        reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    MAIN            reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)


state 13

    (8) var_declaracion1 -> ID . declareVar var_declaracion3
    (13) declareVar -> .

    EQUALS          reduce using rule 13 (declareVar -> .)
    VECTOR          reduce using rule 13 (declareVar -> .)
    INT             reduce using rule 13 (declareVar -> .)
    FLOAT           reduce using rule 13 (declareVar -> .)
    BOOL            reduce using rule 13 (declareVar -> .)
    STRING          reduce using rule 13 (declareVar -> .)
    FUNCTION        reduce using rule 13 (declareVar -> .)
    MAIN            reduce using rule 13 (declareVar -> .)
    ID              reduce using rule 13 (declareVar -> .)
    IF              reduce using rule 13 (declareVar -> .)
    SWITCH          reduce using rule 13 (declareVar -> .)
    WHILE           reduce using rule 13 (declareVar -> .)
    FOR             reduce using rule 13 (declareVar -> .)
    PRINT           reduce using rule 13 (declareVar -> .)
    INPUT           reduce using rule 13 (declareVar -> .)

    declareVar                     shift and go to state 20

state 14

    (2) programa1 -> var_declaracion programa1 .

    FUNCTION        reduce using rule 2 (programa1 -> var_declaracion programa1 .)
    MAIN            reduce using rule 2 (programa1 -> var_declaracion programa1 .)


state 15

    (111) funcion -> FUNCTION . funcion4
    (118) funcion4 -> . VOID ID LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 RCURL
    (119) funcion4 -> . tipo ID LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 RETURN ID RCURL
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . BOOL
    (24) tipo -> . STRING

    VOID            shift and go to state 22
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 21
    funcion4                       shift and go to state 23

state 16

    (5) programa2 -> epsilon .

    MAIN            reduce using rule 5 (programa2 -> epsilon .)


state 17

    (1) programa -> START programa1 programa2 . main END
    (41) main -> . MAIN LCURL main1 estatuto main2 RCURL

    MAIN            shift and go to state 25

    main                           shift and go to state 24

state 18

    (4) programa2 -> funcion . programa2
    (4) programa2 -> . funcion programa2
    (5) programa2 -> . epsilon
    (111) funcion -> . FUNCTION funcion4
    (128) epsilon -> .

    FUNCTION        shift and go to state 15
    MAIN            reduce using rule 128 (epsilon -> .)

    epsilon                        shift and go to state 16
    programa2                      shift and go to state 26
    funcion                        shift and go to state 18

state 19

    (7) var_declaracion -> VECTOR tipo . var_declaracion2
    (9) var_declaracion2 -> . ID declareVar
    (10) var_declaracion2 -> . inicializacion_vector
    (36) inicializacion_vector -> . ID declareVar EQUALS LBRACKET inicializacion_vector1 RBRACKET

    ID              shift and go to state 29

    inicializacion_vector          shift and go to state 27
    var_declaracion2               shift and go to state 28

state 20

    (8) var_declaracion1 -> ID declareVar . var_declaracion3
    (11) var_declaracion3 -> . epsilon
    (12) var_declaracion3 -> . inicializacion
    (128) epsilon -> .
    (20) inicializacion -> . EQUALS exp

    VECTOR          reduce using rule 128 (epsilon -> .)
    INT             reduce using rule 128 (epsilon -> .)
    FLOAT           reduce using rule 128 (epsilon -> .)
    BOOL            reduce using rule 128 (epsilon -> .)
    STRING          reduce using rule 128 (epsilon -> .)
    FUNCTION        reduce using rule 128 (epsilon -> .)
    MAIN            reduce using rule 128 (epsilon -> .)
    ID              reduce using rule 128 (epsilon -> .)
    IF              reduce using rule 128 (epsilon -> .)
    SWITCH          reduce using rule 128 (epsilon -> .)
    WHILE           reduce using rule 128 (epsilon -> .)
    FOR             reduce using rule 128 (epsilon -> .)
    PRINT           reduce using rule 128 (epsilon -> .)
    INPUT           reduce using rule 128 (epsilon -> .)
    EQUALS          shift and go to state 32

    inicializacion                 shift and go to state 33
    epsilon                        shift and go to state 30
    var_declaracion3               shift and go to state 31

state 21

    (119) funcion4 -> tipo . ID LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 RETURN ID RCURL

    ID              shift and go to state 34


state 22

    (118) funcion4 -> VOID . ID LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 RCURL

    ID              shift and go to state 35


state 23

    (111) funcion -> FUNCTION funcion4 .

    FUNCTION        reduce using rule 111 (funcion -> FUNCTION funcion4 .)
    MAIN            reduce using rule 111 (funcion -> FUNCTION funcion4 .)


state 24

    (1) programa -> START programa1 programa2 main . END

    END             shift and go to state 36


state 25

    (41) main -> MAIN . LCURL main1 estatuto main2 RCURL

    LCURL           shift and go to state 37


state 26

    (4) programa2 -> funcion programa2 .

    MAIN            reduce using rule 4 (programa2 -> funcion programa2 .)


state 27

    (10) var_declaracion2 -> inicializacion_vector .

    VECTOR          reduce using rule 10 (var_declaracion2 -> inicializacion_vector .)
    INT             reduce using rule 10 (var_declaracion2 -> inicializacion_vector .)
    FLOAT           reduce using rule 10 (var_declaracion2 -> inicializacion_vector .)
    BOOL            reduce using rule 10 (var_declaracion2 -> inicializacion_vector .)
    STRING          reduce using rule 10 (var_declaracion2 -> inicializacion_vector .)
    FUNCTION        reduce using rule 10 (var_declaracion2 -> inicializacion_vector .)
    MAIN            reduce using rule 10 (var_declaracion2 -> inicializacion_vector .)
    ID              reduce using rule 10 (var_declaracion2 -> inicializacion_vector .)
    IF              reduce using rule 10 (var_declaracion2 -> inicializacion_vector .)
    SWITCH          reduce using rule 10 (var_declaracion2 -> inicializacion_vector .)
    WHILE           reduce using rule 10 (var_declaracion2 -> inicializacion_vector .)
    FOR             reduce using rule 10 (var_declaracion2 -> inicializacion_vector .)
    PRINT           reduce using rule 10 (var_declaracion2 -> inicializacion_vector .)
    INPUT           reduce using rule 10 (var_declaracion2 -> inicializacion_vector .)


state 28

    (7) var_declaracion -> VECTOR tipo var_declaracion2 .

    VECTOR          reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    INT             reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    FLOAT           reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    BOOL            reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    STRING          reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    ID              reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    IF              reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    SWITCH          reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    WHILE           reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    FOR             reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    PRINT           reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    INPUT           reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    FUNCTION        reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    MAIN            reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)


state 29

    (9) var_declaracion2 -> ID . declareVar
    (36) inicializacion_vector -> ID . declareVar EQUALS LBRACKET inicializacion_vector1 RBRACKET
    (13) declareVar -> .

    EQUALS          reduce using rule 13 (declareVar -> .)
    VECTOR          reduce using rule 13 (declareVar -> .)
    INT             reduce using rule 13 (declareVar -> .)
    FLOAT           reduce using rule 13 (declareVar -> .)
    BOOL            reduce using rule 13 (declareVar -> .)
    STRING          reduce using rule 13 (declareVar -> .)
    FUNCTION        reduce using rule 13 (declareVar -> .)
    MAIN            reduce using rule 13 (declareVar -> .)
    ID              reduce using rule 13 (declareVar -> .)
    IF              reduce using rule 13 (declareVar -> .)
    SWITCH          reduce using rule 13 (declareVar -> .)
    WHILE           reduce using rule 13 (declareVar -> .)
    FOR             reduce using rule 13 (declareVar -> .)
    PRINT           reduce using rule 13 (declareVar -> .)
    INPUT           reduce using rule 13 (declareVar -> .)

    declareVar                     shift and go to state 38

state 30

    (11) var_declaracion3 -> epsilon .

    VECTOR          reduce using rule 11 (var_declaracion3 -> epsilon .)
    INT             reduce using rule 11 (var_declaracion3 -> epsilon .)
    FLOAT           reduce using rule 11 (var_declaracion3 -> epsilon .)
    BOOL            reduce using rule 11 (var_declaracion3 -> epsilon .)
    STRING          reduce using rule 11 (var_declaracion3 -> epsilon .)
    FUNCTION        reduce using rule 11 (var_declaracion3 -> epsilon .)
    MAIN            reduce using rule 11 (var_declaracion3 -> epsilon .)
    ID              reduce using rule 11 (var_declaracion3 -> epsilon .)
    IF              reduce using rule 11 (var_declaracion3 -> epsilon .)
    SWITCH          reduce using rule 11 (var_declaracion3 -> epsilon .)
    WHILE           reduce using rule 11 (var_declaracion3 -> epsilon .)
    FOR             reduce using rule 11 (var_declaracion3 -> epsilon .)
    PRINT           reduce using rule 11 (var_declaracion3 -> epsilon .)
    INPUT           reduce using rule 11 (var_declaracion3 -> epsilon .)


state 31

    (8) var_declaracion1 -> ID declareVar var_declaracion3 .

    VECTOR          reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    INT             reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    FLOAT           reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    BOOL            reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    STRING          reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    FUNCTION        reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    MAIN            reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    ID              reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    IF              reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    SWITCH          reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    WHILE           reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    FOR             reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    PRINT           reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    INPUT           reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)


state 32

    (20) inicializacion -> EQUALS . exp
    (28) exp -> . termino exp1
    (32) termino -> . factor termino1
    (47) factor -> . LPAREN expresion RPAREN
    (48) factor -> . factor1
    (49) factor1 -> . PLUS varcte
    (50) factor1 -> . MINUS varcte
    (51) factor1 -> . varcte
    (79) varcte -> . ID varcte1
    (80) varcte -> . CTE_INT
    (81) varcte -> . CTE_FLOAT
    (82) varcte -> . CTE_STRING
    (83) varcte -> . cte_bool
    (89) cte_bool -> . TRUE
    (90) cte_bool -> . FALSE

    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    factor1                        shift and go to state 53
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 46
    exp                            shift and go to state 47
    factor                         shift and go to state 48
    varcte                         shift and go to state 39

state 33

    (12) var_declaracion3 -> inicializacion .

    VECTOR          reduce using rule 12 (var_declaracion3 -> inicializacion .)
    INT             reduce using rule 12 (var_declaracion3 -> inicializacion .)
    FLOAT           reduce using rule 12 (var_declaracion3 -> inicializacion .)
    BOOL            reduce using rule 12 (var_declaracion3 -> inicializacion .)
    STRING          reduce using rule 12 (var_declaracion3 -> inicializacion .)
    FUNCTION        reduce using rule 12 (var_declaracion3 -> inicializacion .)
    MAIN            reduce using rule 12 (var_declaracion3 -> inicializacion .)
    ID              reduce using rule 12 (var_declaracion3 -> inicializacion .)
    IF              reduce using rule 12 (var_declaracion3 -> inicializacion .)
    SWITCH          reduce using rule 12 (var_declaracion3 -> inicializacion .)
    WHILE           reduce using rule 12 (var_declaracion3 -> inicializacion .)
    FOR             reduce using rule 12 (var_declaracion3 -> inicializacion .)
    PRINT           reduce using rule 12 (var_declaracion3 -> inicializacion .)
    INPUT           reduce using rule 12 (var_declaracion3 -> inicializacion .)


state 34

    (119) funcion4 -> tipo ID . LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 RETURN ID RCURL

    LPAREN          shift and go to state 54


state 35

    (118) funcion4 -> VOID ID . LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 RCURL

    LPAREN          shift and go to state 55


state 36

    (1) programa -> START programa1 programa2 main END .

    $end            reduce using rule 1 (programa -> START programa1 programa2 main END .)


state 37

    (41) main -> MAIN LCURL . main1 estatuto main2 RCURL
    (42) main1 -> . var_declaracion main1
    (43) main1 -> . epsilon
    (6) var_declaracion -> . tipo var_declaracion1
    (7) var_declaracion -> . VECTOR tipo var_declaracion2
    (128) epsilon -> .
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . BOOL
    (24) tipo -> . STRING

    VECTOR          shift and go to state 8
    ID              reduce using rule 128 (epsilon -> .)
    IF              reduce using rule 128 (epsilon -> .)
    SWITCH          reduce using rule 128 (epsilon -> .)
    WHILE           reduce using rule 128 (epsilon -> .)
    FOR             reduce using rule 128 (epsilon -> .)
    PRINT           reduce using rule 128 (epsilon -> .)
    INPUT           reduce using rule 128 (epsilon -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 5
    main1                          shift and go to state 56
    var_declaracion                shift and go to state 57
    epsilon                        shift and go to state 58

state 38

    (9) var_declaracion2 -> ID declareVar .
    (36) inicializacion_vector -> ID declareVar . EQUALS LBRACKET inicializacion_vector1 RBRACKET

    VECTOR          reduce using rule 9 (var_declaracion2 -> ID declareVar .)
    INT             reduce using rule 9 (var_declaracion2 -> ID declareVar .)
    FLOAT           reduce using rule 9 (var_declaracion2 -> ID declareVar .)
    BOOL            reduce using rule 9 (var_declaracion2 -> ID declareVar .)
    STRING          reduce using rule 9 (var_declaracion2 -> ID declareVar .)
    FUNCTION        reduce using rule 9 (var_declaracion2 -> ID declareVar .)
    MAIN            reduce using rule 9 (var_declaracion2 -> ID declareVar .)
    ID              reduce using rule 9 (var_declaracion2 -> ID declareVar .)
    IF              reduce using rule 9 (var_declaracion2 -> ID declareVar .)
    SWITCH          reduce using rule 9 (var_declaracion2 -> ID declareVar .)
    WHILE           reduce using rule 9 (var_declaracion2 -> ID declareVar .)
    FOR             reduce using rule 9 (var_declaracion2 -> ID declareVar .)
    PRINT           reduce using rule 9 (var_declaracion2 -> ID declareVar .)
    INPUT           reduce using rule 9 (var_declaracion2 -> ID declareVar .)
    EQUALS          shift and go to state 59


state 39

    (51) factor1 -> varcte .

    TIMES           reduce using rule 51 (factor1 -> varcte .)
    DIVIDE          reduce using rule 51 (factor1 -> varcte .)
    PLUS            reduce using rule 51 (factor1 -> varcte .)
    MINUS           reduce using rule 51 (factor1 -> varcte .)
    VECTOR          reduce using rule 51 (factor1 -> varcte .)
    INT             reduce using rule 51 (factor1 -> varcte .)
    FLOAT           reduce using rule 51 (factor1 -> varcte .)
    BOOL            reduce using rule 51 (factor1 -> varcte .)
    STRING          reduce using rule 51 (factor1 -> varcte .)
    FUNCTION        reduce using rule 51 (factor1 -> varcte .)
    MAIN            reduce using rule 51 (factor1 -> varcte .)
    ID              reduce using rule 51 (factor1 -> varcte .)
    IF              reduce using rule 51 (factor1 -> varcte .)
    SWITCH          reduce using rule 51 (factor1 -> varcte .)
    WHILE           reduce using rule 51 (factor1 -> varcte .)
    FOR             reduce using rule 51 (factor1 -> varcte .)
    PRINT           reduce using rule 51 (factor1 -> varcte .)
    INPUT           reduce using rule 51 (factor1 -> varcte .)
    RPAREN          reduce using rule 51 (factor1 -> varcte .)
    COMMA           reduce using rule 51 (factor1 -> varcte .)
    RBRACKET        reduce using rule 51 (factor1 -> varcte .)
    RCURL           reduce using rule 51 (factor1 -> varcte .)
    RETURN          reduce using rule 51 (factor1 -> varcte .)
    CASE            reduce using rule 51 (factor1 -> varcte .)
    DEFAULT         reduce using rule 51 (factor1 -> varcte .)
    AND             reduce using rule 51 (factor1 -> varcte .)
    OR              reduce using rule 51 (factor1 -> varcte .)
    LESS            reduce using rule 51 (factor1 -> varcte .)
    GREATER         reduce using rule 51 (factor1 -> varcte .)
    DOUBLE_EQUAL    reduce using rule 51 (factor1 -> varcte .)
    DIFF            reduce using rule 51 (factor1 -> varcte .)


state 40

    (80) varcte -> CTE_INT .

    TIMES           reduce using rule 80 (varcte -> CTE_INT .)
    DIVIDE          reduce using rule 80 (varcte -> CTE_INT .)
    PLUS            reduce using rule 80 (varcte -> CTE_INT .)
    MINUS           reduce using rule 80 (varcte -> CTE_INT .)
    VECTOR          reduce using rule 80 (varcte -> CTE_INT .)
    INT             reduce using rule 80 (varcte -> CTE_INT .)
    FLOAT           reduce using rule 80 (varcte -> CTE_INT .)
    BOOL            reduce using rule 80 (varcte -> CTE_INT .)
    STRING          reduce using rule 80 (varcte -> CTE_INT .)
    FUNCTION        reduce using rule 80 (varcte -> CTE_INT .)
    MAIN            reduce using rule 80 (varcte -> CTE_INT .)
    ID              reduce using rule 80 (varcte -> CTE_INT .)
    IF              reduce using rule 80 (varcte -> CTE_INT .)
    SWITCH          reduce using rule 80 (varcte -> CTE_INT .)
    WHILE           reduce using rule 80 (varcte -> CTE_INT .)
    FOR             reduce using rule 80 (varcte -> CTE_INT .)
    PRINT           reduce using rule 80 (varcte -> CTE_INT .)
    INPUT           reduce using rule 80 (varcte -> CTE_INT .)
    COMMA           reduce using rule 80 (varcte -> CTE_INT .)
    RBRACKET        reduce using rule 80 (varcte -> CTE_INT .)
    RPAREN          reduce using rule 80 (varcte -> CTE_INT .)
    AND             reduce using rule 80 (varcte -> CTE_INT .)
    OR              reduce using rule 80 (varcte -> CTE_INT .)
    LESS            reduce using rule 80 (varcte -> CTE_INT .)
    GREATER         reduce using rule 80 (varcte -> CTE_INT .)
    DOUBLE_EQUAL    reduce using rule 80 (varcte -> CTE_INT .)
    DIFF            reduce using rule 80 (varcte -> CTE_INT .)
    RCURL           reduce using rule 80 (varcte -> CTE_INT .)
    RETURN          reduce using rule 80 (varcte -> CTE_INT .)
    CASE            reduce using rule 80 (varcte -> CTE_INT .)
    DEFAULT         reduce using rule 80 (varcte -> CTE_INT .)
    COLON           reduce using rule 80 (varcte -> CTE_INT .)


state 41

    (47) factor -> LPAREN . expresion RPAREN
    (61) expresion -> . expresion1
    (62) expresion1 -> . epsilon
    (63) expresion1 -> . expresion2 exp
    (128) epsilon -> .
    (64) expresion2 -> . LESS
    (65) expresion2 -> . GREATER
    (66) expresion2 -> . DOUBLE_EQUAL
    (67) expresion2 -> . DIFF

    RPAREN          reduce using rule 128 (epsilon -> .)
    LESS            shift and go to state 63
    GREATER         shift and go to state 67
    DOUBLE_EQUAL    shift and go to state 65
    DIFF            shift and go to state 66

    expresion                      shift and go to state 60
    expresion1                     shift and go to state 61
    expresion2                     shift and go to state 62
    epsilon                        shift and go to state 64

state 42

    (89) cte_bool -> TRUE .

    COMMA           reduce using rule 89 (cte_bool -> TRUE .)
    RBRACKET        reduce using rule 89 (cte_bool -> TRUE .)
    TIMES           reduce using rule 89 (cte_bool -> TRUE .)
    DIVIDE          reduce using rule 89 (cte_bool -> TRUE .)
    PLUS            reduce using rule 89 (cte_bool -> TRUE .)
    MINUS           reduce using rule 89 (cte_bool -> TRUE .)
    RPAREN          reduce using rule 89 (cte_bool -> TRUE .)
    VECTOR          reduce using rule 89 (cte_bool -> TRUE .)
    INT             reduce using rule 89 (cte_bool -> TRUE .)
    FLOAT           reduce using rule 89 (cte_bool -> TRUE .)
    BOOL            reduce using rule 89 (cte_bool -> TRUE .)
    STRING          reduce using rule 89 (cte_bool -> TRUE .)
    FUNCTION        reduce using rule 89 (cte_bool -> TRUE .)
    MAIN            reduce using rule 89 (cte_bool -> TRUE .)
    ID              reduce using rule 89 (cte_bool -> TRUE .)
    IF              reduce using rule 89 (cte_bool -> TRUE .)
    SWITCH          reduce using rule 89 (cte_bool -> TRUE .)
    WHILE           reduce using rule 89 (cte_bool -> TRUE .)
    FOR             reduce using rule 89 (cte_bool -> TRUE .)
    PRINT           reduce using rule 89 (cte_bool -> TRUE .)
    INPUT           reduce using rule 89 (cte_bool -> TRUE .)
    RCURL           reduce using rule 89 (cte_bool -> TRUE .)
    RETURN          reduce using rule 89 (cte_bool -> TRUE .)
    CASE            reduce using rule 89 (cte_bool -> TRUE .)
    DEFAULT         reduce using rule 89 (cte_bool -> TRUE .)
    AND             reduce using rule 89 (cte_bool -> TRUE .)
    OR              reduce using rule 89 (cte_bool -> TRUE .)
    LESS            reduce using rule 89 (cte_bool -> TRUE .)
    GREATER         reduce using rule 89 (cte_bool -> TRUE .)
    DOUBLE_EQUAL    reduce using rule 89 (cte_bool -> TRUE .)
    DIFF            reduce using rule 89 (cte_bool -> TRUE .)
    COLON           reduce using rule 89 (cte_bool -> TRUE .)


state 43

    (81) varcte -> CTE_FLOAT .

    TIMES           reduce using rule 81 (varcte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 81 (varcte -> CTE_FLOAT .)
    PLUS            reduce using rule 81 (varcte -> CTE_FLOAT .)
    MINUS           reduce using rule 81 (varcte -> CTE_FLOAT .)
    VECTOR          reduce using rule 81 (varcte -> CTE_FLOAT .)
    INT             reduce using rule 81 (varcte -> CTE_FLOAT .)
    FLOAT           reduce using rule 81 (varcte -> CTE_FLOAT .)
    BOOL            reduce using rule 81 (varcte -> CTE_FLOAT .)
    STRING          reduce using rule 81 (varcte -> CTE_FLOAT .)
    FUNCTION        reduce using rule 81 (varcte -> CTE_FLOAT .)
    MAIN            reduce using rule 81 (varcte -> CTE_FLOAT .)
    ID              reduce using rule 81 (varcte -> CTE_FLOAT .)
    IF              reduce using rule 81 (varcte -> CTE_FLOAT .)
    SWITCH          reduce using rule 81 (varcte -> CTE_FLOAT .)
    WHILE           reduce using rule 81 (varcte -> CTE_FLOAT .)
    FOR             reduce using rule 81 (varcte -> CTE_FLOAT .)
    PRINT           reduce using rule 81 (varcte -> CTE_FLOAT .)
    INPUT           reduce using rule 81 (varcte -> CTE_FLOAT .)
    COMMA           reduce using rule 81 (varcte -> CTE_FLOAT .)
    RBRACKET        reduce using rule 81 (varcte -> CTE_FLOAT .)
    RPAREN          reduce using rule 81 (varcte -> CTE_FLOAT .)
    AND             reduce using rule 81 (varcte -> CTE_FLOAT .)
    OR              reduce using rule 81 (varcte -> CTE_FLOAT .)
    LESS            reduce using rule 81 (varcte -> CTE_FLOAT .)
    GREATER         reduce using rule 81 (varcte -> CTE_FLOAT .)
    DOUBLE_EQUAL    reduce using rule 81 (varcte -> CTE_FLOAT .)
    DIFF            reduce using rule 81 (varcte -> CTE_FLOAT .)
    RCURL           reduce using rule 81 (varcte -> CTE_FLOAT .)
    RETURN          reduce using rule 81 (varcte -> CTE_FLOAT .)
    CASE            reduce using rule 81 (varcte -> CTE_FLOAT .)
    DEFAULT         reduce using rule 81 (varcte -> CTE_FLOAT .)
    COLON           reduce using rule 81 (varcte -> CTE_FLOAT .)


state 44

    (82) varcte -> CTE_STRING .

    TIMES           reduce using rule 82 (varcte -> CTE_STRING .)
    DIVIDE          reduce using rule 82 (varcte -> CTE_STRING .)
    PLUS            reduce using rule 82 (varcte -> CTE_STRING .)
    MINUS           reduce using rule 82 (varcte -> CTE_STRING .)
    VECTOR          reduce using rule 82 (varcte -> CTE_STRING .)
    INT             reduce using rule 82 (varcte -> CTE_STRING .)
    FLOAT           reduce using rule 82 (varcte -> CTE_STRING .)
    BOOL            reduce using rule 82 (varcte -> CTE_STRING .)
    STRING          reduce using rule 82 (varcte -> CTE_STRING .)
    FUNCTION        reduce using rule 82 (varcte -> CTE_STRING .)
    MAIN            reduce using rule 82 (varcte -> CTE_STRING .)
    ID              reduce using rule 82 (varcte -> CTE_STRING .)
    IF              reduce using rule 82 (varcte -> CTE_STRING .)
    SWITCH          reduce using rule 82 (varcte -> CTE_STRING .)
    WHILE           reduce using rule 82 (varcte -> CTE_STRING .)
    FOR             reduce using rule 82 (varcte -> CTE_STRING .)
    PRINT           reduce using rule 82 (varcte -> CTE_STRING .)
    INPUT           reduce using rule 82 (varcte -> CTE_STRING .)
    COMMA           reduce using rule 82 (varcte -> CTE_STRING .)
    RBRACKET        reduce using rule 82 (varcte -> CTE_STRING .)
    RPAREN          reduce using rule 82 (varcte -> CTE_STRING .)
    AND             reduce using rule 82 (varcte -> CTE_STRING .)
    OR              reduce using rule 82 (varcte -> CTE_STRING .)
    LESS            reduce using rule 82 (varcte -> CTE_STRING .)
    GREATER         reduce using rule 82 (varcte -> CTE_STRING .)
    DOUBLE_EQUAL    reduce using rule 82 (varcte -> CTE_STRING .)
    DIFF            reduce using rule 82 (varcte -> CTE_STRING .)
    RCURL           reduce using rule 82 (varcte -> CTE_STRING .)
    RETURN          reduce using rule 82 (varcte -> CTE_STRING .)
    CASE            reduce using rule 82 (varcte -> CTE_STRING .)
    DEFAULT         reduce using rule 82 (varcte -> CTE_STRING .)
    COLON           reduce using rule 82 (varcte -> CTE_STRING .)


state 45

    (49) factor1 -> PLUS . varcte
    (79) varcte -> . ID varcte1
    (80) varcte -> . CTE_INT
    (81) varcte -> . CTE_FLOAT
    (82) varcte -> . CTE_STRING
    (83) varcte -> . cte_bool
    (89) cte_bool -> . TRUE
    (90) cte_bool -> . FALSE

    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    cte_bool                       shift and go to state 51
    varcte                         shift and go to state 68

state 46

    (28) exp -> termino . exp1
    (29) exp1 -> . PLUS exp
    (30) exp1 -> . MINUS exp
    (31) exp1 -> . epsilon
    (128) epsilon -> .

    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    VECTOR          reduce using rule 128 (epsilon -> .)
    INT             reduce using rule 128 (epsilon -> .)
    FLOAT           reduce using rule 128 (epsilon -> .)
    BOOL            reduce using rule 128 (epsilon -> .)
    STRING          reduce using rule 128 (epsilon -> .)
    FUNCTION        reduce using rule 128 (epsilon -> .)
    MAIN            reduce using rule 128 (epsilon -> .)
    ID              reduce using rule 128 (epsilon -> .)
    IF              reduce using rule 128 (epsilon -> .)
    SWITCH          reduce using rule 128 (epsilon -> .)
    WHILE           reduce using rule 128 (epsilon -> .)
    FOR             reduce using rule 128 (epsilon -> .)
    PRINT           reduce using rule 128 (epsilon -> .)
    INPUT           reduce using rule 128 (epsilon -> .)
    RPAREN          reduce using rule 128 (epsilon -> .)
    COMMA           reduce using rule 128 (epsilon -> .)
    RBRACKET        reduce using rule 128 (epsilon -> .)
    RCURL           reduce using rule 128 (epsilon -> .)
    RETURN          reduce using rule 128 (epsilon -> .)
    CASE            reduce using rule 128 (epsilon -> .)
    DEFAULT         reduce using rule 128 (epsilon -> .)
    AND             reduce using rule 128 (epsilon -> .)
    OR              reduce using rule 128 (epsilon -> .)
    LESS            reduce using rule 128 (epsilon -> .)
    GREATER         reduce using rule 128 (epsilon -> .)
    DOUBLE_EQUAL    reduce using rule 128 (epsilon -> .)
    DIFF            reduce using rule 128 (epsilon -> .)

    epsilon                        shift and go to state 69
    exp1                           shift and go to state 70

state 47

    (20) inicializacion -> EQUALS exp .

    VECTOR          reduce using rule 20 (inicializacion -> EQUALS exp .)
    INT             reduce using rule 20 (inicializacion -> EQUALS exp .)
    FLOAT           reduce using rule 20 (inicializacion -> EQUALS exp .)
    BOOL            reduce using rule 20 (inicializacion -> EQUALS exp .)
    STRING          reduce using rule 20 (inicializacion -> EQUALS exp .)
    FUNCTION        reduce using rule 20 (inicializacion -> EQUALS exp .)
    MAIN            reduce using rule 20 (inicializacion -> EQUALS exp .)
    ID              reduce using rule 20 (inicializacion -> EQUALS exp .)
    IF              reduce using rule 20 (inicializacion -> EQUALS exp .)
    SWITCH          reduce using rule 20 (inicializacion -> EQUALS exp .)
    WHILE           reduce using rule 20 (inicializacion -> EQUALS exp .)
    FOR             reduce using rule 20 (inicializacion -> EQUALS exp .)
    PRINT           reduce using rule 20 (inicializacion -> EQUALS exp .)
    INPUT           reduce using rule 20 (inicializacion -> EQUALS exp .)


state 48

    (32) termino -> factor . termino1
    (33) termino1 -> . TIMES termino
    (34) termino1 -> . DIVIDE termino
    (35) termino1 -> . epsilon
    (128) epsilon -> .

    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 73
    PLUS            reduce using rule 128 (epsilon -> .)
    MINUS           reduce using rule 128 (epsilon -> .)
    VECTOR          reduce using rule 128 (epsilon -> .)
    INT             reduce using rule 128 (epsilon -> .)
    FLOAT           reduce using rule 128 (epsilon -> .)
    BOOL            reduce using rule 128 (epsilon -> .)
    STRING          reduce using rule 128 (epsilon -> .)
    FUNCTION        reduce using rule 128 (epsilon -> .)
    MAIN            reduce using rule 128 (epsilon -> .)
    ID              reduce using rule 128 (epsilon -> .)
    IF              reduce using rule 128 (epsilon -> .)
    SWITCH          reduce using rule 128 (epsilon -> .)
    WHILE           reduce using rule 128 (epsilon -> .)
    FOR             reduce using rule 128 (epsilon -> .)
    PRINT           reduce using rule 128 (epsilon -> .)
    INPUT           reduce using rule 128 (epsilon -> .)
    RPAREN          reduce using rule 128 (epsilon -> .)
    COMMA           reduce using rule 128 (epsilon -> .)
    RBRACKET        reduce using rule 128 (epsilon -> .)
    RCURL           reduce using rule 128 (epsilon -> .)
    RETURN          reduce using rule 128 (epsilon -> .)
    CASE            reduce using rule 128 (epsilon -> .)
    DEFAULT         reduce using rule 128 (epsilon -> .)
    AND             reduce using rule 128 (epsilon -> .)
    OR              reduce using rule 128 (epsilon -> .)
    LESS            reduce using rule 128 (epsilon -> .)
    GREATER         reduce using rule 128 (epsilon -> .)
    DOUBLE_EQUAL    reduce using rule 128 (epsilon -> .)
    DIFF            reduce using rule 128 (epsilon -> .)

    epsilon                        shift and go to state 74
    termino1                       shift and go to state 75

state 49

    (90) cte_bool -> FALSE .

    COMMA           reduce using rule 90 (cte_bool -> FALSE .)
    RBRACKET        reduce using rule 90 (cte_bool -> FALSE .)
    TIMES           reduce using rule 90 (cte_bool -> FALSE .)
    DIVIDE          reduce using rule 90 (cte_bool -> FALSE .)
    PLUS            reduce using rule 90 (cte_bool -> FALSE .)
    MINUS           reduce using rule 90 (cte_bool -> FALSE .)
    RPAREN          reduce using rule 90 (cte_bool -> FALSE .)
    VECTOR          reduce using rule 90 (cte_bool -> FALSE .)
    INT             reduce using rule 90 (cte_bool -> FALSE .)
    FLOAT           reduce using rule 90 (cte_bool -> FALSE .)
    BOOL            reduce using rule 90 (cte_bool -> FALSE .)
    STRING          reduce using rule 90 (cte_bool -> FALSE .)
    FUNCTION        reduce using rule 90 (cte_bool -> FALSE .)
    MAIN            reduce using rule 90 (cte_bool -> FALSE .)
    ID              reduce using rule 90 (cte_bool -> FALSE .)
    IF              reduce using rule 90 (cte_bool -> FALSE .)
    SWITCH          reduce using rule 90 (cte_bool -> FALSE .)
    WHILE           reduce using rule 90 (cte_bool -> FALSE .)
    FOR             reduce using rule 90 (cte_bool -> FALSE .)
    PRINT           reduce using rule 90 (cte_bool -> FALSE .)
    INPUT           reduce using rule 90 (cte_bool -> FALSE .)
    RCURL           reduce using rule 90 (cte_bool -> FALSE .)
    RETURN          reduce using rule 90 (cte_bool -> FALSE .)
    CASE            reduce using rule 90 (cte_bool -> FALSE .)
    DEFAULT         reduce using rule 90 (cte_bool -> FALSE .)
    AND             reduce using rule 90 (cte_bool -> FALSE .)
    OR              reduce using rule 90 (cte_bool -> FALSE .)
    LESS            reduce using rule 90 (cte_bool -> FALSE .)
    GREATER         reduce using rule 90 (cte_bool -> FALSE .)
    DOUBLE_EQUAL    reduce using rule 90 (cte_bool -> FALSE .)
    DIFF            reduce using rule 90 (cte_bool -> FALSE .)
    COLON           reduce using rule 90 (cte_bool -> FALSE .)


state 50

    (79) varcte -> ID . varcte1
    (84) varcte1 -> . epsilon
    (85) varcte1 -> . LPAREN exp varcte2 RPAREN
    (86) varcte1 -> . LBRACKET exp RBRACKET
    (128) epsilon -> .

    LPAREN          shift and go to state 77
    LBRACKET        shift and go to state 79
    TIMES           reduce using rule 128 (epsilon -> .)
    DIVIDE          reduce using rule 128 (epsilon -> .)
    PLUS            reduce using rule 128 (epsilon -> .)
    MINUS           reduce using rule 128 (epsilon -> .)
    VECTOR          reduce using rule 128 (epsilon -> .)
    INT             reduce using rule 128 (epsilon -> .)
    FLOAT           reduce using rule 128 (epsilon -> .)
    BOOL            reduce using rule 128 (epsilon -> .)
    STRING          reduce using rule 128 (epsilon -> .)
    FUNCTION        reduce using rule 128 (epsilon -> .)
    MAIN            reduce using rule 128 (epsilon -> .)
    ID              reduce using rule 128 (epsilon -> .)
    IF              reduce using rule 128 (epsilon -> .)
    SWITCH          reduce using rule 128 (epsilon -> .)
    WHILE           reduce using rule 128 (epsilon -> .)
    FOR             reduce using rule 128 (epsilon -> .)
    PRINT           reduce using rule 128 (epsilon -> .)
    INPUT           reduce using rule 128 (epsilon -> .)
    RPAREN          reduce using rule 128 (epsilon -> .)
    COMMA           reduce using rule 128 (epsilon -> .)
    RBRACKET        reduce using rule 128 (epsilon -> .)
    RCURL           reduce using rule 128 (epsilon -> .)
    RETURN          reduce using rule 128 (epsilon -> .)
    CASE            reduce using rule 128 (epsilon -> .)
    DEFAULT         reduce using rule 128 (epsilon -> .)
    AND             reduce using rule 128 (epsilon -> .)
    OR              reduce using rule 128 (epsilon -> .)
    LESS            reduce using rule 128 (epsilon -> .)
    GREATER         reduce using rule 128 (epsilon -> .)
    DOUBLE_EQUAL    reduce using rule 128 (epsilon -> .)
    DIFF            reduce using rule 128 (epsilon -> .)
    COLON           reduce using rule 128 (epsilon -> .)

    epsilon                        shift and go to state 78
    varcte1                        shift and go to state 80

state 51

    (83) varcte -> cte_bool .

    TIMES           reduce using rule 83 (varcte -> cte_bool .)
    DIVIDE          reduce using rule 83 (varcte -> cte_bool .)
    PLUS            reduce using rule 83 (varcte -> cte_bool .)
    MINUS           reduce using rule 83 (varcte -> cte_bool .)
    VECTOR          reduce using rule 83 (varcte -> cte_bool .)
    INT             reduce using rule 83 (varcte -> cte_bool .)
    FLOAT           reduce using rule 83 (varcte -> cte_bool .)
    BOOL            reduce using rule 83 (varcte -> cte_bool .)
    STRING          reduce using rule 83 (varcte -> cte_bool .)
    FUNCTION        reduce using rule 83 (varcte -> cte_bool .)
    MAIN            reduce using rule 83 (varcte -> cte_bool .)
    ID              reduce using rule 83 (varcte -> cte_bool .)
    IF              reduce using rule 83 (varcte -> cte_bool .)
    SWITCH          reduce using rule 83 (varcte -> cte_bool .)
    WHILE           reduce using rule 83 (varcte -> cte_bool .)
    FOR             reduce using rule 83 (varcte -> cte_bool .)
    PRINT           reduce using rule 83 (varcte -> cte_bool .)
    INPUT           reduce using rule 83 (varcte -> cte_bool .)
    COMMA           reduce using rule 83 (varcte -> cte_bool .)
    RBRACKET        reduce using rule 83 (varcte -> cte_bool .)
    RPAREN          reduce using rule 83 (varcte -> cte_bool .)
    AND             reduce using rule 83 (varcte -> cte_bool .)
    OR              reduce using rule 83 (varcte -> cte_bool .)
    LESS            reduce using rule 83 (varcte -> cte_bool .)
    GREATER         reduce using rule 83 (varcte -> cte_bool .)
    DOUBLE_EQUAL    reduce using rule 83 (varcte -> cte_bool .)
    DIFF            reduce using rule 83 (varcte -> cte_bool .)
    RCURL           reduce using rule 83 (varcte -> cte_bool .)
    RETURN          reduce using rule 83 (varcte -> cte_bool .)
    CASE            reduce using rule 83 (varcte -> cte_bool .)
    DEFAULT         reduce using rule 83 (varcte -> cte_bool .)
    COLON           reduce using rule 83 (varcte -> cte_bool .)


state 52

    (50) factor1 -> MINUS . varcte
    (79) varcte -> . ID varcte1
    (80) varcte -> . CTE_INT
    (81) varcte -> . CTE_FLOAT
    (82) varcte -> . CTE_STRING
    (83) varcte -> . cte_bool
    (89) cte_bool -> . TRUE
    (90) cte_bool -> . FALSE

    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    cte_bool                       shift and go to state 51
    varcte                         shift and go to state 81

state 53

    (48) factor -> factor1 .

    TIMES           reduce using rule 48 (factor -> factor1 .)
    DIVIDE          reduce using rule 48 (factor -> factor1 .)
    PLUS            reduce using rule 48 (factor -> factor1 .)
    MINUS           reduce using rule 48 (factor -> factor1 .)
    VECTOR          reduce using rule 48 (factor -> factor1 .)
    INT             reduce using rule 48 (factor -> factor1 .)
    FLOAT           reduce using rule 48 (factor -> factor1 .)
    BOOL            reduce using rule 48 (factor -> factor1 .)
    STRING          reduce using rule 48 (factor -> factor1 .)
    FUNCTION        reduce using rule 48 (factor -> factor1 .)
    MAIN            reduce using rule 48 (factor -> factor1 .)
    ID              reduce using rule 48 (factor -> factor1 .)
    IF              reduce using rule 48 (factor -> factor1 .)
    SWITCH          reduce using rule 48 (factor -> factor1 .)
    WHILE           reduce using rule 48 (factor -> factor1 .)
    FOR             reduce using rule 48 (factor -> factor1 .)
    PRINT           reduce using rule 48 (factor -> factor1 .)
    INPUT           reduce using rule 48 (factor -> factor1 .)
    RPAREN          reduce using rule 48 (factor -> factor1 .)
    COMMA           reduce using rule 48 (factor -> factor1 .)
    RBRACKET        reduce using rule 48 (factor -> factor1 .)
    RCURL           reduce using rule 48 (factor -> factor1 .)
    RETURN          reduce using rule 48 (factor -> factor1 .)
    CASE            reduce using rule 48 (factor -> factor1 .)
    DEFAULT         reduce using rule 48 (factor -> factor1 .)
    AND             reduce using rule 48 (factor -> factor1 .)
    OR              reduce using rule 48 (factor -> factor1 .)
    LESS            reduce using rule 48 (factor -> factor1 .)
    GREATER         reduce using rule 48 (factor -> factor1 .)
    DOUBLE_EQUAL    reduce using rule 48 (factor -> factor1 .)
    DIFF            reduce using rule 48 (factor -> factor1 .)


state 54

    (119) funcion4 -> tipo ID LPAREN . funcion3 RPAREN LCURL funcion1 estatuto funcion2 RETURN ID RCURL
    (116) funcion3 -> . parametros
    (117) funcion3 -> . epsilon
    (14) parametros -> . tipo parametros1 ID parametros2
    (15) parametros -> . VECTOR tipo parametros1 ID parametros2
    (128) epsilon -> .
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . BOOL
    (24) tipo -> . STRING

    VECTOR          shift and go to state 86
    RPAREN          reduce using rule 128 (epsilon -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 82
    epsilon                        shift and go to state 83
    funcion3                       shift and go to state 84
    parametros                     shift and go to state 85

state 55

    (118) funcion4 -> VOID ID LPAREN . funcion3 RPAREN LCURL funcion1 estatuto funcion2 RCURL
    (116) funcion3 -> . parametros
    (117) funcion3 -> . epsilon
    (14) parametros -> . tipo parametros1 ID parametros2
    (15) parametros -> . VECTOR tipo parametros1 ID parametros2
    (128) epsilon -> .
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . BOOL
    (24) tipo -> . STRING

    VECTOR          shift and go to state 86
    RPAREN          reduce using rule 128 (epsilon -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 82
    epsilon                        shift and go to state 83
    funcion3                       shift and go to state 87
    parametros                     shift and go to state 85

state 56

    (41) main -> MAIN LCURL main1 . estatuto main2 RCURL
    (52) estatuto -> . asignacion
    (53) estatuto -> . llamada
    (54) estatuto -> . condicion
    (55) estatuto -> . switch
    (56) estatuto -> . while
    (57) estatuto -> . for
    (58) asignacion -> . ID EQUALS asignacion1
    (72) llamada -> . ID LPAREN llamada1 RPAREN
    (73) llamada -> . print
    (74) llamada -> . input
    (96) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (120) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (46) while -> . WHILE LPAREN expresion RPAREN bloque
    (106) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (91) print -> . PRINT LPAREN print1 RPAREN
    (103) input -> . INPUT LPAREN input1 RPAREN

    ID              shift and go to state 99
    IF              shift and go to state 100
    SWITCH          shift and go to state 93
    WHILE           shift and go to state 88
    FOR             shift and go to state 97
    PRINT           shift and go to state 89
    INPUT           shift and go to state 98

    for                            shift and go to state 90
    estatuto                       shift and go to state 91
    switch                         shift and go to state 102
    llamada                        shift and go to state 92
    condicion                      shift and go to state 94
    print                          shift and go to state 95
    input                          shift and go to state 96
    asignacion                     shift and go to state 101
    while                          shift and go to state 103

state 57

    (42) main1 -> var_declaracion . main1
    (42) main1 -> . var_declaracion main1
    (43) main1 -> . epsilon
    (6) var_declaracion -> . tipo var_declaracion1
    (7) var_declaracion -> . VECTOR tipo var_declaracion2
    (128) epsilon -> .
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . BOOL
    (24) tipo -> . STRING

    VECTOR          shift and go to state 8
    ID              reduce using rule 128 (epsilon -> .)
    IF              reduce using rule 128 (epsilon -> .)
    SWITCH          reduce using rule 128 (epsilon -> .)
    WHILE           reduce using rule 128 (epsilon -> .)
    FOR             reduce using rule 128 (epsilon -> .)
    PRINT           reduce using rule 128 (epsilon -> .)
    INPUT           reduce using rule 128 (epsilon -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 5
    main1                          shift and go to state 104
    var_declaracion                shift and go to state 57
    epsilon                        shift and go to state 58

state 58

    (43) main1 -> epsilon .

    ID              reduce using rule 43 (main1 -> epsilon .)
    IF              reduce using rule 43 (main1 -> epsilon .)
    SWITCH          reduce using rule 43 (main1 -> epsilon .)
    WHILE           reduce using rule 43 (main1 -> epsilon .)
    FOR             reduce using rule 43 (main1 -> epsilon .)
    PRINT           reduce using rule 43 (main1 -> epsilon .)
    INPUT           reduce using rule 43 (main1 -> epsilon .)


state 59

    (36) inicializacion_vector -> ID declareVar EQUALS . LBRACKET inicializacion_vector1 RBRACKET

    LBRACKET        shift and go to state 105


state 60

    (47) factor -> LPAREN expresion . RPAREN

    RPAREN          shift and go to state 106


state 61

    (61) expresion -> expresion1 .

    RPAREN          reduce using rule 61 (expresion -> expresion1 .)


state 62

    (63) expresion1 -> expresion2 . exp
    (28) exp -> . termino exp1
    (32) termino -> . factor termino1
    (47) factor -> . LPAREN expresion RPAREN
    (48) factor -> . factor1
    (49) factor1 -> . PLUS varcte
    (50) factor1 -> . MINUS varcte
    (51) factor1 -> . varcte
    (79) varcte -> . ID varcte1
    (80) varcte -> . CTE_INT
    (81) varcte -> . CTE_FLOAT
    (82) varcte -> . CTE_STRING
    (83) varcte -> . cte_bool
    (89) cte_bool -> . TRUE
    (90) cte_bool -> . FALSE

    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    factor1                        shift and go to state 53
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 46
    exp                            shift and go to state 107
    factor                         shift and go to state 48
    varcte                         shift and go to state 39

state 63

    (64) expresion2 -> LESS .

    LPAREN          reduce using rule 64 (expresion2 -> LESS .)
    PLUS            reduce using rule 64 (expresion2 -> LESS .)
    MINUS           reduce using rule 64 (expresion2 -> LESS .)
    ID              reduce using rule 64 (expresion2 -> LESS .)
    CTE_INT         reduce using rule 64 (expresion2 -> LESS .)
    CTE_FLOAT       reduce using rule 64 (expresion2 -> LESS .)
    CTE_STRING      reduce using rule 64 (expresion2 -> LESS .)
    TRUE            reduce using rule 64 (expresion2 -> LESS .)
    FALSE           reduce using rule 64 (expresion2 -> LESS .)


state 64

    (62) expresion1 -> epsilon .

    RPAREN          reduce using rule 62 (expresion1 -> epsilon .)


state 65

    (66) expresion2 -> DOUBLE_EQUAL .

    LPAREN          reduce using rule 66 (expresion2 -> DOUBLE_EQUAL .)
    PLUS            reduce using rule 66 (expresion2 -> DOUBLE_EQUAL .)
    MINUS           reduce using rule 66 (expresion2 -> DOUBLE_EQUAL .)
    ID              reduce using rule 66 (expresion2 -> DOUBLE_EQUAL .)
    CTE_INT         reduce using rule 66 (expresion2 -> DOUBLE_EQUAL .)
    CTE_FLOAT       reduce using rule 66 (expresion2 -> DOUBLE_EQUAL .)
    CTE_STRING      reduce using rule 66 (expresion2 -> DOUBLE_EQUAL .)
    TRUE            reduce using rule 66 (expresion2 -> DOUBLE_EQUAL .)
    FALSE           reduce using rule 66 (expresion2 -> DOUBLE_EQUAL .)


state 66

    (67) expresion2 -> DIFF .

    LPAREN          reduce using rule 67 (expresion2 -> DIFF .)
    PLUS            reduce using rule 67 (expresion2 -> DIFF .)
    MINUS           reduce using rule 67 (expresion2 -> DIFF .)
    ID              reduce using rule 67 (expresion2 -> DIFF .)
    CTE_INT         reduce using rule 67 (expresion2 -> DIFF .)
    CTE_FLOAT       reduce using rule 67 (expresion2 -> DIFF .)
    CTE_STRING      reduce using rule 67 (expresion2 -> DIFF .)
    TRUE            reduce using rule 67 (expresion2 -> DIFF .)
    FALSE           reduce using rule 67 (expresion2 -> DIFF .)


state 67

    (65) expresion2 -> GREATER .

    LPAREN          reduce using rule 65 (expresion2 -> GREATER .)
    PLUS            reduce using rule 65 (expresion2 -> GREATER .)
    MINUS           reduce using rule 65 (expresion2 -> GREATER .)
    ID              reduce using rule 65 (expresion2 -> GREATER .)
    CTE_INT         reduce using rule 65 (expresion2 -> GREATER .)
    CTE_FLOAT       reduce using rule 65 (expresion2 -> GREATER .)
    CTE_STRING      reduce using rule 65 (expresion2 -> GREATER .)
    TRUE            reduce using rule 65 (expresion2 -> GREATER .)
    FALSE           reduce using rule 65 (expresion2 -> GREATER .)


state 68

    (49) factor1 -> PLUS varcte .

    TIMES           reduce using rule 49 (factor1 -> PLUS varcte .)
    DIVIDE          reduce using rule 49 (factor1 -> PLUS varcte .)
    PLUS            reduce using rule 49 (factor1 -> PLUS varcte .)
    MINUS           reduce using rule 49 (factor1 -> PLUS varcte .)
    VECTOR          reduce using rule 49 (factor1 -> PLUS varcte .)
    INT             reduce using rule 49 (factor1 -> PLUS varcte .)
    FLOAT           reduce using rule 49 (factor1 -> PLUS varcte .)
    BOOL            reduce using rule 49 (factor1 -> PLUS varcte .)
    STRING          reduce using rule 49 (factor1 -> PLUS varcte .)
    FUNCTION        reduce using rule 49 (factor1 -> PLUS varcte .)
    MAIN            reduce using rule 49 (factor1 -> PLUS varcte .)
    ID              reduce using rule 49 (factor1 -> PLUS varcte .)
    IF              reduce using rule 49 (factor1 -> PLUS varcte .)
    SWITCH          reduce using rule 49 (factor1 -> PLUS varcte .)
    WHILE           reduce using rule 49 (factor1 -> PLUS varcte .)
    FOR             reduce using rule 49 (factor1 -> PLUS varcte .)
    PRINT           reduce using rule 49 (factor1 -> PLUS varcte .)
    INPUT           reduce using rule 49 (factor1 -> PLUS varcte .)
    RPAREN          reduce using rule 49 (factor1 -> PLUS varcte .)
    COMMA           reduce using rule 49 (factor1 -> PLUS varcte .)
    RBRACKET        reduce using rule 49 (factor1 -> PLUS varcte .)
    RCURL           reduce using rule 49 (factor1 -> PLUS varcte .)
    RETURN          reduce using rule 49 (factor1 -> PLUS varcte .)
    CASE            reduce using rule 49 (factor1 -> PLUS varcte .)
    DEFAULT         reduce using rule 49 (factor1 -> PLUS varcte .)
    AND             reduce using rule 49 (factor1 -> PLUS varcte .)
    OR              reduce using rule 49 (factor1 -> PLUS varcte .)
    LESS            reduce using rule 49 (factor1 -> PLUS varcte .)
    GREATER         reduce using rule 49 (factor1 -> PLUS varcte .)
    DOUBLE_EQUAL    reduce using rule 49 (factor1 -> PLUS varcte .)
    DIFF            reduce using rule 49 (factor1 -> PLUS varcte .)


state 69

    (31) exp1 -> epsilon .

    VECTOR          reduce using rule 31 (exp1 -> epsilon .)
    INT             reduce using rule 31 (exp1 -> epsilon .)
    FLOAT           reduce using rule 31 (exp1 -> epsilon .)
    BOOL            reduce using rule 31 (exp1 -> epsilon .)
    STRING          reduce using rule 31 (exp1 -> epsilon .)
    FUNCTION        reduce using rule 31 (exp1 -> epsilon .)
    MAIN            reduce using rule 31 (exp1 -> epsilon .)
    ID              reduce using rule 31 (exp1 -> epsilon .)
    IF              reduce using rule 31 (exp1 -> epsilon .)
    SWITCH          reduce using rule 31 (exp1 -> epsilon .)
    WHILE           reduce using rule 31 (exp1 -> epsilon .)
    FOR             reduce using rule 31 (exp1 -> epsilon .)
    PRINT           reduce using rule 31 (exp1 -> epsilon .)
    INPUT           reduce using rule 31 (exp1 -> epsilon .)
    RPAREN          reduce using rule 31 (exp1 -> epsilon .)
    COMMA           reduce using rule 31 (exp1 -> epsilon .)
    RBRACKET        reduce using rule 31 (exp1 -> epsilon .)
    RCURL           reduce using rule 31 (exp1 -> epsilon .)
    RETURN          reduce using rule 31 (exp1 -> epsilon .)
    CASE            reduce using rule 31 (exp1 -> epsilon .)
    DEFAULT         reduce using rule 31 (exp1 -> epsilon .)
    AND             reduce using rule 31 (exp1 -> epsilon .)
    OR              reduce using rule 31 (exp1 -> epsilon .)
    LESS            reduce using rule 31 (exp1 -> epsilon .)
    GREATER         reduce using rule 31 (exp1 -> epsilon .)
    DOUBLE_EQUAL    reduce using rule 31 (exp1 -> epsilon .)
    DIFF            reduce using rule 31 (exp1 -> epsilon .)


state 70

    (28) exp -> termino exp1 .

    RBRACKET        reduce using rule 28 (exp -> termino exp1 .)
    COMMA           reduce using rule 28 (exp -> termino exp1 .)
    RPAREN          reduce using rule 28 (exp -> termino exp1 .)
    VECTOR          reduce using rule 28 (exp -> termino exp1 .)
    INT             reduce using rule 28 (exp -> termino exp1 .)
    FLOAT           reduce using rule 28 (exp -> termino exp1 .)
    BOOL            reduce using rule 28 (exp -> termino exp1 .)
    STRING          reduce using rule 28 (exp -> termino exp1 .)
    FUNCTION        reduce using rule 28 (exp -> termino exp1 .)
    MAIN            reduce using rule 28 (exp -> termino exp1 .)
    ID              reduce using rule 28 (exp -> termino exp1 .)
    IF              reduce using rule 28 (exp -> termino exp1 .)
    SWITCH          reduce using rule 28 (exp -> termino exp1 .)
    WHILE           reduce using rule 28 (exp -> termino exp1 .)
    FOR             reduce using rule 28 (exp -> termino exp1 .)
    PRINT           reduce using rule 28 (exp -> termino exp1 .)
    INPUT           reduce using rule 28 (exp -> termino exp1 .)
    LESS            reduce using rule 28 (exp -> termino exp1 .)
    GREATER         reduce using rule 28 (exp -> termino exp1 .)
    DOUBLE_EQUAL    reduce using rule 28 (exp -> termino exp1 .)
    DIFF            reduce using rule 28 (exp -> termino exp1 .)
    RCURL           reduce using rule 28 (exp -> termino exp1 .)
    RETURN          reduce using rule 28 (exp -> termino exp1 .)
    CASE            reduce using rule 28 (exp -> termino exp1 .)
    DEFAULT         reduce using rule 28 (exp -> termino exp1 .)
    AND             reduce using rule 28 (exp -> termino exp1 .)
    OR              reduce using rule 28 (exp -> termino exp1 .)


state 71

    (29) exp1 -> PLUS . exp
    (28) exp -> . termino exp1
    (32) termino -> . factor termino1
    (47) factor -> . LPAREN expresion RPAREN
    (48) factor -> . factor1
    (49) factor1 -> . PLUS varcte
    (50) factor1 -> . MINUS varcte
    (51) factor1 -> . varcte
    (79) varcte -> . ID varcte1
    (80) varcte -> . CTE_INT
    (81) varcte -> . CTE_FLOAT
    (82) varcte -> . CTE_STRING
    (83) varcte -> . cte_bool
    (89) cte_bool -> . TRUE
    (90) cte_bool -> . FALSE

    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    factor1                        shift and go to state 53
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 46
    exp                            shift and go to state 108
    factor                         shift and go to state 48
    varcte                         shift and go to state 39

state 72

    (30) exp1 -> MINUS . exp
    (28) exp -> . termino exp1
    (32) termino -> . factor termino1
    (47) factor -> . LPAREN expresion RPAREN
    (48) factor -> . factor1
    (49) factor1 -> . PLUS varcte
    (50) factor1 -> . MINUS varcte
    (51) factor1 -> . varcte
    (79) varcte -> . ID varcte1
    (80) varcte -> . CTE_INT
    (81) varcte -> . CTE_FLOAT
    (82) varcte -> . CTE_STRING
    (83) varcte -> . cte_bool
    (89) cte_bool -> . TRUE
    (90) cte_bool -> . FALSE

    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    factor1                        shift and go to state 53
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 46
    exp                            shift and go to state 109
    factor                         shift and go to state 48
    varcte                         shift and go to state 39

state 73

    (34) termino1 -> DIVIDE . termino
    (32) termino -> . factor termino1
    (47) factor -> . LPAREN expresion RPAREN
    (48) factor -> . factor1
    (49) factor1 -> . PLUS varcte
    (50) factor1 -> . MINUS varcte
    (51) factor1 -> . varcte
    (79) varcte -> . ID varcte1
    (80) varcte -> . CTE_INT
    (81) varcte -> . CTE_FLOAT
    (82) varcte -> . CTE_STRING
    (83) varcte -> . cte_bool
    (89) cte_bool -> . TRUE
    (90) cte_bool -> . FALSE

    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    varcte                         shift and go to state 39
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 110
    factor                         shift and go to state 48
    factor1                        shift and go to state 53

state 74

    (35) termino1 -> epsilon .

    PLUS            reduce using rule 35 (termino1 -> epsilon .)
    MINUS           reduce using rule 35 (termino1 -> epsilon .)
    VECTOR          reduce using rule 35 (termino1 -> epsilon .)
    INT             reduce using rule 35 (termino1 -> epsilon .)
    FLOAT           reduce using rule 35 (termino1 -> epsilon .)
    BOOL            reduce using rule 35 (termino1 -> epsilon .)
    STRING          reduce using rule 35 (termino1 -> epsilon .)
    FUNCTION        reduce using rule 35 (termino1 -> epsilon .)
    MAIN            reduce using rule 35 (termino1 -> epsilon .)
    ID              reduce using rule 35 (termino1 -> epsilon .)
    IF              reduce using rule 35 (termino1 -> epsilon .)
    SWITCH          reduce using rule 35 (termino1 -> epsilon .)
    WHILE           reduce using rule 35 (termino1 -> epsilon .)
    FOR             reduce using rule 35 (termino1 -> epsilon .)
    PRINT           reduce using rule 35 (termino1 -> epsilon .)
    INPUT           reduce using rule 35 (termino1 -> epsilon .)
    RPAREN          reduce using rule 35 (termino1 -> epsilon .)
    COMMA           reduce using rule 35 (termino1 -> epsilon .)
    RBRACKET        reduce using rule 35 (termino1 -> epsilon .)
    RCURL           reduce using rule 35 (termino1 -> epsilon .)
    RETURN          reduce using rule 35 (termino1 -> epsilon .)
    CASE            reduce using rule 35 (termino1 -> epsilon .)
    DEFAULT         reduce using rule 35 (termino1 -> epsilon .)
    AND             reduce using rule 35 (termino1 -> epsilon .)
    OR              reduce using rule 35 (termino1 -> epsilon .)
    LESS            reduce using rule 35 (termino1 -> epsilon .)
    GREATER         reduce using rule 35 (termino1 -> epsilon .)
    DOUBLE_EQUAL    reduce using rule 35 (termino1 -> epsilon .)
    DIFF            reduce using rule 35 (termino1 -> epsilon .)


state 75

    (32) termino -> factor termino1 .

    PLUS            reduce using rule 32 (termino -> factor termino1 .)
    MINUS           reduce using rule 32 (termino -> factor termino1 .)
    LESS            reduce using rule 32 (termino -> factor termino1 .)
    GREATER         reduce using rule 32 (termino -> factor termino1 .)
    DOUBLE_EQUAL    reduce using rule 32 (termino -> factor termino1 .)
    DIFF            reduce using rule 32 (termino -> factor termino1 .)
    RPAREN          reduce using rule 32 (termino -> factor termino1 .)
    VECTOR          reduce using rule 32 (termino -> factor termino1 .)
    INT             reduce using rule 32 (termino -> factor termino1 .)
    FLOAT           reduce using rule 32 (termino -> factor termino1 .)
    BOOL            reduce using rule 32 (termino -> factor termino1 .)
    STRING          reduce using rule 32 (termino -> factor termino1 .)
    FUNCTION        reduce using rule 32 (termino -> factor termino1 .)
    MAIN            reduce using rule 32 (termino -> factor termino1 .)
    ID              reduce using rule 32 (termino -> factor termino1 .)
    IF              reduce using rule 32 (termino -> factor termino1 .)
    SWITCH          reduce using rule 32 (termino -> factor termino1 .)
    WHILE           reduce using rule 32 (termino -> factor termino1 .)
    FOR             reduce using rule 32 (termino -> factor termino1 .)
    PRINT           reduce using rule 32 (termino -> factor termino1 .)
    INPUT           reduce using rule 32 (termino -> factor termino1 .)
    RBRACKET        reduce using rule 32 (termino -> factor termino1 .)
    COMMA           reduce using rule 32 (termino -> factor termino1 .)
    RCURL           reduce using rule 32 (termino -> factor termino1 .)
    RETURN          reduce using rule 32 (termino -> factor termino1 .)
    CASE            reduce using rule 32 (termino -> factor termino1 .)
    DEFAULT         reduce using rule 32 (termino -> factor termino1 .)
    AND             reduce using rule 32 (termino -> factor termino1 .)
    OR              reduce using rule 32 (termino -> factor termino1 .)


state 76

    (33) termino1 -> TIMES . termino
    (32) termino -> . factor termino1
    (47) factor -> . LPAREN expresion RPAREN
    (48) factor -> . factor1
    (49) factor1 -> . PLUS varcte
    (50) factor1 -> . MINUS varcte
    (51) factor1 -> . varcte
    (79) varcte -> . ID varcte1
    (80) varcte -> . CTE_INT
    (81) varcte -> . CTE_FLOAT
    (82) varcte -> . CTE_STRING
    (83) varcte -> . cte_bool
    (89) cte_bool -> . TRUE
    (90) cte_bool -> . FALSE

    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    varcte                         shift and go to state 39
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 111
    factor                         shift and go to state 48
    factor1                        shift and go to state 53

state 77

    (85) varcte1 -> LPAREN . exp varcte2 RPAREN
    (28) exp -> . termino exp1
    (32) termino -> . factor termino1
    (47) factor -> . LPAREN expresion RPAREN
    (48) factor -> . factor1
    (49) factor1 -> . PLUS varcte
    (50) factor1 -> . MINUS varcte
    (51) factor1 -> . varcte
    (79) varcte -> . ID varcte1
    (80) varcte -> . CTE_INT
    (81) varcte -> . CTE_FLOAT
    (82) varcte -> . CTE_STRING
    (83) varcte -> . cte_bool
    (89) cte_bool -> . TRUE
    (90) cte_bool -> . FALSE

    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    factor1                        shift and go to state 53
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 46
    exp                            shift and go to state 112
    factor                         shift and go to state 48
    varcte                         shift and go to state 39

state 78

    (84) varcte1 -> epsilon .

    TIMES           reduce using rule 84 (varcte1 -> epsilon .)
    DIVIDE          reduce using rule 84 (varcte1 -> epsilon .)
    PLUS            reduce using rule 84 (varcte1 -> epsilon .)
    MINUS           reduce using rule 84 (varcte1 -> epsilon .)
    ID              reduce using rule 84 (varcte1 -> epsilon .)
    IF              reduce using rule 84 (varcte1 -> epsilon .)
    SWITCH          reduce using rule 84 (varcte1 -> epsilon .)
    WHILE           reduce using rule 84 (varcte1 -> epsilon .)
    FOR             reduce using rule 84 (varcte1 -> epsilon .)
    PRINT           reduce using rule 84 (varcte1 -> epsilon .)
    INPUT           reduce using rule 84 (varcte1 -> epsilon .)
    RCURL           reduce using rule 84 (varcte1 -> epsilon .)
    RETURN          reduce using rule 84 (varcte1 -> epsilon .)
    CASE            reduce using rule 84 (varcte1 -> epsilon .)
    DEFAULT         reduce using rule 84 (varcte1 -> epsilon .)
    VECTOR          reduce using rule 84 (varcte1 -> epsilon .)
    INT             reduce using rule 84 (varcte1 -> epsilon .)
    FLOAT           reduce using rule 84 (varcte1 -> epsilon .)
    BOOL            reduce using rule 84 (varcte1 -> epsilon .)
    STRING          reduce using rule 84 (varcte1 -> epsilon .)
    FUNCTION        reduce using rule 84 (varcte1 -> epsilon .)
    MAIN            reduce using rule 84 (varcte1 -> epsilon .)
    RPAREN          reduce using rule 84 (varcte1 -> epsilon .)
    COMMA           reduce using rule 84 (varcte1 -> epsilon .)
    RBRACKET        reduce using rule 84 (varcte1 -> epsilon .)
    AND             reduce using rule 84 (varcte1 -> epsilon .)
    OR              reduce using rule 84 (varcte1 -> epsilon .)
    LESS            reduce using rule 84 (varcte1 -> epsilon .)
    GREATER         reduce using rule 84 (varcte1 -> epsilon .)
    DOUBLE_EQUAL    reduce using rule 84 (varcte1 -> epsilon .)
    DIFF            reduce using rule 84 (varcte1 -> epsilon .)
    COLON           reduce using rule 84 (varcte1 -> epsilon .)


state 79

    (86) varcte1 -> LBRACKET . exp RBRACKET
    (28) exp -> . termino exp1
    (32) termino -> . factor termino1
    (47) factor -> . LPAREN expresion RPAREN
    (48) factor -> . factor1
    (49) factor1 -> . PLUS varcte
    (50) factor1 -> . MINUS varcte
    (51) factor1 -> . varcte
    (79) varcte -> . ID varcte1
    (80) varcte -> . CTE_INT
    (81) varcte -> . CTE_FLOAT
    (82) varcte -> . CTE_STRING
    (83) varcte -> . cte_bool
    (89) cte_bool -> . TRUE
    (90) cte_bool -> . FALSE

    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    factor1                        shift and go to state 53
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 46
    exp                            shift and go to state 113
    factor                         shift and go to state 48
    varcte                         shift and go to state 39

state 80

    (79) varcte -> ID varcte1 .

    TIMES           reduce using rule 79 (varcte -> ID varcte1 .)
    DIVIDE          reduce using rule 79 (varcte -> ID varcte1 .)
    PLUS            reduce using rule 79 (varcte -> ID varcte1 .)
    MINUS           reduce using rule 79 (varcte -> ID varcte1 .)
    VECTOR          reduce using rule 79 (varcte -> ID varcte1 .)
    INT             reduce using rule 79 (varcte -> ID varcte1 .)
    FLOAT           reduce using rule 79 (varcte -> ID varcte1 .)
    BOOL            reduce using rule 79 (varcte -> ID varcte1 .)
    STRING          reduce using rule 79 (varcte -> ID varcte1 .)
    FUNCTION        reduce using rule 79 (varcte -> ID varcte1 .)
    MAIN            reduce using rule 79 (varcte -> ID varcte1 .)
    ID              reduce using rule 79 (varcte -> ID varcte1 .)
    IF              reduce using rule 79 (varcte -> ID varcte1 .)
    SWITCH          reduce using rule 79 (varcte -> ID varcte1 .)
    WHILE           reduce using rule 79 (varcte -> ID varcte1 .)
    FOR             reduce using rule 79 (varcte -> ID varcte1 .)
    PRINT           reduce using rule 79 (varcte -> ID varcte1 .)
    INPUT           reduce using rule 79 (varcte -> ID varcte1 .)
    COMMA           reduce using rule 79 (varcte -> ID varcte1 .)
    RBRACKET        reduce using rule 79 (varcte -> ID varcte1 .)
    RPAREN          reduce using rule 79 (varcte -> ID varcte1 .)
    AND             reduce using rule 79 (varcte -> ID varcte1 .)
    OR              reduce using rule 79 (varcte -> ID varcte1 .)
    LESS            reduce using rule 79 (varcte -> ID varcte1 .)
    GREATER         reduce using rule 79 (varcte -> ID varcte1 .)
    DOUBLE_EQUAL    reduce using rule 79 (varcte -> ID varcte1 .)
    DIFF            reduce using rule 79 (varcte -> ID varcte1 .)
    RCURL           reduce using rule 79 (varcte -> ID varcte1 .)
    RETURN          reduce using rule 79 (varcte -> ID varcte1 .)
    CASE            reduce using rule 79 (varcte -> ID varcte1 .)
    DEFAULT         reduce using rule 79 (varcte -> ID varcte1 .)
    COLON           reduce using rule 79 (varcte -> ID varcte1 .)


state 81

    (50) factor1 -> MINUS varcte .

    TIMES           reduce using rule 50 (factor1 -> MINUS varcte .)
    DIVIDE          reduce using rule 50 (factor1 -> MINUS varcte .)
    PLUS            reduce using rule 50 (factor1 -> MINUS varcte .)
    MINUS           reduce using rule 50 (factor1 -> MINUS varcte .)
    VECTOR          reduce using rule 50 (factor1 -> MINUS varcte .)
    INT             reduce using rule 50 (factor1 -> MINUS varcte .)
    FLOAT           reduce using rule 50 (factor1 -> MINUS varcte .)
    BOOL            reduce using rule 50 (factor1 -> MINUS varcte .)
    STRING          reduce using rule 50 (factor1 -> MINUS varcte .)
    FUNCTION        reduce using rule 50 (factor1 -> MINUS varcte .)
    MAIN            reduce using rule 50 (factor1 -> MINUS varcte .)
    ID              reduce using rule 50 (factor1 -> MINUS varcte .)
    IF              reduce using rule 50 (factor1 -> MINUS varcte .)
    SWITCH          reduce using rule 50 (factor1 -> MINUS varcte .)
    WHILE           reduce using rule 50 (factor1 -> MINUS varcte .)
    FOR             reduce using rule 50 (factor1 -> MINUS varcte .)
    PRINT           reduce using rule 50 (factor1 -> MINUS varcte .)
    INPUT           reduce using rule 50 (factor1 -> MINUS varcte .)
    RPAREN          reduce using rule 50 (factor1 -> MINUS varcte .)
    COMMA           reduce using rule 50 (factor1 -> MINUS varcte .)
    RBRACKET        reduce using rule 50 (factor1 -> MINUS varcte .)
    RCURL           reduce using rule 50 (factor1 -> MINUS varcte .)
    RETURN          reduce using rule 50 (factor1 -> MINUS varcte .)
    CASE            reduce using rule 50 (factor1 -> MINUS varcte .)
    DEFAULT         reduce using rule 50 (factor1 -> MINUS varcte .)
    AND             reduce using rule 50 (factor1 -> MINUS varcte .)
    OR              reduce using rule 50 (factor1 -> MINUS varcte .)
    LESS            reduce using rule 50 (factor1 -> MINUS varcte .)
    GREATER         reduce using rule 50 (factor1 -> MINUS varcte .)
    DOUBLE_EQUAL    reduce using rule 50 (factor1 -> MINUS varcte .)
    DIFF            reduce using rule 50 (factor1 -> MINUS varcte .)


state 82

    (14) parametros -> tipo . parametros1 ID parametros2
    (16) parametros1 -> . AMPERSON
    (17) parametros1 -> . epsilon
    (128) epsilon -> .

    AMPERSON        shift and go to state 116
    ID              reduce using rule 128 (epsilon -> .)

    parametros1                    shift and go to state 115
    epsilon                        shift and go to state 114

state 83

    (117) funcion3 -> epsilon .

    RPAREN          reduce using rule 117 (funcion3 -> epsilon .)


state 84

    (119) funcion4 -> tipo ID LPAREN funcion3 . RPAREN LCURL funcion1 estatuto funcion2 RETURN ID RCURL

    RPAREN          shift and go to state 117


state 85

    (116) funcion3 -> parametros .

    RPAREN          reduce using rule 116 (funcion3 -> parametros .)


state 86

    (15) parametros -> VECTOR . tipo parametros1 ID parametros2
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . BOOL
    (24) tipo -> . STRING

    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 118

state 87

    (118) funcion4 -> VOID ID LPAREN funcion3 . RPAREN LCURL funcion1 estatuto funcion2 RCURL

    RPAREN          shift and go to state 119


state 88

    (46) while -> WHILE . LPAREN expresion RPAREN bloque

    LPAREN          shift and go to state 120


state 89

    (91) print -> PRINT . LPAREN print1 RPAREN

    LPAREN          shift and go to state 121


state 90

    (57) estatuto -> for .

    ID              reduce using rule 57 (estatuto -> for .)
    IF              reduce using rule 57 (estatuto -> for .)
    SWITCH          reduce using rule 57 (estatuto -> for .)
    WHILE           reduce using rule 57 (estatuto -> for .)
    FOR             reduce using rule 57 (estatuto -> for .)
    PRINT           reduce using rule 57 (estatuto -> for .)
    INPUT           reduce using rule 57 (estatuto -> for .)
    RCURL           reduce using rule 57 (estatuto -> for .)
    CASE            reduce using rule 57 (estatuto -> for .)
    DEFAULT         reduce using rule 57 (estatuto -> for .)
    RETURN          reduce using rule 57 (estatuto -> for .)


state 91

    (41) main -> MAIN LCURL main1 estatuto . main2 RCURL
    (44) main2 -> . estatuto main2
    (45) main2 -> . epsilon
    (52) estatuto -> . asignacion
    (53) estatuto -> . llamada
    (54) estatuto -> . condicion
    (55) estatuto -> . switch
    (56) estatuto -> . while
    (57) estatuto -> . for
    (128) epsilon -> .
    (58) asignacion -> . ID EQUALS asignacion1
    (72) llamada -> . ID LPAREN llamada1 RPAREN
    (73) llamada -> . print
    (74) llamada -> . input
    (96) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (120) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (46) while -> . WHILE LPAREN expresion RPAREN bloque
    (106) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (91) print -> . PRINT LPAREN print1 RPAREN
    (103) input -> . INPUT LPAREN input1 RPAREN

    RCURL           reduce using rule 128 (epsilon -> .)
    ID              shift and go to state 99
    IF              shift and go to state 100
    SWITCH          shift and go to state 93
    WHILE           shift and go to state 88
    FOR             shift and go to state 97
    PRINT           shift and go to state 89
    INPUT           shift and go to state 98

    for                            shift and go to state 90
    estatuto                       shift and go to state 122
    switch                         shift and go to state 102
    llamada                        shift and go to state 92
    condicion                      shift and go to state 94
    epsilon                        shift and go to state 123
    print                          shift and go to state 95
    input                          shift and go to state 96
    main2                          shift and go to state 124
    asignacion                     shift and go to state 101
    while                          shift and go to state 103

state 92

    (53) estatuto -> llamada .

    ID              reduce using rule 53 (estatuto -> llamada .)
    IF              reduce using rule 53 (estatuto -> llamada .)
    SWITCH          reduce using rule 53 (estatuto -> llamada .)
    WHILE           reduce using rule 53 (estatuto -> llamada .)
    FOR             reduce using rule 53 (estatuto -> llamada .)
    PRINT           reduce using rule 53 (estatuto -> llamada .)
    INPUT           reduce using rule 53 (estatuto -> llamada .)
    RCURL           reduce using rule 53 (estatuto -> llamada .)
    CASE            reduce using rule 53 (estatuto -> llamada .)
    DEFAULT         reduce using rule 53 (estatuto -> llamada .)
    RETURN          reduce using rule 53 (estatuto -> llamada .)


state 93

    (120) switch -> SWITCH . ID switch1 LCURL switch2 switch3 RCURL

    ID              shift and go to state 125


state 94

    (54) estatuto -> condicion .

    ID              reduce using rule 54 (estatuto -> condicion .)
    IF              reduce using rule 54 (estatuto -> condicion .)
    SWITCH          reduce using rule 54 (estatuto -> condicion .)
    WHILE           reduce using rule 54 (estatuto -> condicion .)
    FOR             reduce using rule 54 (estatuto -> condicion .)
    PRINT           reduce using rule 54 (estatuto -> condicion .)
    INPUT           reduce using rule 54 (estatuto -> condicion .)
    RCURL           reduce using rule 54 (estatuto -> condicion .)
    CASE            reduce using rule 54 (estatuto -> condicion .)
    DEFAULT         reduce using rule 54 (estatuto -> condicion .)
    RETURN          reduce using rule 54 (estatuto -> condicion .)


state 95

    (73) llamada -> print .

    ID              reduce using rule 73 (llamada -> print .)
    IF              reduce using rule 73 (llamada -> print .)
    SWITCH          reduce using rule 73 (llamada -> print .)
    WHILE           reduce using rule 73 (llamada -> print .)
    FOR             reduce using rule 73 (llamada -> print .)
    PRINT           reduce using rule 73 (llamada -> print .)
    INPUT           reduce using rule 73 (llamada -> print .)
    RCURL           reduce using rule 73 (llamada -> print .)
    RETURN          reduce using rule 73 (llamada -> print .)
    CASE            reduce using rule 73 (llamada -> print .)
    DEFAULT         reduce using rule 73 (llamada -> print .)


state 96

    (74) llamada -> input .

    ID              reduce using rule 74 (llamada -> input .)
    IF              reduce using rule 74 (llamada -> input .)
    SWITCH          reduce using rule 74 (llamada -> input .)
    WHILE           reduce using rule 74 (llamada -> input .)
    FOR             reduce using rule 74 (llamada -> input .)
    PRINT           reduce using rule 74 (llamada -> input .)
    INPUT           reduce using rule 74 (llamada -> input .)
    RCURL           reduce using rule 74 (llamada -> input .)
    RETURN          reduce using rule 74 (llamada -> input .)
    CASE            reduce using rule 74 (llamada -> input .)
    DEFAULT         reduce using rule 74 (llamada -> input .)


state 97

    (106) for -> FOR . CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque

    CTE_INT         shift and go to state 126


state 98

    (103) input -> INPUT . LPAREN input1 RPAREN

    LPAREN          shift and go to state 127


state 99

    (58) asignacion -> ID . EQUALS asignacion1
    (72) llamada -> ID . LPAREN llamada1 RPAREN

    EQUALS          shift and go to state 128
    LPAREN          shift and go to state 129


state 100

    (96) condicion -> IF . LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3

    LPAREN          shift and go to state 130


state 101

    (52) estatuto -> asignacion .

    ID              reduce using rule 52 (estatuto -> asignacion .)
    IF              reduce using rule 52 (estatuto -> asignacion .)
    SWITCH          reduce using rule 52 (estatuto -> asignacion .)
    WHILE           reduce using rule 52 (estatuto -> asignacion .)
    FOR             reduce using rule 52 (estatuto -> asignacion .)
    PRINT           reduce using rule 52 (estatuto -> asignacion .)
    INPUT           reduce using rule 52 (estatuto -> asignacion .)
    RCURL           reduce using rule 52 (estatuto -> asignacion .)
    CASE            reduce using rule 52 (estatuto -> asignacion .)
    DEFAULT         reduce using rule 52 (estatuto -> asignacion .)
    RETURN          reduce using rule 52 (estatuto -> asignacion .)


state 102

    (55) estatuto -> switch .

    ID              reduce using rule 55 (estatuto -> switch .)
    IF              reduce using rule 55 (estatuto -> switch .)
    SWITCH          reduce using rule 55 (estatuto -> switch .)
    WHILE           reduce using rule 55 (estatuto -> switch .)
    FOR             reduce using rule 55 (estatuto -> switch .)
    PRINT           reduce using rule 55 (estatuto -> switch .)
    INPUT           reduce using rule 55 (estatuto -> switch .)
    RCURL           reduce using rule 55 (estatuto -> switch .)
    CASE            reduce using rule 55 (estatuto -> switch .)
    DEFAULT         reduce using rule 55 (estatuto -> switch .)
    RETURN          reduce using rule 55 (estatuto -> switch .)


state 103

    (56) estatuto -> while .

    ID              reduce using rule 56 (estatuto -> while .)
    IF              reduce using rule 56 (estatuto -> while .)
    SWITCH          reduce using rule 56 (estatuto -> while .)
    WHILE           reduce using rule 56 (estatuto -> while .)
    FOR             reduce using rule 56 (estatuto -> while .)
    PRINT           reduce using rule 56 (estatuto -> while .)
    INPUT           reduce using rule 56 (estatuto -> while .)
    RCURL           reduce using rule 56 (estatuto -> while .)
    CASE            reduce using rule 56 (estatuto -> while .)
    DEFAULT         reduce using rule 56 (estatuto -> while .)
    RETURN          reduce using rule 56 (estatuto -> while .)


state 104

    (42) main1 -> var_declaracion main1 .

    ID              reduce using rule 42 (main1 -> var_declaracion main1 .)
    IF              reduce using rule 42 (main1 -> var_declaracion main1 .)
    SWITCH          reduce using rule 42 (main1 -> var_declaracion main1 .)
    WHILE           reduce using rule 42 (main1 -> var_declaracion main1 .)
    FOR             reduce using rule 42 (main1 -> var_declaracion main1 .)
    PRINT           reduce using rule 42 (main1 -> var_declaracion main1 .)
    INPUT           reduce using rule 42 (main1 -> var_declaracion main1 .)


state 105

    (36) inicializacion_vector -> ID declareVar EQUALS LBRACKET . inicializacion_vector1 RBRACKET
    (37) inicializacion_vector1 -> . varcte inicializacion_vector2
    (38) inicializacion_vector1 -> . epsilon
    (79) varcte -> . ID varcte1
    (80) varcte -> . CTE_INT
    (81) varcte -> . CTE_FLOAT
    (82) varcte -> . CTE_STRING
    (83) varcte -> . cte_bool
    (128) epsilon -> .
    (89) cte_bool -> . TRUE
    (90) cte_bool -> . FALSE

    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    RBRACKET        reduce using rule 128 (epsilon -> .)
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    varcte                         shift and go to state 131
    epsilon                        shift and go to state 132
    cte_bool                       shift and go to state 51
    inicializacion_vector1         shift and go to state 133

state 106

    (47) factor -> LPAREN expresion RPAREN .

    TIMES           reduce using rule 47 (factor -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 47 (factor -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 47 (factor -> LPAREN expresion RPAREN .)
    MINUS           reduce using rule 47 (factor -> LPAREN expresion RPAREN .)
    VECTOR          reduce using rule 47 (factor -> LPAREN expresion RPAREN .)
    INT             reduce using rule 47 (factor -> LPAREN expresion RPAREN .)
    FLOAT           reduce using rule 47 (factor -> LPAREN expresion RPAREN .)
    BOOL            reduce using rule 47 (factor -> LPAREN expresion RPAREN .)
    STRING          reduce using rule 47 (factor -> LPAREN expresion RPAREN .)
    FUNCTION        reduce using rule 47 (factor -> LPAREN expresion RPAREN .)
    MAIN            reduce using rule 47 (factor -> LPAREN expresion RPAREN .)
    ID              reduce using rule 47 (factor -> LPAREN expresion RPAREN .)
    IF              reduce using rule 47 (factor -> LPAREN expresion RPAREN .)
    SWITCH          reduce using rule 47 (factor -> LPAREN expresion RPAREN .)
    WHILE           reduce using rule 47 (factor -> LPAREN expresion RPAREN .)
    FOR             reduce using rule 47 (factor -> LPAREN expresion RPAREN .)
    PRINT           reduce using rule 47 (factor -> LPAREN expresion RPAREN .)
    INPUT           reduce using rule 47 (factor -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 47 (factor -> LPAREN expresion RPAREN .)
    COMMA           reduce using rule 47 (factor -> LPAREN expresion RPAREN .)
    RBRACKET        reduce using rule 47 (factor -> LPAREN expresion RPAREN .)
    RCURL           reduce using rule 47 (factor -> LPAREN expresion RPAREN .)
    RETURN          reduce using rule 47 (factor -> LPAREN expresion RPAREN .)
    CASE            reduce using rule 47 (factor -> LPAREN expresion RPAREN .)
    DEFAULT         reduce using rule 47 (factor -> LPAREN expresion RPAREN .)
    AND             reduce using rule 47 (factor -> LPAREN expresion RPAREN .)
    OR              reduce using rule 47 (factor -> LPAREN expresion RPAREN .)
    LESS            reduce using rule 47 (factor -> LPAREN expresion RPAREN .)
    GREATER         reduce using rule 47 (factor -> LPAREN expresion RPAREN .)
    DOUBLE_EQUAL    reduce using rule 47 (factor -> LPAREN expresion RPAREN .)
    DIFF            reduce using rule 47 (factor -> LPAREN expresion RPAREN .)


state 107

    (63) expresion1 -> expresion2 exp .

    RPAREN          reduce using rule 63 (expresion1 -> expresion2 exp .)


state 108

    (29) exp1 -> PLUS exp .

    VECTOR          reduce using rule 29 (exp1 -> PLUS exp .)
    INT             reduce using rule 29 (exp1 -> PLUS exp .)
    FLOAT           reduce using rule 29 (exp1 -> PLUS exp .)
    BOOL            reduce using rule 29 (exp1 -> PLUS exp .)
    STRING          reduce using rule 29 (exp1 -> PLUS exp .)
    FUNCTION        reduce using rule 29 (exp1 -> PLUS exp .)
    MAIN            reduce using rule 29 (exp1 -> PLUS exp .)
    ID              reduce using rule 29 (exp1 -> PLUS exp .)
    IF              reduce using rule 29 (exp1 -> PLUS exp .)
    SWITCH          reduce using rule 29 (exp1 -> PLUS exp .)
    WHILE           reduce using rule 29 (exp1 -> PLUS exp .)
    FOR             reduce using rule 29 (exp1 -> PLUS exp .)
    PRINT           reduce using rule 29 (exp1 -> PLUS exp .)
    INPUT           reduce using rule 29 (exp1 -> PLUS exp .)
    RPAREN          reduce using rule 29 (exp1 -> PLUS exp .)
    COMMA           reduce using rule 29 (exp1 -> PLUS exp .)
    RBRACKET        reduce using rule 29 (exp1 -> PLUS exp .)
    RCURL           reduce using rule 29 (exp1 -> PLUS exp .)
    RETURN          reduce using rule 29 (exp1 -> PLUS exp .)
    CASE            reduce using rule 29 (exp1 -> PLUS exp .)
    DEFAULT         reduce using rule 29 (exp1 -> PLUS exp .)
    AND             reduce using rule 29 (exp1 -> PLUS exp .)
    OR              reduce using rule 29 (exp1 -> PLUS exp .)
    LESS            reduce using rule 29 (exp1 -> PLUS exp .)
    GREATER         reduce using rule 29 (exp1 -> PLUS exp .)
    DOUBLE_EQUAL    reduce using rule 29 (exp1 -> PLUS exp .)
    DIFF            reduce using rule 29 (exp1 -> PLUS exp .)


state 109

    (30) exp1 -> MINUS exp .

    VECTOR          reduce using rule 30 (exp1 -> MINUS exp .)
    INT             reduce using rule 30 (exp1 -> MINUS exp .)
    FLOAT           reduce using rule 30 (exp1 -> MINUS exp .)
    BOOL            reduce using rule 30 (exp1 -> MINUS exp .)
    STRING          reduce using rule 30 (exp1 -> MINUS exp .)
    FUNCTION        reduce using rule 30 (exp1 -> MINUS exp .)
    MAIN            reduce using rule 30 (exp1 -> MINUS exp .)
    ID              reduce using rule 30 (exp1 -> MINUS exp .)
    IF              reduce using rule 30 (exp1 -> MINUS exp .)
    SWITCH          reduce using rule 30 (exp1 -> MINUS exp .)
    WHILE           reduce using rule 30 (exp1 -> MINUS exp .)
    FOR             reduce using rule 30 (exp1 -> MINUS exp .)
    PRINT           reduce using rule 30 (exp1 -> MINUS exp .)
    INPUT           reduce using rule 30 (exp1 -> MINUS exp .)
    RPAREN          reduce using rule 30 (exp1 -> MINUS exp .)
    COMMA           reduce using rule 30 (exp1 -> MINUS exp .)
    RBRACKET        reduce using rule 30 (exp1 -> MINUS exp .)
    RCURL           reduce using rule 30 (exp1 -> MINUS exp .)
    RETURN          reduce using rule 30 (exp1 -> MINUS exp .)
    CASE            reduce using rule 30 (exp1 -> MINUS exp .)
    DEFAULT         reduce using rule 30 (exp1 -> MINUS exp .)
    AND             reduce using rule 30 (exp1 -> MINUS exp .)
    OR              reduce using rule 30 (exp1 -> MINUS exp .)
    LESS            reduce using rule 30 (exp1 -> MINUS exp .)
    GREATER         reduce using rule 30 (exp1 -> MINUS exp .)
    DOUBLE_EQUAL    reduce using rule 30 (exp1 -> MINUS exp .)
    DIFF            reduce using rule 30 (exp1 -> MINUS exp .)


state 110

    (34) termino1 -> DIVIDE termino .

    PLUS            reduce using rule 34 (termino1 -> DIVIDE termino .)
    MINUS           reduce using rule 34 (termino1 -> DIVIDE termino .)
    VECTOR          reduce using rule 34 (termino1 -> DIVIDE termino .)
    INT             reduce using rule 34 (termino1 -> DIVIDE termino .)
    FLOAT           reduce using rule 34 (termino1 -> DIVIDE termino .)
    BOOL            reduce using rule 34 (termino1 -> DIVIDE termino .)
    STRING          reduce using rule 34 (termino1 -> DIVIDE termino .)
    FUNCTION        reduce using rule 34 (termino1 -> DIVIDE termino .)
    MAIN            reduce using rule 34 (termino1 -> DIVIDE termino .)
    ID              reduce using rule 34 (termino1 -> DIVIDE termino .)
    IF              reduce using rule 34 (termino1 -> DIVIDE termino .)
    SWITCH          reduce using rule 34 (termino1 -> DIVIDE termino .)
    WHILE           reduce using rule 34 (termino1 -> DIVIDE termino .)
    FOR             reduce using rule 34 (termino1 -> DIVIDE termino .)
    PRINT           reduce using rule 34 (termino1 -> DIVIDE termino .)
    INPUT           reduce using rule 34 (termino1 -> DIVIDE termino .)
    RPAREN          reduce using rule 34 (termino1 -> DIVIDE termino .)
    COMMA           reduce using rule 34 (termino1 -> DIVIDE termino .)
    RBRACKET        reduce using rule 34 (termino1 -> DIVIDE termino .)
    RCURL           reduce using rule 34 (termino1 -> DIVIDE termino .)
    RETURN          reduce using rule 34 (termino1 -> DIVIDE termino .)
    CASE            reduce using rule 34 (termino1 -> DIVIDE termino .)
    DEFAULT         reduce using rule 34 (termino1 -> DIVIDE termino .)
    AND             reduce using rule 34 (termino1 -> DIVIDE termino .)
    OR              reduce using rule 34 (termino1 -> DIVIDE termino .)
    LESS            reduce using rule 34 (termino1 -> DIVIDE termino .)
    GREATER         reduce using rule 34 (termino1 -> DIVIDE termino .)
    DOUBLE_EQUAL    reduce using rule 34 (termino1 -> DIVIDE termino .)
    DIFF            reduce using rule 34 (termino1 -> DIVIDE termino .)


state 111

    (33) termino1 -> TIMES termino .

    PLUS            reduce using rule 33 (termino1 -> TIMES termino .)
    MINUS           reduce using rule 33 (termino1 -> TIMES termino .)
    VECTOR          reduce using rule 33 (termino1 -> TIMES termino .)
    INT             reduce using rule 33 (termino1 -> TIMES termino .)
    FLOAT           reduce using rule 33 (termino1 -> TIMES termino .)
    BOOL            reduce using rule 33 (termino1 -> TIMES termino .)
    STRING          reduce using rule 33 (termino1 -> TIMES termino .)
    FUNCTION        reduce using rule 33 (termino1 -> TIMES termino .)
    MAIN            reduce using rule 33 (termino1 -> TIMES termino .)
    ID              reduce using rule 33 (termino1 -> TIMES termino .)
    IF              reduce using rule 33 (termino1 -> TIMES termino .)
    SWITCH          reduce using rule 33 (termino1 -> TIMES termino .)
    WHILE           reduce using rule 33 (termino1 -> TIMES termino .)
    FOR             reduce using rule 33 (termino1 -> TIMES termino .)
    PRINT           reduce using rule 33 (termino1 -> TIMES termino .)
    INPUT           reduce using rule 33 (termino1 -> TIMES termino .)
    RPAREN          reduce using rule 33 (termino1 -> TIMES termino .)
    COMMA           reduce using rule 33 (termino1 -> TIMES termino .)
    RBRACKET        reduce using rule 33 (termino1 -> TIMES termino .)
    RCURL           reduce using rule 33 (termino1 -> TIMES termino .)
    RETURN          reduce using rule 33 (termino1 -> TIMES termino .)
    CASE            reduce using rule 33 (termino1 -> TIMES termino .)
    DEFAULT         reduce using rule 33 (termino1 -> TIMES termino .)
    AND             reduce using rule 33 (termino1 -> TIMES termino .)
    OR              reduce using rule 33 (termino1 -> TIMES termino .)
    LESS            reduce using rule 33 (termino1 -> TIMES termino .)
    GREATER         reduce using rule 33 (termino1 -> TIMES termino .)
    DOUBLE_EQUAL    reduce using rule 33 (termino1 -> TIMES termino .)
    DIFF            reduce using rule 33 (termino1 -> TIMES termino .)


state 112

    (85) varcte1 -> LPAREN exp . varcte2 RPAREN
    (87) varcte2 -> . epsilon
    (88) varcte2 -> . COMMA exp varcte2
    (128) epsilon -> .

    COMMA           shift and go to state 135
    RPAREN          reduce using rule 128 (epsilon -> .)

    epsilon                        shift and go to state 134
    varcte2                        shift and go to state 136

state 113

    (86) varcte1 -> LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 137


state 114

    (17) parametros1 -> epsilon .

    ID              reduce using rule 17 (parametros1 -> epsilon .)


state 115

    (14) parametros -> tipo parametros1 . ID parametros2

    ID              shift and go to state 138


state 116

    (16) parametros1 -> AMPERSON .

    ID              reduce using rule 16 (parametros1 -> AMPERSON .)


state 117

    (119) funcion4 -> tipo ID LPAREN funcion3 RPAREN . LCURL funcion1 estatuto funcion2 RETURN ID RCURL

    LCURL           shift and go to state 139


state 118

    (15) parametros -> VECTOR tipo . parametros1 ID parametros2
    (16) parametros1 -> . AMPERSON
    (17) parametros1 -> . epsilon
    (128) epsilon -> .

    AMPERSON        shift and go to state 116
    ID              reduce using rule 128 (epsilon -> .)

    parametros1                    shift and go to state 140
    epsilon                        shift and go to state 114

state 119

    (118) funcion4 -> VOID ID LPAREN funcion3 RPAREN . LCURL funcion1 estatuto funcion2 RCURL

    LCURL           shift and go to state 141


state 120

    (46) while -> WHILE LPAREN . expresion RPAREN bloque
    (61) expresion -> . expresion1
    (62) expresion1 -> . epsilon
    (63) expresion1 -> . expresion2 exp
    (128) epsilon -> .
    (64) expresion2 -> . LESS
    (65) expresion2 -> . GREATER
    (66) expresion2 -> . DOUBLE_EQUAL
    (67) expresion2 -> . DIFF

    RPAREN          reduce using rule 128 (epsilon -> .)
    LESS            shift and go to state 63
    GREATER         shift and go to state 67
    DOUBLE_EQUAL    shift and go to state 65
    DIFF            shift and go to state 66

    expresion                      shift and go to state 142
    expresion1                     shift and go to state 61
    expresion2                     shift and go to state 62
    epsilon                        shift and go to state 64

state 121

    (91) print -> PRINT LPAREN . print1 RPAREN
    (92) print1 -> . CTE_STRING print2
    (93) print1 -> . ID print2

    CTE_STRING      shift and go to state 144
    ID              shift and go to state 145

    print1                         shift and go to state 143

state 122

    (44) main2 -> estatuto . main2
    (44) main2 -> . estatuto main2
    (45) main2 -> . epsilon
    (52) estatuto -> . asignacion
    (53) estatuto -> . llamada
    (54) estatuto -> . condicion
    (55) estatuto -> . switch
    (56) estatuto -> . while
    (57) estatuto -> . for
    (128) epsilon -> .
    (58) asignacion -> . ID EQUALS asignacion1
    (72) llamada -> . ID LPAREN llamada1 RPAREN
    (73) llamada -> . print
    (74) llamada -> . input
    (96) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (120) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (46) while -> . WHILE LPAREN expresion RPAREN bloque
    (106) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (91) print -> . PRINT LPAREN print1 RPAREN
    (103) input -> . INPUT LPAREN input1 RPAREN

    RCURL           reduce using rule 128 (epsilon -> .)
    ID              shift and go to state 99
    IF              shift and go to state 100
    SWITCH          shift and go to state 93
    WHILE           shift and go to state 88
    FOR             shift and go to state 97
    PRINT           shift and go to state 89
    INPUT           shift and go to state 98

    for                            shift and go to state 90
    estatuto                       shift and go to state 122
    switch                         shift and go to state 102
    llamada                        shift and go to state 92
    condicion                      shift and go to state 94
    print                          shift and go to state 95
    input                          shift and go to state 96
    epsilon                        shift and go to state 123
    main2                          shift and go to state 146
    asignacion                     shift and go to state 101
    while                          shift and go to state 103

state 123

    (45) main2 -> epsilon .

    RCURL           reduce using rule 45 (main2 -> epsilon .)


state 124

    (41) main -> MAIN LCURL main1 estatuto main2 . RCURL

    RCURL           shift and go to state 147


state 125

    (120) switch -> SWITCH ID . switch1 LCURL switch2 switch3 RCURL
    (121) switch1 -> . epsilon
    (122) switch1 -> . LBRACKET exp RBRACKET
    (128) epsilon -> .

    LBRACKET        shift and go to state 149
    LCURL           reduce using rule 128 (epsilon -> .)

    switch1                        shift and go to state 148
    epsilon                        shift and go to state 150

state 126

    (106) for -> FOR CTE_INT . TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque

    TO              shift and go to state 151


state 127

    (103) input -> INPUT LPAREN . input1 RPAREN
    (104) input1 -> . CTE_STRING
    (105) input1 -> . epsilon
    (128) epsilon -> .

    CTE_STRING      shift and go to state 152
    RPAREN          reduce using rule 128 (epsilon -> .)

    epsilon                        shift and go to state 154
    input1                         shift and go to state 153

state 128

    (58) asignacion -> ID EQUALS . asignacion1
    (59) asignacion1 -> . exp
    (60) asignacion1 -> . llamada
    (28) exp -> . termino exp1
    (72) llamada -> . ID LPAREN llamada1 RPAREN
    (73) llamada -> . print
    (74) llamada -> . input
    (32) termino -> . factor termino1
    (91) print -> . PRINT LPAREN print1 RPAREN
    (103) input -> . INPUT LPAREN input1 RPAREN
    (47) factor -> . LPAREN expresion RPAREN
    (48) factor -> . factor1
    (49) factor1 -> . PLUS varcte
    (50) factor1 -> . MINUS varcte
    (51) factor1 -> . varcte
    (79) varcte -> . ID varcte1
    (80) varcte -> . CTE_INT
    (81) varcte -> . CTE_FLOAT
    (82) varcte -> . CTE_STRING
    (83) varcte -> . cte_bool
    (89) cte_bool -> . TRUE
    (90) cte_bool -> . FALSE

    ID              shift and go to state 156
    PRINT           shift and go to state 89
    INPUT           shift and go to state 98
    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    factor1                        shift and go to state 53
    cte_bool                       shift and go to state 51
    llamada                        shift and go to state 155
    termino                        shift and go to state 46
    exp                            shift and go to state 157
    factor                         shift and go to state 48
    print                          shift and go to state 95
    input                          shift and go to state 96
    asignacion1                    shift and go to state 158
    varcte                         shift and go to state 39

state 129

    (72) llamada -> ID LPAREN . llamada1 RPAREN
    (75) llamada1 -> . epsilon
    (76) llamada1 -> . exp llamada2
    (128) epsilon -> .
    (28) exp -> . termino exp1
    (32) termino -> . factor termino1
    (47) factor -> . LPAREN expresion RPAREN
    (48) factor -> . factor1
    (49) factor1 -> . PLUS varcte
    (50) factor1 -> . MINUS varcte
    (51) factor1 -> . varcte
    (79) varcte -> . ID varcte1
    (80) varcte -> . CTE_INT
    (81) varcte -> . CTE_FLOAT
    (82) varcte -> . CTE_STRING
    (83) varcte -> . cte_bool
    (89) cte_bool -> . TRUE
    (90) cte_bool -> . FALSE

    RPAREN          reduce using rule 128 (epsilon -> .)
    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    factor1                        shift and go to state 53
    epsilon                        shift and go to state 160
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 46
    exp                            shift and go to state 161
    factor                         shift and go to state 48
    llamada1                       shift and go to state 159
    varcte                         shift and go to state 39

state 130

    (96) condicion -> IF LPAREN . expresion_logica RPAREN condicion1 condicion2 condicion3
    (68) expresion_logica -> . exp expresion_logica1 expresion
    (28) exp -> . termino exp1
    (32) termino -> . factor termino1
    (47) factor -> . LPAREN expresion RPAREN
    (48) factor -> . factor1
    (49) factor1 -> . PLUS varcte
    (50) factor1 -> . MINUS varcte
    (51) factor1 -> . varcte
    (79) varcte -> . ID varcte1
    (80) varcte -> . CTE_INT
    (81) varcte -> . CTE_FLOAT
    (82) varcte -> . CTE_STRING
    (83) varcte -> . cte_bool
    (89) cte_bool -> . TRUE
    (90) cte_bool -> . FALSE

    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    varcte                         shift and go to state 39
    expresion_logica               shift and go to state 162
    factor                         shift and go to state 48
    cte_bool                       shift and go to state 51
    factor1                        shift and go to state 53
    exp                            shift and go to state 163
    termino                        shift and go to state 46

state 131

    (37) inicializacion_vector1 -> varcte . inicializacion_vector2
    (39) inicializacion_vector2 -> . COMMA varcte inicializacion_vector2
    (40) inicializacion_vector2 -> . epsilon
    (128) epsilon -> .

    COMMA           shift and go to state 166
    RBRACKET        reduce using rule 128 (epsilon -> .)

    inicializacion_vector2         shift and go to state 164
    epsilon                        shift and go to state 165

state 132

    (38) inicializacion_vector1 -> epsilon .

    RBRACKET        reduce using rule 38 (inicializacion_vector1 -> epsilon .)


state 133

    (36) inicializacion_vector -> ID declareVar EQUALS LBRACKET inicializacion_vector1 . RBRACKET

    RBRACKET        shift and go to state 167


state 134

    (87) varcte2 -> epsilon .

    RPAREN          reduce using rule 87 (varcte2 -> epsilon .)


state 135

    (88) varcte2 -> COMMA . exp varcte2
    (28) exp -> . termino exp1
    (32) termino -> . factor termino1
    (47) factor -> . LPAREN expresion RPAREN
    (48) factor -> . factor1
    (49) factor1 -> . PLUS varcte
    (50) factor1 -> . MINUS varcte
    (51) factor1 -> . varcte
    (79) varcte -> . ID varcte1
    (80) varcte -> . CTE_INT
    (81) varcte -> . CTE_FLOAT
    (82) varcte -> . CTE_STRING
    (83) varcte -> . cte_bool
    (89) cte_bool -> . TRUE
    (90) cte_bool -> . FALSE

    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    factor1                        shift and go to state 53
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 46
    exp                            shift and go to state 168
    factor                         shift and go to state 48
    varcte                         shift and go to state 39

state 136

    (85) varcte1 -> LPAREN exp varcte2 . RPAREN

    RPAREN          shift and go to state 169


state 137

    (86) varcte1 -> LBRACKET exp RBRACKET .

    TIMES           reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    DIVIDE          reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    ID              reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    IF              reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    SWITCH          reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    WHILE           reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    FOR             reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    PRINT           reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    INPUT           reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    RCURL           reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    RETURN          reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    CASE            reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    DEFAULT         reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    VECTOR          reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    INT             reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    FLOAT           reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    BOOL            reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    STRING          reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    FUNCTION        reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    MAIN            reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    COMMA           reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    AND             reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    OR              reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    LESS            reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    GREATER         reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    DOUBLE_EQUAL    reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    DIFF            reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)
    COLON           reduce using rule 86 (varcte1 -> LBRACKET exp RBRACKET .)


state 138

    (14) parametros -> tipo parametros1 ID . parametros2
    (18) parametros2 -> . COMMA parametros
    (19) parametros2 -> . epsilon
    (128) epsilon -> .

    COMMA           shift and go to state 171
    RPAREN          reduce using rule 128 (epsilon -> .)

    parametros2                    shift and go to state 170
    epsilon                        shift and go to state 172

state 139

    (119) funcion4 -> tipo ID LPAREN funcion3 RPAREN LCURL . funcion1 estatuto funcion2 RETURN ID RCURL
    (112) funcion1 -> . epsilon
    (113) funcion1 -> . var_declaracion funcion1
    (128) epsilon -> .
    (6) var_declaracion -> . tipo var_declaracion1
    (7) var_declaracion -> . VECTOR tipo var_declaracion2
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . BOOL
    (24) tipo -> . STRING

    ID              reduce using rule 128 (epsilon -> .)
    IF              reduce using rule 128 (epsilon -> .)
    SWITCH          reduce using rule 128 (epsilon -> .)
    WHILE           reduce using rule 128 (epsilon -> .)
    FOR             reduce using rule 128 (epsilon -> .)
    PRINT           reduce using rule 128 (epsilon -> .)
    INPUT           reduce using rule 128 (epsilon -> .)
    VECTOR          shift and go to state 8
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 5
    epsilon                        shift and go to state 173
    var_declaracion                shift and go to state 174
    funcion1                       shift and go to state 175

state 140

    (15) parametros -> VECTOR tipo parametros1 . ID parametros2

    ID              shift and go to state 176


state 141

    (118) funcion4 -> VOID ID LPAREN funcion3 RPAREN LCURL . funcion1 estatuto funcion2 RCURL
    (112) funcion1 -> . epsilon
    (113) funcion1 -> . var_declaracion funcion1
    (128) epsilon -> .
    (6) var_declaracion -> . tipo var_declaracion1
    (7) var_declaracion -> . VECTOR tipo var_declaracion2
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . BOOL
    (24) tipo -> . STRING

    ID              reduce using rule 128 (epsilon -> .)
    IF              reduce using rule 128 (epsilon -> .)
    SWITCH          reduce using rule 128 (epsilon -> .)
    WHILE           reduce using rule 128 (epsilon -> .)
    FOR             reduce using rule 128 (epsilon -> .)
    PRINT           reduce using rule 128 (epsilon -> .)
    INPUT           reduce using rule 128 (epsilon -> .)
    VECTOR          shift and go to state 8
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 5
    epsilon                        shift and go to state 173
    var_declaracion                shift and go to state 174
    funcion1                       shift and go to state 177

state 142

    (46) while -> WHILE LPAREN expresion . RPAREN bloque

    RPAREN          shift and go to state 178


state 143

    (91) print -> PRINT LPAREN print1 . RPAREN

    RPAREN          shift and go to state 179


state 144

    (92) print1 -> CTE_STRING . print2
    (94) print2 -> . epsilon
    (95) print2 -> . PLUS print1
    (128) epsilon -> .

    PLUS            shift and go to state 182
    RPAREN          reduce using rule 128 (epsilon -> .)

    epsilon                        shift and go to state 180
    print2                         shift and go to state 181

state 145

    (93) print1 -> ID . print2
    (94) print2 -> . epsilon
    (95) print2 -> . PLUS print1
    (128) epsilon -> .

    PLUS            shift and go to state 182
    RPAREN          reduce using rule 128 (epsilon -> .)

    epsilon                        shift and go to state 180
    print2                         shift and go to state 183

state 146

    (44) main2 -> estatuto main2 .

    RCURL           reduce using rule 44 (main2 -> estatuto main2 .)


state 147

    (41) main -> MAIN LCURL main1 estatuto main2 RCURL .

    END             reduce using rule 41 (main -> MAIN LCURL main1 estatuto main2 RCURL .)


state 148

    (120) switch -> SWITCH ID switch1 . LCURL switch2 switch3 RCURL

    LCURL           shift and go to state 184


state 149

    (122) switch1 -> LBRACKET . exp RBRACKET
    (28) exp -> . termino exp1
    (32) termino -> . factor termino1
    (47) factor -> . LPAREN expresion RPAREN
    (48) factor -> . factor1
    (49) factor1 -> . PLUS varcte
    (50) factor1 -> . MINUS varcte
    (51) factor1 -> . varcte
    (79) varcte -> . ID varcte1
    (80) varcte -> . CTE_INT
    (81) varcte -> . CTE_FLOAT
    (82) varcte -> . CTE_STRING
    (83) varcte -> . cte_bool
    (89) cte_bool -> . TRUE
    (90) cte_bool -> . FALSE

    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    factor1                        shift and go to state 53
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 46
    exp                            shift and go to state 185
    factor                         shift and go to state 48
    varcte                         shift and go to state 39

state 150

    (121) switch1 -> epsilon .

    LCURL           reduce using rule 121 (switch1 -> epsilon .)


state 151

    (106) for -> FOR CTE_INT TO . CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque

    CTE_INT         shift and go to state 186


state 152

    (104) input1 -> CTE_STRING .

    RPAREN          reduce using rule 104 (input1 -> CTE_STRING .)


state 153

    (103) input -> INPUT LPAREN input1 . RPAREN

    RPAREN          shift and go to state 187


state 154

    (105) input1 -> epsilon .

    RPAREN          reduce using rule 105 (input1 -> epsilon .)


state 155

    (60) asignacion1 -> llamada .

    ID              reduce using rule 60 (asignacion1 -> llamada .)
    IF              reduce using rule 60 (asignacion1 -> llamada .)
    SWITCH          reduce using rule 60 (asignacion1 -> llamada .)
    WHILE           reduce using rule 60 (asignacion1 -> llamada .)
    FOR             reduce using rule 60 (asignacion1 -> llamada .)
    PRINT           reduce using rule 60 (asignacion1 -> llamada .)
    INPUT           reduce using rule 60 (asignacion1 -> llamada .)
    RCURL           reduce using rule 60 (asignacion1 -> llamada .)
    RETURN          reduce using rule 60 (asignacion1 -> llamada .)
    CASE            reduce using rule 60 (asignacion1 -> llamada .)
    DEFAULT         reduce using rule 60 (asignacion1 -> llamada .)


state 156

    (72) llamada -> ID . LPAREN llamada1 RPAREN
    (79) varcte -> ID . varcte1
    (84) varcte1 -> . epsilon
    (85) varcte1 -> . LPAREN exp varcte2 RPAREN
    (86) varcte1 -> . LBRACKET exp RBRACKET
    (128) epsilon -> .

    LPAREN          shift and go to state 188
    LBRACKET        shift and go to state 79
    TIMES           reduce using rule 128 (epsilon -> .)
    DIVIDE          reduce using rule 128 (epsilon -> .)
    PLUS            reduce using rule 128 (epsilon -> .)
    MINUS           reduce using rule 128 (epsilon -> .)
    ID              reduce using rule 128 (epsilon -> .)
    IF              reduce using rule 128 (epsilon -> .)
    SWITCH          reduce using rule 128 (epsilon -> .)
    WHILE           reduce using rule 128 (epsilon -> .)
    FOR             reduce using rule 128 (epsilon -> .)
    PRINT           reduce using rule 128 (epsilon -> .)
    INPUT           reduce using rule 128 (epsilon -> .)
    RCURL           reduce using rule 128 (epsilon -> .)
    RETURN          reduce using rule 128 (epsilon -> .)
    CASE            reduce using rule 128 (epsilon -> .)
    DEFAULT         reduce using rule 128 (epsilon -> .)

    epsilon                        shift and go to state 78
    varcte1                        shift and go to state 80

state 157

    (59) asignacion1 -> exp .

    ID              reduce using rule 59 (asignacion1 -> exp .)
    IF              reduce using rule 59 (asignacion1 -> exp .)
    SWITCH          reduce using rule 59 (asignacion1 -> exp .)
    WHILE           reduce using rule 59 (asignacion1 -> exp .)
    FOR             reduce using rule 59 (asignacion1 -> exp .)
    PRINT           reduce using rule 59 (asignacion1 -> exp .)
    INPUT           reduce using rule 59 (asignacion1 -> exp .)
    RCURL           reduce using rule 59 (asignacion1 -> exp .)
    RETURN          reduce using rule 59 (asignacion1 -> exp .)
    CASE            reduce using rule 59 (asignacion1 -> exp .)
    DEFAULT         reduce using rule 59 (asignacion1 -> exp .)


state 158

    (58) asignacion -> ID EQUALS asignacion1 .

    ID              reduce using rule 58 (asignacion -> ID EQUALS asignacion1 .)
    IF              reduce using rule 58 (asignacion -> ID EQUALS asignacion1 .)
    SWITCH          reduce using rule 58 (asignacion -> ID EQUALS asignacion1 .)
    WHILE           reduce using rule 58 (asignacion -> ID EQUALS asignacion1 .)
    FOR             reduce using rule 58 (asignacion -> ID EQUALS asignacion1 .)
    PRINT           reduce using rule 58 (asignacion -> ID EQUALS asignacion1 .)
    INPUT           reduce using rule 58 (asignacion -> ID EQUALS asignacion1 .)
    RCURL           reduce using rule 58 (asignacion -> ID EQUALS asignacion1 .)
    CASE            reduce using rule 58 (asignacion -> ID EQUALS asignacion1 .)
    DEFAULT         reduce using rule 58 (asignacion -> ID EQUALS asignacion1 .)
    RETURN          reduce using rule 58 (asignacion -> ID EQUALS asignacion1 .)


state 159

    (72) llamada -> ID LPAREN llamada1 . RPAREN

    RPAREN          shift and go to state 189


state 160

    (75) llamada1 -> epsilon .

    RPAREN          reduce using rule 75 (llamada1 -> epsilon .)


state 161

    (76) llamada1 -> exp . llamada2
    (77) llamada2 -> . epsilon
    (78) llamada2 -> . COMMA exp llamada2
    (128) epsilon -> .

    COMMA           shift and go to state 192
    RPAREN          reduce using rule 128 (epsilon -> .)

    llamada2                       shift and go to state 190
    epsilon                        shift and go to state 191

state 162

    (96) condicion -> IF LPAREN expresion_logica . RPAREN condicion1 condicion2 condicion3

    RPAREN          shift and go to state 193


state 163

    (68) expresion_logica -> exp . expresion_logica1 expresion
    (69) expresion_logica1 -> . AND exp
    (70) expresion_logica1 -> . epsilon
    (71) expresion_logica1 -> . OR exp
    (128) epsilon -> .

    AND             shift and go to state 194
    OR              shift and go to state 197
    LESS            reduce using rule 128 (epsilon -> .)
    GREATER         reduce using rule 128 (epsilon -> .)
    DOUBLE_EQUAL    reduce using rule 128 (epsilon -> .)
    DIFF            reduce using rule 128 (epsilon -> .)
    RPAREN          reduce using rule 128 (epsilon -> .)

    expresion_logica1              shift and go to state 196
    epsilon                        shift and go to state 195

state 164

    (37) inicializacion_vector1 -> varcte inicializacion_vector2 .

    RBRACKET        reduce using rule 37 (inicializacion_vector1 -> varcte inicializacion_vector2 .)


state 165

    (40) inicializacion_vector2 -> epsilon .

    RBRACKET        reduce using rule 40 (inicializacion_vector2 -> epsilon .)


state 166

    (39) inicializacion_vector2 -> COMMA . varcte inicializacion_vector2
    (79) varcte -> . ID varcte1
    (80) varcte -> . CTE_INT
    (81) varcte -> . CTE_FLOAT
    (82) varcte -> . CTE_STRING
    (83) varcte -> . cte_bool
    (89) cte_bool -> . TRUE
    (90) cte_bool -> . FALSE

    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    cte_bool                       shift and go to state 51
    varcte                         shift and go to state 198

state 167

    (36) inicializacion_vector -> ID declareVar EQUALS LBRACKET inicializacion_vector1 RBRACKET .

    VECTOR          reduce using rule 36 (inicializacion_vector -> ID declareVar EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    INT             reduce using rule 36 (inicializacion_vector -> ID declareVar EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    FLOAT           reduce using rule 36 (inicializacion_vector -> ID declareVar EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    BOOL            reduce using rule 36 (inicializacion_vector -> ID declareVar EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    STRING          reduce using rule 36 (inicializacion_vector -> ID declareVar EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    FUNCTION        reduce using rule 36 (inicializacion_vector -> ID declareVar EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    MAIN            reduce using rule 36 (inicializacion_vector -> ID declareVar EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    ID              reduce using rule 36 (inicializacion_vector -> ID declareVar EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    IF              reduce using rule 36 (inicializacion_vector -> ID declareVar EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    SWITCH          reduce using rule 36 (inicializacion_vector -> ID declareVar EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    WHILE           reduce using rule 36 (inicializacion_vector -> ID declareVar EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    FOR             reduce using rule 36 (inicializacion_vector -> ID declareVar EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    PRINT           reduce using rule 36 (inicializacion_vector -> ID declareVar EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    INPUT           reduce using rule 36 (inicializacion_vector -> ID declareVar EQUALS LBRACKET inicializacion_vector1 RBRACKET .)


state 168

    (88) varcte2 -> COMMA exp . varcte2
    (87) varcte2 -> . epsilon
    (88) varcte2 -> . COMMA exp varcte2
    (128) epsilon -> .

    COMMA           shift and go to state 135
    RPAREN          reduce using rule 128 (epsilon -> .)

    epsilon                        shift and go to state 134
    varcte2                        shift and go to state 199

state 169

    (85) varcte1 -> LPAREN exp varcte2 RPAREN .

    TIMES           reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    DIVIDE          reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    PLUS            reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    MINUS           reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    ID              reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    IF              reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    SWITCH          reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    WHILE           reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    FOR             reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    PRINT           reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    INPUT           reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    RCURL           reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    RETURN          reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    CASE            reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    DEFAULT         reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    VECTOR          reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    INT             reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    FLOAT           reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    BOOL            reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    STRING          reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    FUNCTION        reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    MAIN            reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    RPAREN          reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    COMMA           reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    RBRACKET        reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    AND             reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    OR              reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    LESS            reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    GREATER         reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    DOUBLE_EQUAL    reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    DIFF            reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    COLON           reduce using rule 85 (varcte1 -> LPAREN exp varcte2 RPAREN .)


state 170

    (14) parametros -> tipo parametros1 ID parametros2 .

    RPAREN          reduce using rule 14 (parametros -> tipo parametros1 ID parametros2 .)


state 171

    (18) parametros2 -> COMMA . parametros
    (14) parametros -> . tipo parametros1 ID parametros2
    (15) parametros -> . VECTOR tipo parametros1 ID parametros2
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . BOOL
    (24) tipo -> . STRING

    VECTOR          shift and go to state 86
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    parametros                     shift and go to state 200
    tipo                           shift and go to state 82

state 172

    (19) parametros2 -> epsilon .

    RPAREN          reduce using rule 19 (parametros2 -> epsilon .)


state 173

    (112) funcion1 -> epsilon .

    ID              reduce using rule 112 (funcion1 -> epsilon .)
    IF              reduce using rule 112 (funcion1 -> epsilon .)
    SWITCH          reduce using rule 112 (funcion1 -> epsilon .)
    WHILE           reduce using rule 112 (funcion1 -> epsilon .)
    FOR             reduce using rule 112 (funcion1 -> epsilon .)
    PRINT           reduce using rule 112 (funcion1 -> epsilon .)
    INPUT           reduce using rule 112 (funcion1 -> epsilon .)


state 174

    (113) funcion1 -> var_declaracion . funcion1
    (112) funcion1 -> . epsilon
    (113) funcion1 -> . var_declaracion funcion1
    (128) epsilon -> .
    (6) var_declaracion -> . tipo var_declaracion1
    (7) var_declaracion -> . VECTOR tipo var_declaracion2
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . BOOL
    (24) tipo -> . STRING

    ID              reduce using rule 128 (epsilon -> .)
    IF              reduce using rule 128 (epsilon -> .)
    SWITCH          reduce using rule 128 (epsilon -> .)
    WHILE           reduce using rule 128 (epsilon -> .)
    FOR             reduce using rule 128 (epsilon -> .)
    PRINT           reduce using rule 128 (epsilon -> .)
    INPUT           reduce using rule 128 (epsilon -> .)
    VECTOR          shift and go to state 8
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 5
    epsilon                        shift and go to state 173
    var_declaracion                shift and go to state 174
    funcion1                       shift and go to state 201

state 175

    (119) funcion4 -> tipo ID LPAREN funcion3 RPAREN LCURL funcion1 . estatuto funcion2 RETURN ID RCURL
    (52) estatuto -> . asignacion
    (53) estatuto -> . llamada
    (54) estatuto -> . condicion
    (55) estatuto -> . switch
    (56) estatuto -> . while
    (57) estatuto -> . for
    (58) asignacion -> . ID EQUALS asignacion1
    (72) llamada -> . ID LPAREN llamada1 RPAREN
    (73) llamada -> . print
    (74) llamada -> . input
    (96) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (120) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (46) while -> . WHILE LPAREN expresion RPAREN bloque
    (106) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (91) print -> . PRINT LPAREN print1 RPAREN
    (103) input -> . INPUT LPAREN input1 RPAREN

    ID              shift and go to state 99
    IF              shift and go to state 100
    SWITCH          shift and go to state 93
    WHILE           shift and go to state 88
    FOR             shift and go to state 97
    PRINT           shift and go to state 89
    INPUT           shift and go to state 98

    estatuto                       shift and go to state 202
    while                          shift and go to state 103
    llamada                        shift and go to state 92
    condicion                      shift and go to state 94
    print                          shift and go to state 95
    input                          shift and go to state 96
    for                            shift and go to state 90
    asignacion                     shift and go to state 101
    switch                         shift and go to state 102

state 176

    (15) parametros -> VECTOR tipo parametros1 ID . parametros2
    (18) parametros2 -> . COMMA parametros
    (19) parametros2 -> . epsilon
    (128) epsilon -> .

    COMMA           shift and go to state 171
    RPAREN          reduce using rule 128 (epsilon -> .)

    parametros2                    shift and go to state 203
    epsilon                        shift and go to state 172

state 177

    (118) funcion4 -> VOID ID LPAREN funcion3 RPAREN LCURL funcion1 . estatuto funcion2 RCURL
    (52) estatuto -> . asignacion
    (53) estatuto -> . llamada
    (54) estatuto -> . condicion
    (55) estatuto -> . switch
    (56) estatuto -> . while
    (57) estatuto -> . for
    (58) asignacion -> . ID EQUALS asignacion1
    (72) llamada -> . ID LPAREN llamada1 RPAREN
    (73) llamada -> . print
    (74) llamada -> . input
    (96) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (120) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (46) while -> . WHILE LPAREN expresion RPAREN bloque
    (106) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (91) print -> . PRINT LPAREN print1 RPAREN
    (103) input -> . INPUT LPAREN input1 RPAREN

    ID              shift and go to state 99
    IF              shift and go to state 100
    SWITCH          shift and go to state 93
    WHILE           shift and go to state 88
    FOR             shift and go to state 97
    PRINT           shift and go to state 89
    INPUT           shift and go to state 98

    for                            shift and go to state 90
    estatuto                       shift and go to state 204
    while                          shift and go to state 103
    llamada                        shift and go to state 92
    condicion                      shift and go to state 94
    print                          shift and go to state 95
    input                          shift and go to state 96
    asignacion                     shift and go to state 101
    switch                         shift and go to state 102

state 178

    (46) while -> WHILE LPAREN expresion RPAREN . bloque
    (25) bloque -> . LCURL estatuto bloque1 RCURL

    LCURL           shift and go to state 206

    bloque                         shift and go to state 205

state 179

    (91) print -> PRINT LPAREN print1 RPAREN .

    ID              reduce using rule 91 (print -> PRINT LPAREN print1 RPAREN .)
    IF              reduce using rule 91 (print -> PRINT LPAREN print1 RPAREN .)
    SWITCH          reduce using rule 91 (print -> PRINT LPAREN print1 RPAREN .)
    WHILE           reduce using rule 91 (print -> PRINT LPAREN print1 RPAREN .)
    FOR             reduce using rule 91 (print -> PRINT LPAREN print1 RPAREN .)
    PRINT           reduce using rule 91 (print -> PRINT LPAREN print1 RPAREN .)
    INPUT           reduce using rule 91 (print -> PRINT LPAREN print1 RPAREN .)
    RCURL           reduce using rule 91 (print -> PRINT LPAREN print1 RPAREN .)
    CASE            reduce using rule 91 (print -> PRINT LPAREN print1 RPAREN .)
    DEFAULT         reduce using rule 91 (print -> PRINT LPAREN print1 RPAREN .)
    RETURN          reduce using rule 91 (print -> PRINT LPAREN print1 RPAREN .)


state 180

    (94) print2 -> epsilon .

    RPAREN          reduce using rule 94 (print2 -> epsilon .)


state 181

    (92) print1 -> CTE_STRING print2 .

    RPAREN          reduce using rule 92 (print1 -> CTE_STRING print2 .)


state 182

    (95) print2 -> PLUS . print1
    (92) print1 -> . CTE_STRING print2
    (93) print1 -> . ID print2

    CTE_STRING      shift and go to state 144
    ID              shift and go to state 145

    print1                         shift and go to state 207

state 183

    (93) print1 -> ID print2 .

    RPAREN          reduce using rule 93 (print1 -> ID print2 .)


state 184

    (120) switch -> SWITCH ID switch1 LCURL . switch2 switch3 RCURL
    (123) switch2 -> . epsilon
    (124) switch2 -> . CASE varcte COLON switch4 switch2
    (128) epsilon -> .

    CASE            shift and go to state 208
    DEFAULT         reduce using rule 128 (epsilon -> .)

    switch2                        shift and go to state 209
    epsilon                        shift and go to state 210

state 185

    (122) switch1 -> LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 211


state 186

    (106) for -> FOR CTE_INT TO CTE_INT . BY LPAREN for1 CTE_INT RPAREN bloque

    BY              shift and go to state 212


state 187

    (103) input -> INPUT LPAREN input1 RPAREN .

    ID              reduce using rule 103 (input -> INPUT LPAREN input1 RPAREN .)
    IF              reduce using rule 103 (input -> INPUT LPAREN input1 RPAREN .)
    SWITCH          reduce using rule 103 (input -> INPUT LPAREN input1 RPAREN .)
    WHILE           reduce using rule 103 (input -> INPUT LPAREN input1 RPAREN .)
    FOR             reduce using rule 103 (input -> INPUT LPAREN input1 RPAREN .)
    PRINT           reduce using rule 103 (input -> INPUT LPAREN input1 RPAREN .)
    INPUT           reduce using rule 103 (input -> INPUT LPAREN input1 RPAREN .)
    RCURL           reduce using rule 103 (input -> INPUT LPAREN input1 RPAREN .)
    RETURN          reduce using rule 103 (input -> INPUT LPAREN input1 RPAREN .)
    CASE            reduce using rule 103 (input -> INPUT LPAREN input1 RPAREN .)
    DEFAULT         reduce using rule 103 (input -> INPUT LPAREN input1 RPAREN .)


state 188

    (72) llamada -> ID LPAREN . llamada1 RPAREN
    (85) varcte1 -> LPAREN . exp varcte2 RPAREN
    (75) llamada1 -> . epsilon
    (76) llamada1 -> . exp llamada2
    (28) exp -> . termino exp1
    (128) epsilon -> .
    (32) termino -> . factor termino1
    (47) factor -> . LPAREN expresion RPAREN
    (48) factor -> . factor1
    (49) factor1 -> . PLUS varcte
    (50) factor1 -> . MINUS varcte
    (51) factor1 -> . varcte
    (79) varcte -> . ID varcte1
    (80) varcte -> . CTE_INT
    (81) varcte -> . CTE_FLOAT
    (82) varcte -> . CTE_STRING
    (83) varcte -> . cte_bool
    (89) cte_bool -> . TRUE
    (90) cte_bool -> . FALSE

    RPAREN          reduce using rule 128 (epsilon -> .)
    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    factor1                        shift and go to state 53
    epsilon                        shift and go to state 160
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 46
    exp                            shift and go to state 213
    factor                         shift and go to state 48
    llamada1                       shift and go to state 159
    varcte                         shift and go to state 39

state 189

    (72) llamada -> ID LPAREN llamada1 RPAREN .

    ID              reduce using rule 72 (llamada -> ID LPAREN llamada1 RPAREN .)
    IF              reduce using rule 72 (llamada -> ID LPAREN llamada1 RPAREN .)
    SWITCH          reduce using rule 72 (llamada -> ID LPAREN llamada1 RPAREN .)
    WHILE           reduce using rule 72 (llamada -> ID LPAREN llamada1 RPAREN .)
    FOR             reduce using rule 72 (llamada -> ID LPAREN llamada1 RPAREN .)
    PRINT           reduce using rule 72 (llamada -> ID LPAREN llamada1 RPAREN .)
    INPUT           reduce using rule 72 (llamada -> ID LPAREN llamada1 RPAREN .)
    RCURL           reduce using rule 72 (llamada -> ID LPAREN llamada1 RPAREN .)
    RETURN          reduce using rule 72 (llamada -> ID LPAREN llamada1 RPAREN .)
    CASE            reduce using rule 72 (llamada -> ID LPAREN llamada1 RPAREN .)
    DEFAULT         reduce using rule 72 (llamada -> ID LPAREN llamada1 RPAREN .)


state 190

    (76) llamada1 -> exp llamada2 .

    RPAREN          reduce using rule 76 (llamada1 -> exp llamada2 .)


state 191

    (77) llamada2 -> epsilon .

    RPAREN          reduce using rule 77 (llamada2 -> epsilon .)


state 192

    (78) llamada2 -> COMMA . exp llamada2
    (28) exp -> . termino exp1
    (32) termino -> . factor termino1
    (47) factor -> . LPAREN expresion RPAREN
    (48) factor -> . factor1
    (49) factor1 -> . PLUS varcte
    (50) factor1 -> . MINUS varcte
    (51) factor1 -> . varcte
    (79) varcte -> . ID varcte1
    (80) varcte -> . CTE_INT
    (81) varcte -> . CTE_FLOAT
    (82) varcte -> . CTE_STRING
    (83) varcte -> . cte_bool
    (89) cte_bool -> . TRUE
    (90) cte_bool -> . FALSE

    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    factor1                        shift and go to state 53
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 46
    exp                            shift and go to state 214
    factor                         shift and go to state 48
    varcte                         shift and go to state 39

state 193

    (96) condicion -> IF LPAREN expresion_logica RPAREN . condicion1 condicion2 condicion3
    (97) condicion1 -> . bloque
    (98) condicion1 -> . LCURL bloque RCURL
    (25) bloque -> . LCURL estatuto bloque1 RCURL

    LCURL           shift and go to state 217

    condicion1                     shift and go to state 215
    bloque                         shift and go to state 216

state 194

    (69) expresion_logica1 -> AND . exp
    (28) exp -> . termino exp1
    (32) termino -> . factor termino1
    (47) factor -> . LPAREN expresion RPAREN
    (48) factor -> . factor1
    (49) factor1 -> . PLUS varcte
    (50) factor1 -> . MINUS varcte
    (51) factor1 -> . varcte
    (79) varcte -> . ID varcte1
    (80) varcte -> . CTE_INT
    (81) varcte -> . CTE_FLOAT
    (82) varcte -> . CTE_STRING
    (83) varcte -> . cte_bool
    (89) cte_bool -> . TRUE
    (90) cte_bool -> . FALSE

    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    factor1                        shift and go to state 53
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 46
    exp                            shift and go to state 218
    factor                         shift and go to state 48
    varcte                         shift and go to state 39

state 195

    (70) expresion_logica1 -> epsilon .

    LESS            reduce using rule 70 (expresion_logica1 -> epsilon .)
    GREATER         reduce using rule 70 (expresion_logica1 -> epsilon .)
    DOUBLE_EQUAL    reduce using rule 70 (expresion_logica1 -> epsilon .)
    DIFF            reduce using rule 70 (expresion_logica1 -> epsilon .)
    RPAREN          reduce using rule 70 (expresion_logica1 -> epsilon .)


state 196

    (68) expresion_logica -> exp expresion_logica1 . expresion
    (61) expresion -> . expresion1
    (62) expresion1 -> . epsilon
    (63) expresion1 -> . expresion2 exp
    (128) epsilon -> .
    (64) expresion2 -> . LESS
    (65) expresion2 -> . GREATER
    (66) expresion2 -> . DOUBLE_EQUAL
    (67) expresion2 -> . DIFF

    RPAREN          reduce using rule 128 (epsilon -> .)
    LESS            shift and go to state 63
    GREATER         shift and go to state 67
    DOUBLE_EQUAL    shift and go to state 65
    DIFF            shift and go to state 66

    expresion                      shift and go to state 219
    expresion1                     shift and go to state 61
    expresion2                     shift and go to state 62
    epsilon                        shift and go to state 64

state 197

    (71) expresion_logica1 -> OR . exp
    (28) exp -> . termino exp1
    (32) termino -> . factor termino1
    (47) factor -> . LPAREN expresion RPAREN
    (48) factor -> . factor1
    (49) factor1 -> . PLUS varcte
    (50) factor1 -> . MINUS varcte
    (51) factor1 -> . varcte
    (79) varcte -> . ID varcte1
    (80) varcte -> . CTE_INT
    (81) varcte -> . CTE_FLOAT
    (82) varcte -> . CTE_STRING
    (83) varcte -> . cte_bool
    (89) cte_bool -> . TRUE
    (90) cte_bool -> . FALSE

    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    factor1                        shift and go to state 53
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 46
    exp                            shift and go to state 220
    factor                         shift and go to state 48
    varcte                         shift and go to state 39

state 198

    (39) inicializacion_vector2 -> COMMA varcte . inicializacion_vector2
    (39) inicializacion_vector2 -> . COMMA varcte inicializacion_vector2
    (40) inicializacion_vector2 -> . epsilon
    (128) epsilon -> .

    COMMA           shift and go to state 166
    RBRACKET        reduce using rule 128 (epsilon -> .)

    inicializacion_vector2         shift and go to state 221
    epsilon                        shift and go to state 165

state 199

    (88) varcte2 -> COMMA exp varcte2 .

    RPAREN          reduce using rule 88 (varcte2 -> COMMA exp varcte2 .)


state 200

    (18) parametros2 -> COMMA parametros .

    RPAREN          reduce using rule 18 (parametros2 -> COMMA parametros .)


state 201

    (113) funcion1 -> var_declaracion funcion1 .

    ID              reduce using rule 113 (funcion1 -> var_declaracion funcion1 .)
    IF              reduce using rule 113 (funcion1 -> var_declaracion funcion1 .)
    SWITCH          reduce using rule 113 (funcion1 -> var_declaracion funcion1 .)
    WHILE           reduce using rule 113 (funcion1 -> var_declaracion funcion1 .)
    FOR             reduce using rule 113 (funcion1 -> var_declaracion funcion1 .)
    PRINT           reduce using rule 113 (funcion1 -> var_declaracion funcion1 .)
    INPUT           reduce using rule 113 (funcion1 -> var_declaracion funcion1 .)


state 202

    (119) funcion4 -> tipo ID LPAREN funcion3 RPAREN LCURL funcion1 estatuto . funcion2 RETURN ID RCURL
    (114) funcion2 -> . epsilon
    (115) funcion2 -> . estatuto funcion2
    (128) epsilon -> .
    (52) estatuto -> . asignacion
    (53) estatuto -> . llamada
    (54) estatuto -> . condicion
    (55) estatuto -> . switch
    (56) estatuto -> . while
    (57) estatuto -> . for
    (58) asignacion -> . ID EQUALS asignacion1
    (72) llamada -> . ID LPAREN llamada1 RPAREN
    (73) llamada -> . print
    (74) llamada -> . input
    (96) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (120) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (46) while -> . WHILE LPAREN expresion RPAREN bloque
    (106) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (91) print -> . PRINT LPAREN print1 RPAREN
    (103) input -> . INPUT LPAREN input1 RPAREN

    RETURN          reduce using rule 128 (epsilon -> .)
    ID              shift and go to state 99
    IF              shift and go to state 100
    SWITCH          shift and go to state 93
    WHILE           shift and go to state 88
    FOR             shift and go to state 97
    PRINT           shift and go to state 89
    INPUT           shift and go to state 98

    funcion2                       shift and go to state 222
    estatuto                       shift and go to state 223
    while                          shift and go to state 103
    llamada                        shift and go to state 92
    condicion                      shift and go to state 94
    print                          shift and go to state 95
    input                          shift and go to state 96
    epsilon                        shift and go to state 224
    for                            shift and go to state 90
    asignacion                     shift and go to state 101
    switch                         shift and go to state 102

state 203

    (15) parametros -> VECTOR tipo parametros1 ID parametros2 .

    RPAREN          reduce using rule 15 (parametros -> VECTOR tipo parametros1 ID parametros2 .)


state 204

    (118) funcion4 -> VOID ID LPAREN funcion3 RPAREN LCURL funcion1 estatuto . funcion2 RCURL
    (114) funcion2 -> . epsilon
    (115) funcion2 -> . estatuto funcion2
    (128) epsilon -> .
    (52) estatuto -> . asignacion
    (53) estatuto -> . llamada
    (54) estatuto -> . condicion
    (55) estatuto -> . switch
    (56) estatuto -> . while
    (57) estatuto -> . for
    (58) asignacion -> . ID EQUALS asignacion1
    (72) llamada -> . ID LPAREN llamada1 RPAREN
    (73) llamada -> . print
    (74) llamada -> . input
    (96) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (120) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (46) while -> . WHILE LPAREN expresion RPAREN bloque
    (106) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (91) print -> . PRINT LPAREN print1 RPAREN
    (103) input -> . INPUT LPAREN input1 RPAREN

    RCURL           reduce using rule 128 (epsilon -> .)
    ID              shift and go to state 99
    IF              shift and go to state 100
    SWITCH          shift and go to state 93
    WHILE           shift and go to state 88
    FOR             shift and go to state 97
    PRINT           shift and go to state 89
    INPUT           shift and go to state 98

    funcion2                       shift and go to state 225
    for                            shift and go to state 90
    estatuto                       shift and go to state 223
    while                          shift and go to state 103
    llamada                        shift and go to state 92
    condicion                      shift and go to state 94
    print                          shift and go to state 95
    input                          shift and go to state 96
    epsilon                        shift and go to state 224
    asignacion                     shift and go to state 101
    switch                         shift and go to state 102

state 205

    (46) while -> WHILE LPAREN expresion RPAREN bloque .

    ID              reduce using rule 46 (while -> WHILE LPAREN expresion RPAREN bloque .)
    IF              reduce using rule 46 (while -> WHILE LPAREN expresion RPAREN bloque .)
    SWITCH          reduce using rule 46 (while -> WHILE LPAREN expresion RPAREN bloque .)
    WHILE           reduce using rule 46 (while -> WHILE LPAREN expresion RPAREN bloque .)
    FOR             reduce using rule 46 (while -> WHILE LPAREN expresion RPAREN bloque .)
    PRINT           reduce using rule 46 (while -> WHILE LPAREN expresion RPAREN bloque .)
    INPUT           reduce using rule 46 (while -> WHILE LPAREN expresion RPAREN bloque .)
    RCURL           reduce using rule 46 (while -> WHILE LPAREN expresion RPAREN bloque .)
    RETURN          reduce using rule 46 (while -> WHILE LPAREN expresion RPAREN bloque .)
    CASE            reduce using rule 46 (while -> WHILE LPAREN expresion RPAREN bloque .)
    DEFAULT         reduce using rule 46 (while -> WHILE LPAREN expresion RPAREN bloque .)


state 206

    (25) bloque -> LCURL . estatuto bloque1 RCURL
    (52) estatuto -> . asignacion
    (53) estatuto -> . llamada
    (54) estatuto -> . condicion
    (55) estatuto -> . switch
    (56) estatuto -> . while
    (57) estatuto -> . for
    (58) asignacion -> . ID EQUALS asignacion1
    (72) llamada -> . ID LPAREN llamada1 RPAREN
    (73) llamada -> . print
    (74) llamada -> . input
    (96) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (120) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (46) while -> . WHILE LPAREN expresion RPAREN bloque
    (106) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (91) print -> . PRINT LPAREN print1 RPAREN
    (103) input -> . INPUT LPAREN input1 RPAREN

    ID              shift and go to state 99
    IF              shift and go to state 100
    SWITCH          shift and go to state 93
    WHILE           shift and go to state 88
    FOR             shift and go to state 97
    PRINT           shift and go to state 89
    INPUT           shift and go to state 98

    for                            shift and go to state 90
    estatuto                       shift and go to state 226
    switch                         shift and go to state 102
    llamada                        shift and go to state 92
    condicion                      shift and go to state 94
    print                          shift and go to state 95
    input                          shift and go to state 96
    asignacion                     shift and go to state 101
    while                          shift and go to state 103

state 207

    (95) print2 -> PLUS print1 .

    RPAREN          reduce using rule 95 (print2 -> PLUS print1 .)


state 208

    (124) switch2 -> CASE . varcte COLON switch4 switch2
    (79) varcte -> . ID varcte1
    (80) varcte -> . CTE_INT
    (81) varcte -> . CTE_FLOAT
    (82) varcte -> . CTE_STRING
    (83) varcte -> . cte_bool
    (89) cte_bool -> . TRUE
    (90) cte_bool -> . FALSE

    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    cte_bool                       shift and go to state 51
    varcte                         shift and go to state 227

state 209

    (120) switch -> SWITCH ID switch1 LCURL switch2 . switch3 RCURL
    (125) switch3 -> . DEFAULT COLON switch4

    DEFAULT         shift and go to state 229

    switch3                        shift and go to state 228

state 210

    (123) switch2 -> epsilon .

    DEFAULT         reduce using rule 123 (switch2 -> epsilon .)


state 211

    (122) switch1 -> LBRACKET exp RBRACKET .

    LCURL           reduce using rule 122 (switch1 -> LBRACKET exp RBRACKET .)


state 212

    (106) for -> FOR CTE_INT TO CTE_INT BY . LPAREN for1 CTE_INT RPAREN bloque

    LPAREN          shift and go to state 230


state 213

    (85) varcte1 -> LPAREN exp . varcte2 RPAREN
    (76) llamada1 -> exp . llamada2
    (87) varcte2 -> . epsilon
    (88) varcte2 -> . COMMA exp varcte2
    (77) llamada2 -> . epsilon
    (78) llamada2 -> . COMMA exp llamada2
    (128) epsilon -> .

    COMMA           shift and go to state 232
    RPAREN          reduce using rule 128 (epsilon -> .)

    llamada2                       shift and go to state 190
    epsilon                        shift and go to state 231
    varcte2                        shift and go to state 136

state 214

    (78) llamada2 -> COMMA exp . llamada2
    (77) llamada2 -> . epsilon
    (78) llamada2 -> . COMMA exp llamada2
    (128) epsilon -> .

    COMMA           shift and go to state 192
    RPAREN          reduce using rule 128 (epsilon -> .)

    llamada2                       shift and go to state 233
    epsilon                        shift and go to state 191

state 215

    (96) condicion -> IF LPAREN expresion_logica RPAREN condicion1 . condicion2 condicion3
    (99) condicion2 -> . ELSEIF condicion1 condicion2
    (100) condicion2 -> . epsilon
    (128) epsilon -> .

    ELSEIF          shift and go to state 236
    ELSE            reduce using rule 128 (epsilon -> .)
    ID              reduce using rule 128 (epsilon -> .)
    IF              reduce using rule 128 (epsilon -> .)
    SWITCH          reduce using rule 128 (epsilon -> .)
    WHILE           reduce using rule 128 (epsilon -> .)
    FOR             reduce using rule 128 (epsilon -> .)
    PRINT           reduce using rule 128 (epsilon -> .)
    INPUT           reduce using rule 128 (epsilon -> .)
    RCURL           reduce using rule 128 (epsilon -> .)
    RETURN          reduce using rule 128 (epsilon -> .)
    CASE            reduce using rule 128 (epsilon -> .)
    DEFAULT         reduce using rule 128 (epsilon -> .)

    epsilon                        shift and go to state 234
    condicion2                     shift and go to state 235

state 216

    (97) condicion1 -> bloque .

    ELSEIF          reduce using rule 97 (condicion1 -> bloque .)
    ELSE            reduce using rule 97 (condicion1 -> bloque .)
    ID              reduce using rule 97 (condicion1 -> bloque .)
    IF              reduce using rule 97 (condicion1 -> bloque .)
    SWITCH          reduce using rule 97 (condicion1 -> bloque .)
    WHILE           reduce using rule 97 (condicion1 -> bloque .)
    FOR             reduce using rule 97 (condicion1 -> bloque .)
    PRINT           reduce using rule 97 (condicion1 -> bloque .)
    INPUT           reduce using rule 97 (condicion1 -> bloque .)
    RCURL           reduce using rule 97 (condicion1 -> bloque .)
    RETURN          reduce using rule 97 (condicion1 -> bloque .)
    CASE            reduce using rule 97 (condicion1 -> bloque .)
    DEFAULT         reduce using rule 97 (condicion1 -> bloque .)


state 217

    (98) condicion1 -> LCURL . bloque RCURL
    (25) bloque -> LCURL . estatuto bloque1 RCURL
    (25) bloque -> . LCURL estatuto bloque1 RCURL
    (52) estatuto -> . asignacion
    (53) estatuto -> . llamada
    (54) estatuto -> . condicion
    (55) estatuto -> . switch
    (56) estatuto -> . while
    (57) estatuto -> . for
    (58) asignacion -> . ID EQUALS asignacion1
    (72) llamada -> . ID LPAREN llamada1 RPAREN
    (73) llamada -> . print
    (74) llamada -> . input
    (96) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (120) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (46) while -> . WHILE LPAREN expresion RPAREN bloque
    (106) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (91) print -> . PRINT LPAREN print1 RPAREN
    (103) input -> . INPUT LPAREN input1 RPAREN

    LCURL           shift and go to state 206
    ID              shift and go to state 99
    IF              shift and go to state 100
    SWITCH          shift and go to state 93
    WHILE           shift and go to state 88
    FOR             shift and go to state 97
    PRINT           shift and go to state 89
    INPUT           shift and go to state 98

    bloque                         shift and go to state 237
    for                            shift and go to state 90
    estatuto                       shift and go to state 226
    switch                         shift and go to state 102
    llamada                        shift and go to state 92
    condicion                      shift and go to state 94
    print                          shift and go to state 95
    input                          shift and go to state 96
    asignacion                     shift and go to state 101
    while                          shift and go to state 103

state 218

    (69) expresion_logica1 -> AND exp .

    LESS            reduce using rule 69 (expresion_logica1 -> AND exp .)
    GREATER         reduce using rule 69 (expresion_logica1 -> AND exp .)
    DOUBLE_EQUAL    reduce using rule 69 (expresion_logica1 -> AND exp .)
    DIFF            reduce using rule 69 (expresion_logica1 -> AND exp .)
    RPAREN          reduce using rule 69 (expresion_logica1 -> AND exp .)


state 219

    (68) expresion_logica -> exp expresion_logica1 expresion .

    RPAREN          reduce using rule 68 (expresion_logica -> exp expresion_logica1 expresion .)


state 220

    (71) expresion_logica1 -> OR exp .

    LESS            reduce using rule 71 (expresion_logica1 -> OR exp .)
    GREATER         reduce using rule 71 (expresion_logica1 -> OR exp .)
    DOUBLE_EQUAL    reduce using rule 71 (expresion_logica1 -> OR exp .)
    DIFF            reduce using rule 71 (expresion_logica1 -> OR exp .)
    RPAREN          reduce using rule 71 (expresion_logica1 -> OR exp .)


state 221

    (39) inicializacion_vector2 -> COMMA varcte inicializacion_vector2 .

    RBRACKET        reduce using rule 39 (inicializacion_vector2 -> COMMA varcte inicializacion_vector2 .)


state 222

    (119) funcion4 -> tipo ID LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 . RETURN ID RCURL

    RETURN          shift and go to state 238


state 223

    (115) funcion2 -> estatuto . funcion2
    (114) funcion2 -> . epsilon
    (115) funcion2 -> . estatuto funcion2
    (128) epsilon -> .
    (52) estatuto -> . asignacion
    (53) estatuto -> . llamada
    (54) estatuto -> . condicion
    (55) estatuto -> . switch
    (56) estatuto -> . while
    (57) estatuto -> . for
    (58) asignacion -> . ID EQUALS asignacion1
    (72) llamada -> . ID LPAREN llamada1 RPAREN
    (73) llamada -> . print
    (74) llamada -> . input
    (96) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (120) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (46) while -> . WHILE LPAREN expresion RPAREN bloque
    (106) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (91) print -> . PRINT LPAREN print1 RPAREN
    (103) input -> . INPUT LPAREN input1 RPAREN

    RETURN          reduce using rule 128 (epsilon -> .)
    RCURL           reduce using rule 128 (epsilon -> .)
    ID              shift and go to state 99
    IF              shift and go to state 100
    SWITCH          shift and go to state 93
    WHILE           shift and go to state 88
    FOR             shift and go to state 97
    PRINT           shift and go to state 89
    INPUT           shift and go to state 98

    funcion2                       shift and go to state 239
    for                            shift and go to state 90
    estatuto                       shift and go to state 223
    while                          shift and go to state 103
    llamada                        shift and go to state 92
    condicion                      shift and go to state 94
    print                          shift and go to state 95
    input                          shift and go to state 96
    epsilon                        shift and go to state 224
    asignacion                     shift and go to state 101
    switch                         shift and go to state 102

state 224

    (114) funcion2 -> epsilon .

    RETURN          reduce using rule 114 (funcion2 -> epsilon .)
    RCURL           reduce using rule 114 (funcion2 -> epsilon .)


state 225

    (118) funcion4 -> VOID ID LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 . RCURL

    RCURL           shift and go to state 240


state 226

    (25) bloque -> LCURL estatuto . bloque1 RCURL
    (26) bloque1 -> . estatuto bloque1
    (27) bloque1 -> . epsilon
    (52) estatuto -> . asignacion
    (53) estatuto -> . llamada
    (54) estatuto -> . condicion
    (55) estatuto -> . switch
    (56) estatuto -> . while
    (57) estatuto -> . for
    (128) epsilon -> .
    (58) asignacion -> . ID EQUALS asignacion1
    (72) llamada -> . ID LPAREN llamada1 RPAREN
    (73) llamada -> . print
    (74) llamada -> . input
    (96) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (120) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (46) while -> . WHILE LPAREN expresion RPAREN bloque
    (106) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (91) print -> . PRINT LPAREN print1 RPAREN
    (103) input -> . INPUT LPAREN input1 RPAREN

    RCURL           reduce using rule 128 (epsilon -> .)
    ID              shift and go to state 99
    IF              shift and go to state 100
    SWITCH          shift and go to state 93
    WHILE           shift and go to state 88
    FOR             shift and go to state 97
    PRINT           shift and go to state 89
    INPUT           shift and go to state 98

    for                            shift and go to state 90
    estatuto                       shift and go to state 241
    switch                         shift and go to state 102
    llamada                        shift and go to state 92
    condicion                      shift and go to state 94
    print                          shift and go to state 95
    input                          shift and go to state 96
    epsilon                        shift and go to state 242
    bloque1                        shift and go to state 243
    asignacion                     shift and go to state 101
    while                          shift and go to state 103

state 227

    (124) switch2 -> CASE varcte . COLON switch4 switch2

    COLON           shift and go to state 244


state 228

    (120) switch -> SWITCH ID switch1 LCURL switch2 switch3 . RCURL

    RCURL           shift and go to state 245


state 229

    (125) switch3 -> DEFAULT . COLON switch4

    COLON           shift and go to state 246


state 230

    (106) for -> FOR CTE_INT TO CTE_INT BY LPAREN . for1 CTE_INT RPAREN bloque
    (107) for1 -> . PLUS
    (108) for1 -> . TIMES
    (109) for1 -> . DIVIDE
    (110) for1 -> . MINUS

    PLUS            shift and go to state 249
    TIMES           shift and go to state 248
    DIVIDE          shift and go to state 247
    MINUS           shift and go to state 251

    for1                           shift and go to state 250

state 231

    (87) varcte2 -> epsilon .
    (77) llamada2 -> epsilon .

  ! reduce/reduce conflict for RPAREN resolved using rule 77 (llamada2 -> epsilon .)
    RPAREN          reduce using rule 77 (llamada2 -> epsilon .)

  ! RPAREN          [ reduce using rule 87 (varcte2 -> epsilon .) ]


state 232

    (88) varcte2 -> COMMA . exp varcte2
    (78) llamada2 -> COMMA . exp llamada2
    (28) exp -> . termino exp1
    (32) termino -> . factor termino1
    (47) factor -> . LPAREN expresion RPAREN
    (48) factor -> . factor1
    (49) factor1 -> . PLUS varcte
    (50) factor1 -> . MINUS varcte
    (51) factor1 -> . varcte
    (79) varcte -> . ID varcte1
    (80) varcte -> . CTE_INT
    (81) varcte -> . CTE_FLOAT
    (82) varcte -> . CTE_STRING
    (83) varcte -> . cte_bool
    (89) cte_bool -> . TRUE
    (90) cte_bool -> . FALSE

    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    factor1                        shift and go to state 53
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 46
    exp                            shift and go to state 252
    factor                         shift and go to state 48
    varcte                         shift and go to state 39

state 233

    (78) llamada2 -> COMMA exp llamada2 .

    RPAREN          reduce using rule 78 (llamada2 -> COMMA exp llamada2 .)


state 234

    (100) condicion2 -> epsilon .

    ELSE            reduce using rule 100 (condicion2 -> epsilon .)
    ID              reduce using rule 100 (condicion2 -> epsilon .)
    IF              reduce using rule 100 (condicion2 -> epsilon .)
    SWITCH          reduce using rule 100 (condicion2 -> epsilon .)
    WHILE           reduce using rule 100 (condicion2 -> epsilon .)
    FOR             reduce using rule 100 (condicion2 -> epsilon .)
    PRINT           reduce using rule 100 (condicion2 -> epsilon .)
    INPUT           reduce using rule 100 (condicion2 -> epsilon .)
    RCURL           reduce using rule 100 (condicion2 -> epsilon .)
    RETURN          reduce using rule 100 (condicion2 -> epsilon .)
    CASE            reduce using rule 100 (condicion2 -> epsilon .)
    DEFAULT         reduce using rule 100 (condicion2 -> epsilon .)


state 235

    (96) condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 . condicion3
    (101) condicion3 -> . ELSE condicion1
    (102) condicion3 -> . epsilon
    (128) epsilon -> .

    ELSE            shift and go to state 254
    ID              reduce using rule 128 (epsilon -> .)
    IF              reduce using rule 128 (epsilon -> .)
    SWITCH          reduce using rule 128 (epsilon -> .)
    WHILE           reduce using rule 128 (epsilon -> .)
    FOR             reduce using rule 128 (epsilon -> .)
    PRINT           reduce using rule 128 (epsilon -> .)
    INPUT           reduce using rule 128 (epsilon -> .)
    RCURL           reduce using rule 128 (epsilon -> .)
    RETURN          reduce using rule 128 (epsilon -> .)
    CASE            reduce using rule 128 (epsilon -> .)
    DEFAULT         reduce using rule 128 (epsilon -> .)

    epsilon                        shift and go to state 253
    condicion3                     shift and go to state 255

state 236

    (99) condicion2 -> ELSEIF . condicion1 condicion2
    (97) condicion1 -> . bloque
    (98) condicion1 -> . LCURL bloque RCURL
    (25) bloque -> . LCURL estatuto bloque1 RCURL

    LCURL           shift and go to state 217

    bloque                         shift and go to state 216
    condicion1                     shift and go to state 256

state 237

    (98) condicion1 -> LCURL bloque . RCURL

    RCURL           shift and go to state 257


state 238

    (119) funcion4 -> tipo ID LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 RETURN . ID RCURL

    ID              shift and go to state 258


state 239

    (115) funcion2 -> estatuto funcion2 .

    RETURN          reduce using rule 115 (funcion2 -> estatuto funcion2 .)
    RCURL           reduce using rule 115 (funcion2 -> estatuto funcion2 .)


state 240

    (118) funcion4 -> VOID ID LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 RCURL .

    FUNCTION        reduce using rule 118 (funcion4 -> VOID ID LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 RCURL .)
    MAIN            reduce using rule 118 (funcion4 -> VOID ID LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 RCURL .)


state 241

    (26) bloque1 -> estatuto . bloque1
    (26) bloque1 -> . estatuto bloque1
    (27) bloque1 -> . epsilon
    (52) estatuto -> . asignacion
    (53) estatuto -> . llamada
    (54) estatuto -> . condicion
    (55) estatuto -> . switch
    (56) estatuto -> . while
    (57) estatuto -> . for
    (128) epsilon -> .
    (58) asignacion -> . ID EQUALS asignacion1
    (72) llamada -> . ID LPAREN llamada1 RPAREN
    (73) llamada -> . print
    (74) llamada -> . input
    (96) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (120) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (46) while -> . WHILE LPAREN expresion RPAREN bloque
    (106) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (91) print -> . PRINT LPAREN print1 RPAREN
    (103) input -> . INPUT LPAREN input1 RPAREN

    RCURL           reduce using rule 128 (epsilon -> .)
    ID              shift and go to state 99
    IF              shift and go to state 100
    SWITCH          shift and go to state 93
    WHILE           shift and go to state 88
    FOR             shift and go to state 97
    PRINT           shift and go to state 89
    INPUT           shift and go to state 98

    for                            shift and go to state 90
    estatuto                       shift and go to state 241
    switch                         shift and go to state 102
    llamada                        shift and go to state 92
    condicion                      shift and go to state 94
    print                          shift and go to state 95
    input                          shift and go to state 96
    epsilon                        shift and go to state 242
    bloque1                        shift and go to state 259
    asignacion                     shift and go to state 101
    while                          shift and go to state 103

state 242

    (27) bloque1 -> epsilon .

    RCURL           reduce using rule 27 (bloque1 -> epsilon .)


state 243

    (25) bloque -> LCURL estatuto bloque1 . RCURL

    RCURL           shift and go to state 260


state 244

    (124) switch2 -> CASE varcte COLON . switch4 switch2
    (126) switch4 -> . LCURL PASS RCURL
    (127) switch4 -> . estatuto
    (52) estatuto -> . asignacion
    (53) estatuto -> . llamada
    (54) estatuto -> . condicion
    (55) estatuto -> . switch
    (56) estatuto -> . while
    (57) estatuto -> . for
    (58) asignacion -> . ID EQUALS asignacion1
    (72) llamada -> . ID LPAREN llamada1 RPAREN
    (73) llamada -> . print
    (74) llamada -> . input
    (96) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (120) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (46) while -> . WHILE LPAREN expresion RPAREN bloque
    (106) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (91) print -> . PRINT LPAREN print1 RPAREN
    (103) input -> . INPUT LPAREN input1 RPAREN

    LCURL           shift and go to state 261
    ID              shift and go to state 99
    IF              shift and go to state 100
    SWITCH          shift and go to state 93
    WHILE           shift and go to state 88
    FOR             shift and go to state 97
    PRINT           shift and go to state 89
    INPUT           shift and go to state 98

    for                            shift and go to state 90
    estatuto                       shift and go to state 262
    switch                         shift and go to state 102
    llamada                        shift and go to state 92
    condicion                      shift and go to state 94
    print                          shift and go to state 95
    input                          shift and go to state 96
    asignacion                     shift and go to state 101
    switch4                        shift and go to state 263
    while                          shift and go to state 103

state 245

    (120) switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .

    ID              reduce using rule 120 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    IF              reduce using rule 120 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    SWITCH          reduce using rule 120 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    WHILE           reduce using rule 120 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    FOR             reduce using rule 120 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    PRINT           reduce using rule 120 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    INPUT           reduce using rule 120 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    RCURL           reduce using rule 120 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    RETURN          reduce using rule 120 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    CASE            reduce using rule 120 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    DEFAULT         reduce using rule 120 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)


state 246

    (125) switch3 -> DEFAULT COLON . switch4
    (126) switch4 -> . LCURL PASS RCURL
    (127) switch4 -> . estatuto
    (52) estatuto -> . asignacion
    (53) estatuto -> . llamada
    (54) estatuto -> . condicion
    (55) estatuto -> . switch
    (56) estatuto -> . while
    (57) estatuto -> . for
    (58) asignacion -> . ID EQUALS asignacion1
    (72) llamada -> . ID LPAREN llamada1 RPAREN
    (73) llamada -> . print
    (74) llamada -> . input
    (96) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (120) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (46) while -> . WHILE LPAREN expresion RPAREN bloque
    (106) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (91) print -> . PRINT LPAREN print1 RPAREN
    (103) input -> . INPUT LPAREN input1 RPAREN

    LCURL           shift and go to state 261
    ID              shift and go to state 99
    IF              shift and go to state 100
    SWITCH          shift and go to state 93
    WHILE           shift and go to state 88
    FOR             shift and go to state 97
    PRINT           shift and go to state 89
    INPUT           shift and go to state 98

    for                            shift and go to state 90
    estatuto                       shift and go to state 262
    switch                         shift and go to state 102
    llamada                        shift and go to state 92
    condicion                      shift and go to state 94
    print                          shift and go to state 95
    input                          shift and go to state 96
    asignacion                     shift and go to state 101
    switch4                        shift and go to state 264
    while                          shift and go to state 103

state 247

    (109) for1 -> DIVIDE .

    CTE_INT         reduce using rule 109 (for1 -> DIVIDE .)


state 248

    (108) for1 -> TIMES .

    CTE_INT         reduce using rule 108 (for1 -> TIMES .)


state 249

    (107) for1 -> PLUS .

    CTE_INT         reduce using rule 107 (for1 -> PLUS .)


state 250

    (106) for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 . CTE_INT RPAREN bloque

    CTE_INT         shift and go to state 265


state 251

    (110) for1 -> MINUS .

    CTE_INT         reduce using rule 110 (for1 -> MINUS .)


state 252

    (88) varcte2 -> COMMA exp . varcte2
    (78) llamada2 -> COMMA exp . llamada2
    (87) varcte2 -> . epsilon
    (88) varcte2 -> . COMMA exp varcte2
    (77) llamada2 -> . epsilon
    (78) llamada2 -> . COMMA exp llamada2
    (128) epsilon -> .

    COMMA           shift and go to state 232
    RPAREN          reduce using rule 128 (epsilon -> .)

    llamada2                       shift and go to state 233
    epsilon                        shift and go to state 231
    varcte2                        shift and go to state 199

state 253

    (102) condicion3 -> epsilon .

    ID              reduce using rule 102 (condicion3 -> epsilon .)
    IF              reduce using rule 102 (condicion3 -> epsilon .)
    SWITCH          reduce using rule 102 (condicion3 -> epsilon .)
    WHILE           reduce using rule 102 (condicion3 -> epsilon .)
    FOR             reduce using rule 102 (condicion3 -> epsilon .)
    PRINT           reduce using rule 102 (condicion3 -> epsilon .)
    INPUT           reduce using rule 102 (condicion3 -> epsilon .)
    RCURL           reduce using rule 102 (condicion3 -> epsilon .)
    RETURN          reduce using rule 102 (condicion3 -> epsilon .)
    CASE            reduce using rule 102 (condicion3 -> epsilon .)
    DEFAULT         reduce using rule 102 (condicion3 -> epsilon .)


state 254

    (101) condicion3 -> ELSE . condicion1
    (97) condicion1 -> . bloque
    (98) condicion1 -> . LCURL bloque RCURL
    (25) bloque -> . LCURL estatuto bloque1 RCURL

    LCURL           shift and go to state 217

    bloque                         shift and go to state 216
    condicion1                     shift and go to state 266

state 255

    (96) condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .

    ID              reduce using rule 96 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    IF              reduce using rule 96 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    SWITCH          reduce using rule 96 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    WHILE           reduce using rule 96 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    FOR             reduce using rule 96 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    PRINT           reduce using rule 96 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    INPUT           reduce using rule 96 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    RCURL           reduce using rule 96 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    CASE            reduce using rule 96 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    DEFAULT         reduce using rule 96 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    RETURN          reduce using rule 96 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)


state 256

    (99) condicion2 -> ELSEIF condicion1 . condicion2
    (99) condicion2 -> . ELSEIF condicion1 condicion2
    (100) condicion2 -> . epsilon
    (128) epsilon -> .

    ELSEIF          shift and go to state 236
    ELSE            reduce using rule 128 (epsilon -> .)
    ID              reduce using rule 128 (epsilon -> .)
    IF              reduce using rule 128 (epsilon -> .)
    SWITCH          reduce using rule 128 (epsilon -> .)
    WHILE           reduce using rule 128 (epsilon -> .)
    FOR             reduce using rule 128 (epsilon -> .)
    PRINT           reduce using rule 128 (epsilon -> .)
    INPUT           reduce using rule 128 (epsilon -> .)
    RCURL           reduce using rule 128 (epsilon -> .)
    RETURN          reduce using rule 128 (epsilon -> .)
    CASE            reduce using rule 128 (epsilon -> .)
    DEFAULT         reduce using rule 128 (epsilon -> .)

    epsilon                        shift and go to state 234
    condicion2                     shift and go to state 267

state 257

    (98) condicion1 -> LCURL bloque RCURL .

    ELSEIF          reduce using rule 98 (condicion1 -> LCURL bloque RCURL .)
    ELSE            reduce using rule 98 (condicion1 -> LCURL bloque RCURL .)
    ID              reduce using rule 98 (condicion1 -> LCURL bloque RCURL .)
    IF              reduce using rule 98 (condicion1 -> LCURL bloque RCURL .)
    SWITCH          reduce using rule 98 (condicion1 -> LCURL bloque RCURL .)
    WHILE           reduce using rule 98 (condicion1 -> LCURL bloque RCURL .)
    FOR             reduce using rule 98 (condicion1 -> LCURL bloque RCURL .)
    PRINT           reduce using rule 98 (condicion1 -> LCURL bloque RCURL .)
    INPUT           reduce using rule 98 (condicion1 -> LCURL bloque RCURL .)
    RCURL           reduce using rule 98 (condicion1 -> LCURL bloque RCURL .)
    RETURN          reduce using rule 98 (condicion1 -> LCURL bloque RCURL .)
    CASE            reduce using rule 98 (condicion1 -> LCURL bloque RCURL .)
    DEFAULT         reduce using rule 98 (condicion1 -> LCURL bloque RCURL .)


state 258

    (119) funcion4 -> tipo ID LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 RETURN ID . RCURL

    RCURL           shift and go to state 268


state 259

    (26) bloque1 -> estatuto bloque1 .

    RCURL           reduce using rule 26 (bloque1 -> estatuto bloque1 .)


state 260

    (25) bloque -> LCURL estatuto bloque1 RCURL .

    ELSEIF          reduce using rule 25 (bloque -> LCURL estatuto bloque1 RCURL .)
    ELSE            reduce using rule 25 (bloque -> LCURL estatuto bloque1 RCURL .)
    ID              reduce using rule 25 (bloque -> LCURL estatuto bloque1 RCURL .)
    IF              reduce using rule 25 (bloque -> LCURL estatuto bloque1 RCURL .)
    SWITCH          reduce using rule 25 (bloque -> LCURL estatuto bloque1 RCURL .)
    WHILE           reduce using rule 25 (bloque -> LCURL estatuto bloque1 RCURL .)
    FOR             reduce using rule 25 (bloque -> LCURL estatuto bloque1 RCURL .)
    PRINT           reduce using rule 25 (bloque -> LCURL estatuto bloque1 RCURL .)
    INPUT           reduce using rule 25 (bloque -> LCURL estatuto bloque1 RCURL .)
    RCURL           reduce using rule 25 (bloque -> LCURL estatuto bloque1 RCURL .)
    RETURN          reduce using rule 25 (bloque -> LCURL estatuto bloque1 RCURL .)
    CASE            reduce using rule 25 (bloque -> LCURL estatuto bloque1 RCURL .)
    DEFAULT         reduce using rule 25 (bloque -> LCURL estatuto bloque1 RCURL .)


state 261

    (126) switch4 -> LCURL . PASS RCURL

    PASS            shift and go to state 269


state 262

    (127) switch4 -> estatuto .

    CASE            reduce using rule 127 (switch4 -> estatuto .)
    DEFAULT         reduce using rule 127 (switch4 -> estatuto .)
    RCURL           reduce using rule 127 (switch4 -> estatuto .)


state 263

    (124) switch2 -> CASE varcte COLON switch4 . switch2
    (123) switch2 -> . epsilon
    (124) switch2 -> . CASE varcte COLON switch4 switch2
    (128) epsilon -> .

    CASE            shift and go to state 208
    DEFAULT         reduce using rule 128 (epsilon -> .)

    switch2                        shift and go to state 270
    epsilon                        shift and go to state 210

state 264

    (125) switch3 -> DEFAULT COLON switch4 .

    RCURL           reduce using rule 125 (switch3 -> DEFAULT COLON switch4 .)


state 265

    (106) for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT . RPAREN bloque

    RPAREN          shift and go to state 271


state 266

    (101) condicion3 -> ELSE condicion1 .

    ID              reduce using rule 101 (condicion3 -> ELSE condicion1 .)
    IF              reduce using rule 101 (condicion3 -> ELSE condicion1 .)
    SWITCH          reduce using rule 101 (condicion3 -> ELSE condicion1 .)
    WHILE           reduce using rule 101 (condicion3 -> ELSE condicion1 .)
    FOR             reduce using rule 101 (condicion3 -> ELSE condicion1 .)
    PRINT           reduce using rule 101 (condicion3 -> ELSE condicion1 .)
    INPUT           reduce using rule 101 (condicion3 -> ELSE condicion1 .)
    RCURL           reduce using rule 101 (condicion3 -> ELSE condicion1 .)
    RETURN          reduce using rule 101 (condicion3 -> ELSE condicion1 .)
    CASE            reduce using rule 101 (condicion3 -> ELSE condicion1 .)
    DEFAULT         reduce using rule 101 (condicion3 -> ELSE condicion1 .)


state 267

    (99) condicion2 -> ELSEIF condicion1 condicion2 .

    ELSE            reduce using rule 99 (condicion2 -> ELSEIF condicion1 condicion2 .)
    ID              reduce using rule 99 (condicion2 -> ELSEIF condicion1 condicion2 .)
    IF              reduce using rule 99 (condicion2 -> ELSEIF condicion1 condicion2 .)
    SWITCH          reduce using rule 99 (condicion2 -> ELSEIF condicion1 condicion2 .)
    WHILE           reduce using rule 99 (condicion2 -> ELSEIF condicion1 condicion2 .)
    FOR             reduce using rule 99 (condicion2 -> ELSEIF condicion1 condicion2 .)
    PRINT           reduce using rule 99 (condicion2 -> ELSEIF condicion1 condicion2 .)
    INPUT           reduce using rule 99 (condicion2 -> ELSEIF condicion1 condicion2 .)
    RCURL           reduce using rule 99 (condicion2 -> ELSEIF condicion1 condicion2 .)
    RETURN          reduce using rule 99 (condicion2 -> ELSEIF condicion1 condicion2 .)
    CASE            reduce using rule 99 (condicion2 -> ELSEIF condicion1 condicion2 .)
    DEFAULT         reduce using rule 99 (condicion2 -> ELSEIF condicion1 condicion2 .)


state 268

    (119) funcion4 -> tipo ID LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 RETURN ID RCURL .

    FUNCTION        reduce using rule 119 (funcion4 -> tipo ID LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 RETURN ID RCURL .)
    MAIN            reduce using rule 119 (funcion4 -> tipo ID LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 RETURN ID RCURL .)


state 269

    (126) switch4 -> LCURL PASS . RCURL

    RCURL           shift and go to state 272


state 270

    (124) switch2 -> CASE varcte COLON switch4 switch2 .

    DEFAULT         reduce using rule 124 (switch2 -> CASE varcte COLON switch4 switch2 .)


state 271

    (106) for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN . bloque
    (25) bloque -> . LCURL estatuto bloque1 RCURL

    LCURL           shift and go to state 206

    bloque                         shift and go to state 273

state 272

    (126) switch4 -> LCURL PASS RCURL .

    CASE            reduce using rule 126 (switch4 -> LCURL PASS RCURL .)
    DEFAULT         reduce using rule 126 (switch4 -> LCURL PASS RCURL .)
    RCURL           reduce using rule 126 (switch4 -> LCURL PASS RCURL .)


state 273

    (106) for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .

    ID              reduce using rule 106 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    IF              reduce using rule 106 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    SWITCH          reduce using rule 106 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    WHILE           reduce using rule 106 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    FOR             reduce using rule 106 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    PRINT           reduce using rule 106 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    INPUT           reduce using rule 106 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    RCURL           reduce using rule 106 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    RETURN          reduce using rule 106 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    CASE            reduce using rule 106 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    DEFAULT         reduce using rule 106 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 231 resolved using rule (llamada2 -> epsilon)
WARNING: rejected rule (varcte2 -> epsilon) in state 231
