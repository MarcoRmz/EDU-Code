Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> START programa1 programa2 main END
Rule 2     programa1 -> var_declaracion programa1
Rule 3     programa1 -> epsilon
Rule 4     programa2 -> funcion programa2
Rule 5     programa2 -> epsilon
Rule 6     var_declaracion -> tipo var_declaracion1
Rule 7     var_declaracion -> VECTOR tipo var_declaracion2
Rule 8     var_declaracion1 -> ID declareVar var_declaracion3
Rule 9     var_declaracion2 -> ID declareVar2 var_declaracion4
Rule 10    var_declaracion3 -> epsilon
Rule 11    var_declaracion3 -> inicializacion
Rule 12    var_declaracion4 -> epsilon
Rule 13    var_declaracion4 -> inicializacion_vector
Rule 14    declareVar -> <empty>
Rule 15    declareVar2 -> <empty>
Rule 16    parametros -> tipo parametros1 ID parametros2
Rule 17    parametros -> VECTOR tipo parametros1 ID parametros2
Rule 18    parametros1 -> AMPERSON
Rule 19    parametros1 -> epsilon
Rule 20    parametros2 -> COMMA parametros
Rule 21    parametros2 -> epsilon
Rule 22    inicializacion -> EQUALS exp
Rule 23    tipo -> INT
Rule 24    tipo -> FLOAT
Rule 25    tipo -> BOOL
Rule 26    tipo -> STRING
Rule 27    bloque -> LCURL estatuto bloque1 RCURL
Rule 28    bloque1 -> estatuto bloque1
Rule 29    bloque1 -> epsilon
Rule 30    exp -> termino checkEXPPOper exp1
Rule 31    checkEXPPOper -> <empty>
Rule 32    exp1 -> PLUS exp
Rule 33    exp1 -> MINUS exp
Rule 34    exp1 -> epsilon
Rule 35    termino -> factor checkTERMPOper termino1
Rule 36    checkTERMPOper -> <empty>
Rule 37    termino1 -> TIMES termino
Rule 38    termino1 -> DIVIDE termino
Rule 39    termino1 -> epsilon
Rule 40    inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET
Rule 41    inicializacion_vector1 -> varcte inicializacion_vector2
Rule 42    inicializacion_vector1 -> epsilon
Rule 43    inicializacion_vector2 -> COMMA varcte inicializacion_vector2
Rule 44    inicializacion_vector2 -> epsilon
Rule 45    main -> MAIN declareMain LCURL main1 estatuto main2 RCURL
Rule 46    declareMain -> <empty>
Rule 47    main1 -> var_declaracion main1
Rule 48    main1 -> epsilon
Rule 49    main2 -> estatuto main2
Rule 50    main2 -> epsilon
Rule 51    while -> WHILE LPAREN expresion RPAREN bloque
Rule 52    factor -> LPAREN factorAddFakeCover expresion RPAREN
Rule 53    factor -> factor1
Rule 54    factorAddFakeCover -> <empty>
Rule 55    factor1 -> PLUS varcte
Rule 56    factor1 -> MINUS varcte
Rule 57    factor1 -> varcte
Rule 58    estatuto -> asignacion
Rule 59    estatuto -> llamada
Rule 60    estatuto -> condicion
Rule 61    estatuto -> switch
Rule 62    estatuto -> while
Rule 63    estatuto -> for
Rule 64    asignacion -> ID EQUALS asignacion1
Rule 65    asignacion1 -> exp
Rule 66    asignacion1 -> llamada
Rule 67    expresion -> expresion1
Rule 68    expresion1 -> epsilon
Rule 69    expresion1 -> expresion2 exp
Rule 70    expresion2 -> LESS
Rule 71    expresion2 -> GREATER
Rule 72    expresion2 -> DOUBLE_EQUAL
Rule 73    expresion2 -> DIFF
Rule 74    expresion_logica -> exp expresion_logica1 expresion
Rule 75    expresion_logica1 -> AND exp
Rule 76    expresion_logica1 -> epsilon
Rule 77    expresion_logica1 -> OR exp
Rule 78    llamada -> ID LPAREN llamada1 RPAREN
Rule 79    llamada -> print
Rule 80    llamada -> input
Rule 81    llamada1 -> epsilon
Rule 82    llamada1 -> exp llamada2
Rule 83    llamada2 -> epsilon
Rule 84    llamada2 -> COMMA exp llamada2
Rule 85    varcte -> ID varcte1
Rule 86    varcte -> CTE_INT tipoINT
Rule 87    varcte -> CTE_FLOAT tipoFLOAT
Rule 88    varcte -> CTE_STRING tipoSTRING
Rule 89    varcte -> cte_bool
Rule 90    tipoINT -> <empty>
Rule 91    tipoFLOAT -> <empty>
Rule 92    tipoSTRING -> <empty>
Rule 93    varcte1 -> epsilon
Rule 94    varcte1 -> LPAREN exp varcte2 RPAREN
Rule 95    varcte1 -> LBRACKET exp RBRACKET
Rule 96    varcte2 -> epsilon
Rule 97    varcte2 -> COMMA exp varcte2
Rule 98    cte_bool -> TRUE
Rule 99    cte_bool -> FALSE
Rule 100   print -> PRINT LPAREN print1 RPAREN
Rule 101   print1 -> CTE_STRING print2
Rule 102   print1 -> ID print2
Rule 103   print2 -> epsilon
Rule 104   print2 -> PLUS print1
Rule 105   condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
Rule 106   condicion1 -> bloque
Rule 107   condicion1 -> LCURL bloque RCURL
Rule 108   condicion2 -> ELSEIF condicion1 condicion2
Rule 109   condicion2 -> epsilon
Rule 110   condicion3 -> ELSE condicion1
Rule 111   condicion3 -> epsilon
Rule 112   input -> INPUT LPAREN input1 RPAREN
Rule 113   input1 -> CTE_STRING
Rule 114   input1 -> epsilon
Rule 115   for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
Rule 116   for1 -> PLUS
Rule 117   for1 -> TIMES
Rule 118   for1 -> DIVIDE
Rule 119   for1 -> MINUS
Rule 120   funcion -> FUNCTION funcion4
Rule 121   funcion1 -> epsilon
Rule 122   funcion1 -> var_declaracion funcion1
Rule 123   funcion2 -> epsilon
Rule 124   funcion2 -> estatuto funcion2
Rule 125   funcion3 -> parametros
Rule 126   funcion3 -> epsilon
Rule 127   funcion4 -> VOID funcion5
Rule 128   funcion4 -> tipo funcion5
Rule 129   funcion5 -> ID declareFunc LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 funcion6
Rule 130   declareFunc -> <empty>
Rule 131   funcion6 -> RCURL
Rule 132   funcion6 -> RETURN ID RCURL
Rule 133   switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL
Rule 134   switch1 -> epsilon
Rule 135   switch1 -> LBRACKET exp RBRACKET
Rule 136   switch2 -> epsilon
Rule 137   switch2 -> CASE varcte COLON switch4 switch2
Rule 138   switch3 -> DEFAULT COLON switch4
Rule 139   switch4 -> LCURL PASS RCURL
Rule 140   switch4 -> estatuto
Rule 141   epsilon -> <empty>

Terminals, with rules where they appear

AMPERSON             : 18
AND                  : 75
BOOL                 : 25
BY                   : 115
CASE                 : 137
COLON                : 137 138
COMMA                : 20 43 84 97
CTE_FLOAT            : 87
CTE_INT              : 86 115 115 115
CTE_STRING           : 88 101 113
DEFAULT              : 138
DIFF                 : 73
DIVIDE               : 38 118
DOUBLE_EQUAL         : 72
ELSE                 : 110
ELSEIF               : 108
END                  : 1
EQUALS               : 22 40 64
FALSE                : 99
FLOAT                : 24
FOR                  : 115
FUNCTION             : 120
GREATER              : 71
ID                   : 8 9 16 17 64 78 85 102 129 132 133
IF                   : 105
INPUT                : 112
INT                  : 23
LBRACKET             : 40 95 135
LCURL                : 27 45 107 129 133 139
LESS                 : 70
LPAREN               : 51 52 78 94 100 105 112 115 129
MAIN                 : 45
MINUS                : 33 56 119
OR                   : 77
PASS                 : 139
PLUS                 : 32 55 104 116
PRINT                : 100
RBRACKET             : 40 95 135
RCURL                : 27 45 107 131 132 133 139
RETURN               : 132
RPAREN               : 51 52 78 94 100 105 112 115 129
START                : 1
STRING               : 26
SWITCH               : 133
TIMES                : 37 117
TO                   : 115
TRUE                 : 98
VECTOR               : 7 17
VOID                 : 127
WHILE                : 51
error                : 

Nonterminals, with rules where they appear

asignacion           : 58
asignacion1          : 64
bloque               : 51 106 107 115
bloque1              : 27 28
checkEXPPOper        : 30
checkTERMPOper       : 35
condicion            : 60
condicion1           : 105 108 110
condicion2           : 105 108
condicion3           : 105
cte_bool             : 89
declareFunc          : 129
declareMain          : 45
declareVar           : 8
declareVar2          : 9
epsilon              : 3 5 10 12 19 21 29 34 39 42 44 48 50 68 76 81 83 93 96 103 109 111 114 121 123 126 134 136
estatuto             : 27 28 45 49 124 129 140
exp                  : 22 32 33 65 69 74 75 77 82 84 94 95 97 135
exp1                 : 30
expresion            : 51 52 74
expresion1           : 67
expresion2           : 69
expresion_logica     : 105
expresion_logica1    : 74
factor               : 35
factor1              : 53
factorAddFakeCover   : 52
for                  : 63
for1                 : 115
funcion              : 4
funcion1             : 122 129
funcion2             : 124 129
funcion3             : 129
funcion4             : 120
funcion5             : 127 128
funcion6             : 129
inicializacion       : 11
inicializacion_vector : 13
inicializacion_vector1 : 40
inicializacion_vector2 : 41 43
input                : 80
input1               : 112
llamada              : 59 66
llamada1             : 78
llamada2             : 82 84
main                 : 1
main1                : 45 47
main2                : 45 49
parametros           : 20 125
parametros1          : 16 17
parametros2          : 16 17
print                : 79
print1               : 100 104
print2               : 101 102
programa             : 0
programa1            : 1 2
programa2            : 1 4
switch               : 61
switch1              : 133
switch2              : 133 137
switch3              : 133
switch4              : 137 138
termino              : 30 37 38
termino1             : 35
tipo                 : 6 7 16 17 128
tipoFLOAT            : 87
tipoINT              : 86
tipoSTRING           : 88
var_declaracion      : 2 47 122
var_declaracion1     : 6
var_declaracion2     : 7
var_declaracion3     : 8
var_declaracion4     : 9
varcte               : 41 43 55 56 57 137
varcte1              : 85
varcte2              : 94 97
while                : 62

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . START programa1 programa2 main END

    START           shift and go to state 1

    programa                       shift and go to state 2

state 1

    (1) programa -> START . programa1 programa2 main END
    (2) programa1 -> . var_declaracion programa1
    (3) programa1 -> . epsilon
    (6) var_declaracion -> . tipo var_declaracion1
    (7) var_declaracion -> . VECTOR tipo var_declaracion2
    (141) epsilon -> .
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    VECTOR          shift and go to state 8
    FUNCTION        reduce using rule 141 (epsilon -> .)
    MAIN            reduce using rule 141 (epsilon -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 5
    var_declaracion                shift and go to state 6
    programa1                      shift and go to state 7
    epsilon                        shift and go to state 10

state 2

    (0) S' -> programa .



state 3

    (24) tipo -> FLOAT .

    ID              reduce using rule 24 (tipo -> FLOAT .)
    AMPERSON        reduce using rule 24 (tipo -> FLOAT .)


state 4

    (26) tipo -> STRING .

    ID              reduce using rule 26 (tipo -> STRING .)
    AMPERSON        reduce using rule 26 (tipo -> STRING .)


state 5

    (6) var_declaracion -> tipo . var_declaracion1
    (8) var_declaracion1 -> . ID declareVar var_declaracion3

    ID              shift and go to state 13

    var_declaracion1               shift and go to state 12

state 6

    (2) programa1 -> var_declaracion . programa1
    (2) programa1 -> . var_declaracion programa1
    (3) programa1 -> . epsilon
    (6) var_declaracion -> . tipo var_declaracion1
    (7) var_declaracion -> . VECTOR tipo var_declaracion2
    (141) epsilon -> .
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    VECTOR          shift and go to state 8
    FUNCTION        reduce using rule 141 (epsilon -> .)
    MAIN            reduce using rule 141 (epsilon -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 5
    epsilon                        shift and go to state 10
    var_declaracion                shift and go to state 6
    programa1                      shift and go to state 14

state 7

    (1) programa -> START programa1 . programa2 main END
    (4) programa2 -> . funcion programa2
    (5) programa2 -> . epsilon
    (120) funcion -> . FUNCTION funcion4
    (141) epsilon -> .

    FUNCTION        shift and go to state 15
    MAIN            reduce using rule 141 (epsilon -> .)

    epsilon                        shift and go to state 16
    programa2                      shift and go to state 17
    funcion                        shift and go to state 18

state 8

    (7) var_declaracion -> VECTOR . tipo var_declaracion2
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 19

state 9

    (25) tipo -> BOOL .

    ID              reduce using rule 25 (tipo -> BOOL .)
    AMPERSON        reduce using rule 25 (tipo -> BOOL .)


state 10

    (3) programa1 -> epsilon .

    FUNCTION        reduce using rule 3 (programa1 -> epsilon .)
    MAIN            reduce using rule 3 (programa1 -> epsilon .)


state 11

    (23) tipo -> INT .

    ID              reduce using rule 23 (tipo -> INT .)
    AMPERSON        reduce using rule 23 (tipo -> INT .)


state 12

    (6) var_declaracion -> tipo var_declaracion1 .

    VECTOR          reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    INT             reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    FLOAT           reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    BOOL            reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    STRING          reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    FUNCTION        reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    MAIN            reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    ID              reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    IF              reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    SWITCH          reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    WHILE           reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    FOR             reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    PRINT           reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    INPUT           reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)


state 13

    (8) var_declaracion1 -> ID . declareVar var_declaracion3
    (14) declareVar -> .

    EQUALS          reduce using rule 14 (declareVar -> .)
    VECTOR          reduce using rule 14 (declareVar -> .)
    INT             reduce using rule 14 (declareVar -> .)
    FLOAT           reduce using rule 14 (declareVar -> .)
    BOOL            reduce using rule 14 (declareVar -> .)
    STRING          reduce using rule 14 (declareVar -> .)
    FUNCTION        reduce using rule 14 (declareVar -> .)
    MAIN            reduce using rule 14 (declareVar -> .)
    ID              reduce using rule 14 (declareVar -> .)
    IF              reduce using rule 14 (declareVar -> .)
    SWITCH          reduce using rule 14 (declareVar -> .)
    WHILE           reduce using rule 14 (declareVar -> .)
    FOR             reduce using rule 14 (declareVar -> .)
    PRINT           reduce using rule 14 (declareVar -> .)
    INPUT           reduce using rule 14 (declareVar -> .)

    declareVar                     shift and go to state 20

state 14

    (2) programa1 -> var_declaracion programa1 .

    FUNCTION        reduce using rule 2 (programa1 -> var_declaracion programa1 .)
    MAIN            reduce using rule 2 (programa1 -> var_declaracion programa1 .)


state 15

    (120) funcion -> FUNCTION . funcion4
    (127) funcion4 -> . VOID funcion5
    (128) funcion4 -> . tipo funcion5
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    VOID            shift and go to state 22
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    funcion4                       shift and go to state 23
    tipo                           shift and go to state 21

state 16

    (5) programa2 -> epsilon .

    MAIN            reduce using rule 5 (programa2 -> epsilon .)


state 17

    (1) programa -> START programa1 programa2 . main END
    (45) main -> . MAIN declareMain LCURL main1 estatuto main2 RCURL

    MAIN            shift and go to state 25

    main                           shift and go to state 24

state 18

    (4) programa2 -> funcion . programa2
    (4) programa2 -> . funcion programa2
    (5) programa2 -> . epsilon
    (120) funcion -> . FUNCTION funcion4
    (141) epsilon -> .

    FUNCTION        shift and go to state 15
    MAIN            reduce using rule 141 (epsilon -> .)

    epsilon                        shift and go to state 16
    programa2                      shift and go to state 26
    funcion                        shift and go to state 18

state 19

    (7) var_declaracion -> VECTOR tipo . var_declaracion2
    (9) var_declaracion2 -> . ID declareVar2 var_declaracion4

    ID              shift and go to state 28

    var_declaracion2               shift and go to state 27

state 20

    (8) var_declaracion1 -> ID declareVar . var_declaracion3
    (10) var_declaracion3 -> . epsilon
    (11) var_declaracion3 -> . inicializacion
    (141) epsilon -> .
    (22) inicializacion -> . EQUALS exp

    VECTOR          reduce using rule 141 (epsilon -> .)
    INT             reduce using rule 141 (epsilon -> .)
    FLOAT           reduce using rule 141 (epsilon -> .)
    BOOL            reduce using rule 141 (epsilon -> .)
    STRING          reduce using rule 141 (epsilon -> .)
    FUNCTION        reduce using rule 141 (epsilon -> .)
    MAIN            reduce using rule 141 (epsilon -> .)
    ID              reduce using rule 141 (epsilon -> .)
    IF              reduce using rule 141 (epsilon -> .)
    SWITCH          reduce using rule 141 (epsilon -> .)
    WHILE           reduce using rule 141 (epsilon -> .)
    FOR             reduce using rule 141 (epsilon -> .)
    PRINT           reduce using rule 141 (epsilon -> .)
    INPUT           reduce using rule 141 (epsilon -> .)
    EQUALS          shift and go to state 31

    inicializacion                 shift and go to state 32
    epsilon                        shift and go to state 29
    var_declaracion3               shift and go to state 30

state 21

    (128) funcion4 -> tipo . funcion5
    (129) funcion5 -> . ID declareFunc LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 funcion6

    ID              shift and go to state 33

    funcion5                       shift and go to state 34

state 22

    (127) funcion4 -> VOID . funcion5
    (129) funcion5 -> . ID declareFunc LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 funcion6

    ID              shift and go to state 33

    funcion5                       shift and go to state 35

state 23

    (120) funcion -> FUNCTION funcion4 .

    FUNCTION        reduce using rule 120 (funcion -> FUNCTION funcion4 .)
    MAIN            reduce using rule 120 (funcion -> FUNCTION funcion4 .)


state 24

    (1) programa -> START programa1 programa2 main . END

    END             shift and go to state 36


state 25

    (45) main -> MAIN . declareMain LCURL main1 estatuto main2 RCURL
    (46) declareMain -> .

    LCURL           reduce using rule 46 (declareMain -> .)

    declareMain                    shift and go to state 37

state 26

    (4) programa2 -> funcion programa2 .

    MAIN            reduce using rule 4 (programa2 -> funcion programa2 .)


state 27

    (7) var_declaracion -> VECTOR tipo var_declaracion2 .

    VECTOR          reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    INT             reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    FLOAT           reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    BOOL            reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    STRING          reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    FUNCTION        reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    MAIN            reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    ID              reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    IF              reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    SWITCH          reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    WHILE           reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    FOR             reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    PRINT           reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    INPUT           reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)


state 28

    (9) var_declaracion2 -> ID . declareVar2 var_declaracion4
    (15) declareVar2 -> .

    EQUALS          reduce using rule 15 (declareVar2 -> .)
    VECTOR          reduce using rule 15 (declareVar2 -> .)
    INT             reduce using rule 15 (declareVar2 -> .)
    FLOAT           reduce using rule 15 (declareVar2 -> .)
    BOOL            reduce using rule 15 (declareVar2 -> .)
    STRING          reduce using rule 15 (declareVar2 -> .)
    FUNCTION        reduce using rule 15 (declareVar2 -> .)
    MAIN            reduce using rule 15 (declareVar2 -> .)
    ID              reduce using rule 15 (declareVar2 -> .)
    IF              reduce using rule 15 (declareVar2 -> .)
    SWITCH          reduce using rule 15 (declareVar2 -> .)
    WHILE           reduce using rule 15 (declareVar2 -> .)
    FOR             reduce using rule 15 (declareVar2 -> .)
    PRINT           reduce using rule 15 (declareVar2 -> .)
    INPUT           reduce using rule 15 (declareVar2 -> .)

    declareVar2                    shift and go to state 38

state 29

    (10) var_declaracion3 -> epsilon .

    VECTOR          reduce using rule 10 (var_declaracion3 -> epsilon .)
    INT             reduce using rule 10 (var_declaracion3 -> epsilon .)
    FLOAT           reduce using rule 10 (var_declaracion3 -> epsilon .)
    BOOL            reduce using rule 10 (var_declaracion3 -> epsilon .)
    STRING          reduce using rule 10 (var_declaracion3 -> epsilon .)
    FUNCTION        reduce using rule 10 (var_declaracion3 -> epsilon .)
    MAIN            reduce using rule 10 (var_declaracion3 -> epsilon .)
    ID              reduce using rule 10 (var_declaracion3 -> epsilon .)
    IF              reduce using rule 10 (var_declaracion3 -> epsilon .)
    SWITCH          reduce using rule 10 (var_declaracion3 -> epsilon .)
    WHILE           reduce using rule 10 (var_declaracion3 -> epsilon .)
    FOR             reduce using rule 10 (var_declaracion3 -> epsilon .)
    PRINT           reduce using rule 10 (var_declaracion3 -> epsilon .)
    INPUT           reduce using rule 10 (var_declaracion3 -> epsilon .)


state 30

    (8) var_declaracion1 -> ID declareVar var_declaracion3 .

    VECTOR          reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    INT             reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    FLOAT           reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    BOOL            reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    STRING          reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    FUNCTION        reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    MAIN            reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    ID              reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    IF              reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    SWITCH          reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    WHILE           reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    FOR             reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    PRINT           reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    INPUT           reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)


state 31

    (22) inicializacion -> EQUALS . exp
    (30) exp -> . termino checkEXPPOper exp1
    (35) termino -> . factor checkTERMPOper termino1
    (52) factor -> . LPAREN factorAddFakeCover expresion RPAREN
    (53) factor -> . factor1
    (55) factor1 -> . PLUS varcte
    (56) factor1 -> . MINUS varcte
    (57) factor1 -> . varcte
    (85) varcte -> . ID varcte1
    (86) varcte -> . CTE_INT tipoINT
    (87) varcte -> . CTE_FLOAT tipoFLOAT
    (88) varcte -> . CTE_STRING tipoSTRING
    (89) varcte -> . cte_bool
    (98) cte_bool -> . TRUE
    (99) cte_bool -> . FALSE

    LPAREN          shift and go to state 47
    PLUS            shift and go to state 44
    MINUS           shift and go to state 42
    ID              shift and go to state 49
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 52
    CTE_STRING      shift and go to state 46
    TRUE            shift and go to state 41
    FALSE           shift and go to state 50

    factor1                        shift and go to state 51
    cte_bool                       shift and go to state 39
    termino                        shift and go to state 40
    exp                            shift and go to state 53
    factor                         shift and go to state 45
    varcte                         shift and go to state 43

state 32

    (11) var_declaracion3 -> inicializacion .

    VECTOR          reduce using rule 11 (var_declaracion3 -> inicializacion .)
    INT             reduce using rule 11 (var_declaracion3 -> inicializacion .)
    FLOAT           reduce using rule 11 (var_declaracion3 -> inicializacion .)
    BOOL            reduce using rule 11 (var_declaracion3 -> inicializacion .)
    STRING          reduce using rule 11 (var_declaracion3 -> inicializacion .)
    FUNCTION        reduce using rule 11 (var_declaracion3 -> inicializacion .)
    MAIN            reduce using rule 11 (var_declaracion3 -> inicializacion .)
    ID              reduce using rule 11 (var_declaracion3 -> inicializacion .)
    IF              reduce using rule 11 (var_declaracion3 -> inicializacion .)
    SWITCH          reduce using rule 11 (var_declaracion3 -> inicializacion .)
    WHILE           reduce using rule 11 (var_declaracion3 -> inicializacion .)
    FOR             reduce using rule 11 (var_declaracion3 -> inicializacion .)
    PRINT           reduce using rule 11 (var_declaracion3 -> inicializacion .)
    INPUT           reduce using rule 11 (var_declaracion3 -> inicializacion .)


state 33

    (129) funcion5 -> ID . declareFunc LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 funcion6
    (130) declareFunc -> .

    LPAREN          reduce using rule 130 (declareFunc -> .)

    declareFunc                    shift and go to state 54

state 34

    (128) funcion4 -> tipo funcion5 .

    FUNCTION        reduce using rule 128 (funcion4 -> tipo funcion5 .)
    MAIN            reduce using rule 128 (funcion4 -> tipo funcion5 .)


state 35

    (127) funcion4 -> VOID funcion5 .

    FUNCTION        reduce using rule 127 (funcion4 -> VOID funcion5 .)
    MAIN            reduce using rule 127 (funcion4 -> VOID funcion5 .)


state 36

    (1) programa -> START programa1 programa2 main END .

    $end            reduce using rule 1 (programa -> START programa1 programa2 main END .)


state 37

    (45) main -> MAIN declareMain . LCURL main1 estatuto main2 RCURL

    LCURL           shift and go to state 55


state 38

    (9) var_declaracion2 -> ID declareVar2 . var_declaracion4
    (12) var_declaracion4 -> . epsilon
    (13) var_declaracion4 -> . inicializacion_vector
    (141) epsilon -> .
    (40) inicializacion_vector -> . EQUALS LBRACKET inicializacion_vector1 RBRACKET

    VECTOR          reduce using rule 141 (epsilon -> .)
    INT             reduce using rule 141 (epsilon -> .)
    FLOAT           reduce using rule 141 (epsilon -> .)
    BOOL            reduce using rule 141 (epsilon -> .)
    STRING          reduce using rule 141 (epsilon -> .)
    FUNCTION        reduce using rule 141 (epsilon -> .)
    MAIN            reduce using rule 141 (epsilon -> .)
    ID              reduce using rule 141 (epsilon -> .)
    IF              reduce using rule 141 (epsilon -> .)
    SWITCH          reduce using rule 141 (epsilon -> .)
    WHILE           reduce using rule 141 (epsilon -> .)
    FOR             reduce using rule 141 (epsilon -> .)
    PRINT           reduce using rule 141 (epsilon -> .)
    INPUT           reduce using rule 141 (epsilon -> .)
    EQUALS          shift and go to state 58

    epsilon                        shift and go to state 57
    var_declaracion4               shift and go to state 59
    inicializacion_vector          shift and go to state 56

state 39

    (89) varcte -> cte_bool .

    TIMES           reduce using rule 89 (varcte -> cte_bool .)
    DIVIDE          reduce using rule 89 (varcte -> cte_bool .)
    PLUS            reduce using rule 89 (varcte -> cte_bool .)
    MINUS           reduce using rule 89 (varcte -> cte_bool .)
    VECTOR          reduce using rule 89 (varcte -> cte_bool .)
    INT             reduce using rule 89 (varcte -> cte_bool .)
    FLOAT           reduce using rule 89 (varcte -> cte_bool .)
    BOOL            reduce using rule 89 (varcte -> cte_bool .)
    STRING          reduce using rule 89 (varcte -> cte_bool .)
    FUNCTION        reduce using rule 89 (varcte -> cte_bool .)
    MAIN            reduce using rule 89 (varcte -> cte_bool .)
    ID              reduce using rule 89 (varcte -> cte_bool .)
    IF              reduce using rule 89 (varcte -> cte_bool .)
    SWITCH          reduce using rule 89 (varcte -> cte_bool .)
    WHILE           reduce using rule 89 (varcte -> cte_bool .)
    FOR             reduce using rule 89 (varcte -> cte_bool .)
    PRINT           reduce using rule 89 (varcte -> cte_bool .)
    INPUT           reduce using rule 89 (varcte -> cte_bool .)
    COMMA           reduce using rule 89 (varcte -> cte_bool .)
    RPAREN          reduce using rule 89 (varcte -> cte_bool .)
    RBRACKET        reduce using rule 89 (varcte -> cte_bool .)
    RCURL           reduce using rule 89 (varcte -> cte_bool .)
    RETURN          reduce using rule 89 (varcte -> cte_bool .)
    CASE            reduce using rule 89 (varcte -> cte_bool .)
    DEFAULT         reduce using rule 89 (varcte -> cte_bool .)
    AND             reduce using rule 89 (varcte -> cte_bool .)
    OR              reduce using rule 89 (varcte -> cte_bool .)
    LESS            reduce using rule 89 (varcte -> cte_bool .)
    GREATER         reduce using rule 89 (varcte -> cte_bool .)
    DOUBLE_EQUAL    reduce using rule 89 (varcte -> cte_bool .)
    DIFF            reduce using rule 89 (varcte -> cte_bool .)
    COLON           reduce using rule 89 (varcte -> cte_bool .)


state 40

    (30) exp -> termino . checkEXPPOper exp1
    (31) checkEXPPOper -> .

    PLUS            reduce using rule 31 (checkEXPPOper -> .)
    MINUS           reduce using rule 31 (checkEXPPOper -> .)
    VECTOR          reduce using rule 31 (checkEXPPOper -> .)
    INT             reduce using rule 31 (checkEXPPOper -> .)
    FLOAT           reduce using rule 31 (checkEXPPOper -> .)
    BOOL            reduce using rule 31 (checkEXPPOper -> .)
    STRING          reduce using rule 31 (checkEXPPOper -> .)
    FUNCTION        reduce using rule 31 (checkEXPPOper -> .)
    MAIN            reduce using rule 31 (checkEXPPOper -> .)
    ID              reduce using rule 31 (checkEXPPOper -> .)
    IF              reduce using rule 31 (checkEXPPOper -> .)
    SWITCH          reduce using rule 31 (checkEXPPOper -> .)
    WHILE           reduce using rule 31 (checkEXPPOper -> .)
    FOR             reduce using rule 31 (checkEXPPOper -> .)
    PRINT           reduce using rule 31 (checkEXPPOper -> .)
    INPUT           reduce using rule 31 (checkEXPPOper -> .)
    COMMA           reduce using rule 31 (checkEXPPOper -> .)
    RPAREN          reduce using rule 31 (checkEXPPOper -> .)
    RBRACKET        reduce using rule 31 (checkEXPPOper -> .)
    RCURL           reduce using rule 31 (checkEXPPOper -> .)
    RETURN          reduce using rule 31 (checkEXPPOper -> .)
    CASE            reduce using rule 31 (checkEXPPOper -> .)
    DEFAULT         reduce using rule 31 (checkEXPPOper -> .)
    AND             reduce using rule 31 (checkEXPPOper -> .)
    OR              reduce using rule 31 (checkEXPPOper -> .)
    LESS            reduce using rule 31 (checkEXPPOper -> .)
    GREATER         reduce using rule 31 (checkEXPPOper -> .)
    DOUBLE_EQUAL    reduce using rule 31 (checkEXPPOper -> .)
    DIFF            reduce using rule 31 (checkEXPPOper -> .)

    checkEXPPOper                  shift and go to state 60

state 41

    (98) cte_bool -> TRUE .

    TIMES           reduce using rule 98 (cte_bool -> TRUE .)
    DIVIDE          reduce using rule 98 (cte_bool -> TRUE .)
    PLUS            reduce using rule 98 (cte_bool -> TRUE .)
    MINUS           reduce using rule 98 (cte_bool -> TRUE .)
    LESS            reduce using rule 98 (cte_bool -> TRUE .)
    GREATER         reduce using rule 98 (cte_bool -> TRUE .)
    DOUBLE_EQUAL    reduce using rule 98 (cte_bool -> TRUE .)
    DIFF            reduce using rule 98 (cte_bool -> TRUE .)
    RPAREN          reduce using rule 98 (cte_bool -> TRUE .)
    VECTOR          reduce using rule 98 (cte_bool -> TRUE .)
    INT             reduce using rule 98 (cte_bool -> TRUE .)
    FLOAT           reduce using rule 98 (cte_bool -> TRUE .)
    BOOL            reduce using rule 98 (cte_bool -> TRUE .)
    STRING          reduce using rule 98 (cte_bool -> TRUE .)
    FUNCTION        reduce using rule 98 (cte_bool -> TRUE .)
    MAIN            reduce using rule 98 (cte_bool -> TRUE .)
    ID              reduce using rule 98 (cte_bool -> TRUE .)
    IF              reduce using rule 98 (cte_bool -> TRUE .)
    SWITCH          reduce using rule 98 (cte_bool -> TRUE .)
    WHILE           reduce using rule 98 (cte_bool -> TRUE .)
    FOR             reduce using rule 98 (cte_bool -> TRUE .)
    PRINT           reduce using rule 98 (cte_bool -> TRUE .)
    INPUT           reduce using rule 98 (cte_bool -> TRUE .)
    COMMA           reduce using rule 98 (cte_bool -> TRUE .)
    RBRACKET        reduce using rule 98 (cte_bool -> TRUE .)
    RCURL           reduce using rule 98 (cte_bool -> TRUE .)
    RETURN          reduce using rule 98 (cte_bool -> TRUE .)
    CASE            reduce using rule 98 (cte_bool -> TRUE .)
    DEFAULT         reduce using rule 98 (cte_bool -> TRUE .)
    AND             reduce using rule 98 (cte_bool -> TRUE .)
    OR              reduce using rule 98 (cte_bool -> TRUE .)
    COLON           reduce using rule 98 (cte_bool -> TRUE .)


state 42

    (56) factor1 -> MINUS . varcte
    (85) varcte -> . ID varcte1
    (86) varcte -> . CTE_INT tipoINT
    (87) varcte -> . CTE_FLOAT tipoFLOAT
    (88) varcte -> . CTE_STRING tipoSTRING
    (89) varcte -> . cte_bool
    (98) cte_bool -> . TRUE
    (99) cte_bool -> . FALSE

    ID              shift and go to state 49
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 52
    CTE_STRING      shift and go to state 46
    TRUE            shift and go to state 41
    FALSE           shift and go to state 50

    varcte                         shift and go to state 61
    cte_bool                       shift and go to state 39

state 43

    (57) factor1 -> varcte .

    TIMES           reduce using rule 57 (factor1 -> varcte .)
    DIVIDE          reduce using rule 57 (factor1 -> varcte .)
    PLUS            reduce using rule 57 (factor1 -> varcte .)
    MINUS           reduce using rule 57 (factor1 -> varcte .)
    COMMA           reduce using rule 57 (factor1 -> varcte .)
    RPAREN          reduce using rule 57 (factor1 -> varcte .)
    AND             reduce using rule 57 (factor1 -> varcte .)
    OR              reduce using rule 57 (factor1 -> varcte .)
    LESS            reduce using rule 57 (factor1 -> varcte .)
    GREATER         reduce using rule 57 (factor1 -> varcte .)
    DOUBLE_EQUAL    reduce using rule 57 (factor1 -> varcte .)
    DIFF            reduce using rule 57 (factor1 -> varcte .)
    RBRACKET        reduce using rule 57 (factor1 -> varcte .)
    VECTOR          reduce using rule 57 (factor1 -> varcte .)
    INT             reduce using rule 57 (factor1 -> varcte .)
    FLOAT           reduce using rule 57 (factor1 -> varcte .)
    BOOL            reduce using rule 57 (factor1 -> varcte .)
    STRING          reduce using rule 57 (factor1 -> varcte .)
    FUNCTION        reduce using rule 57 (factor1 -> varcte .)
    MAIN            reduce using rule 57 (factor1 -> varcte .)
    ID              reduce using rule 57 (factor1 -> varcte .)
    IF              reduce using rule 57 (factor1 -> varcte .)
    SWITCH          reduce using rule 57 (factor1 -> varcte .)
    WHILE           reduce using rule 57 (factor1 -> varcte .)
    FOR             reduce using rule 57 (factor1 -> varcte .)
    PRINT           reduce using rule 57 (factor1 -> varcte .)
    INPUT           reduce using rule 57 (factor1 -> varcte .)
    RCURL           reduce using rule 57 (factor1 -> varcte .)
    RETURN          reduce using rule 57 (factor1 -> varcte .)
    CASE            reduce using rule 57 (factor1 -> varcte .)
    DEFAULT         reduce using rule 57 (factor1 -> varcte .)


state 44

    (55) factor1 -> PLUS . varcte
    (85) varcte -> . ID varcte1
    (86) varcte -> . CTE_INT tipoINT
    (87) varcte -> . CTE_FLOAT tipoFLOAT
    (88) varcte -> . CTE_STRING tipoSTRING
    (89) varcte -> . cte_bool
    (98) cte_bool -> . TRUE
    (99) cte_bool -> . FALSE

    ID              shift and go to state 49
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 52
    CTE_STRING      shift and go to state 46
    TRUE            shift and go to state 41
    FALSE           shift and go to state 50

    varcte                         shift and go to state 62
    cte_bool                       shift and go to state 39

state 45

    (35) termino -> factor . checkTERMPOper termino1
    (36) checkTERMPOper -> .

    TIMES           reduce using rule 36 (checkTERMPOper -> .)
    DIVIDE          reduce using rule 36 (checkTERMPOper -> .)
    PLUS            reduce using rule 36 (checkTERMPOper -> .)
    MINUS           reduce using rule 36 (checkTERMPOper -> .)
    VECTOR          reduce using rule 36 (checkTERMPOper -> .)
    INT             reduce using rule 36 (checkTERMPOper -> .)
    FLOAT           reduce using rule 36 (checkTERMPOper -> .)
    BOOL            reduce using rule 36 (checkTERMPOper -> .)
    STRING          reduce using rule 36 (checkTERMPOper -> .)
    FUNCTION        reduce using rule 36 (checkTERMPOper -> .)
    MAIN            reduce using rule 36 (checkTERMPOper -> .)
    ID              reduce using rule 36 (checkTERMPOper -> .)
    IF              reduce using rule 36 (checkTERMPOper -> .)
    SWITCH          reduce using rule 36 (checkTERMPOper -> .)
    WHILE           reduce using rule 36 (checkTERMPOper -> .)
    FOR             reduce using rule 36 (checkTERMPOper -> .)
    PRINT           reduce using rule 36 (checkTERMPOper -> .)
    INPUT           reduce using rule 36 (checkTERMPOper -> .)
    COMMA           reduce using rule 36 (checkTERMPOper -> .)
    RPAREN          reduce using rule 36 (checkTERMPOper -> .)
    RBRACKET        reduce using rule 36 (checkTERMPOper -> .)
    RCURL           reduce using rule 36 (checkTERMPOper -> .)
    RETURN          reduce using rule 36 (checkTERMPOper -> .)
    CASE            reduce using rule 36 (checkTERMPOper -> .)
    DEFAULT         reduce using rule 36 (checkTERMPOper -> .)
    AND             reduce using rule 36 (checkTERMPOper -> .)
    OR              reduce using rule 36 (checkTERMPOper -> .)
    LESS            reduce using rule 36 (checkTERMPOper -> .)
    GREATER         reduce using rule 36 (checkTERMPOper -> .)
    DOUBLE_EQUAL    reduce using rule 36 (checkTERMPOper -> .)
    DIFF            reduce using rule 36 (checkTERMPOper -> .)

    checkTERMPOper                 shift and go to state 63

state 46

    (88) varcte -> CTE_STRING . tipoSTRING
    (92) tipoSTRING -> .

    TIMES           reduce using rule 92 (tipoSTRING -> .)
    DIVIDE          reduce using rule 92 (tipoSTRING -> .)
    PLUS            reduce using rule 92 (tipoSTRING -> .)
    MINUS           reduce using rule 92 (tipoSTRING -> .)
    VECTOR          reduce using rule 92 (tipoSTRING -> .)
    INT             reduce using rule 92 (tipoSTRING -> .)
    FLOAT           reduce using rule 92 (tipoSTRING -> .)
    BOOL            reduce using rule 92 (tipoSTRING -> .)
    STRING          reduce using rule 92 (tipoSTRING -> .)
    FUNCTION        reduce using rule 92 (tipoSTRING -> .)
    MAIN            reduce using rule 92 (tipoSTRING -> .)
    ID              reduce using rule 92 (tipoSTRING -> .)
    IF              reduce using rule 92 (tipoSTRING -> .)
    SWITCH          reduce using rule 92 (tipoSTRING -> .)
    WHILE           reduce using rule 92 (tipoSTRING -> .)
    FOR             reduce using rule 92 (tipoSTRING -> .)
    PRINT           reduce using rule 92 (tipoSTRING -> .)
    INPUT           reduce using rule 92 (tipoSTRING -> .)
    COMMA           reduce using rule 92 (tipoSTRING -> .)
    RPAREN          reduce using rule 92 (tipoSTRING -> .)
    RBRACKET        reduce using rule 92 (tipoSTRING -> .)
    RCURL           reduce using rule 92 (tipoSTRING -> .)
    RETURN          reduce using rule 92 (tipoSTRING -> .)
    CASE            reduce using rule 92 (tipoSTRING -> .)
    DEFAULT         reduce using rule 92 (tipoSTRING -> .)
    AND             reduce using rule 92 (tipoSTRING -> .)
    OR              reduce using rule 92 (tipoSTRING -> .)
    LESS            reduce using rule 92 (tipoSTRING -> .)
    GREATER         reduce using rule 92 (tipoSTRING -> .)
    DOUBLE_EQUAL    reduce using rule 92 (tipoSTRING -> .)
    DIFF            reduce using rule 92 (tipoSTRING -> .)
    COLON           reduce using rule 92 (tipoSTRING -> .)

    tipoSTRING                     shift and go to state 64

state 47

    (52) factor -> LPAREN . factorAddFakeCover expresion RPAREN
    (54) factorAddFakeCover -> .

    LESS            reduce using rule 54 (factorAddFakeCover -> .)
    GREATER         reduce using rule 54 (factorAddFakeCover -> .)
    DOUBLE_EQUAL    reduce using rule 54 (factorAddFakeCover -> .)
    DIFF            reduce using rule 54 (factorAddFakeCover -> .)
    RPAREN          reduce using rule 54 (factorAddFakeCover -> .)

    factorAddFakeCover             shift and go to state 65

state 48

    (86) varcte -> CTE_INT . tipoINT
    (90) tipoINT -> .

    TIMES           reduce using rule 90 (tipoINT -> .)
    DIVIDE          reduce using rule 90 (tipoINT -> .)
    PLUS            reduce using rule 90 (tipoINT -> .)
    MINUS           reduce using rule 90 (tipoINT -> .)
    VECTOR          reduce using rule 90 (tipoINT -> .)
    INT             reduce using rule 90 (tipoINT -> .)
    FLOAT           reduce using rule 90 (tipoINT -> .)
    BOOL            reduce using rule 90 (tipoINT -> .)
    STRING          reduce using rule 90 (tipoINT -> .)
    FUNCTION        reduce using rule 90 (tipoINT -> .)
    MAIN            reduce using rule 90 (tipoINT -> .)
    ID              reduce using rule 90 (tipoINT -> .)
    IF              reduce using rule 90 (tipoINT -> .)
    SWITCH          reduce using rule 90 (tipoINT -> .)
    WHILE           reduce using rule 90 (tipoINT -> .)
    FOR             reduce using rule 90 (tipoINT -> .)
    PRINT           reduce using rule 90 (tipoINT -> .)
    INPUT           reduce using rule 90 (tipoINT -> .)
    COMMA           reduce using rule 90 (tipoINT -> .)
    RPAREN          reduce using rule 90 (tipoINT -> .)
    RBRACKET        reduce using rule 90 (tipoINT -> .)
    RCURL           reduce using rule 90 (tipoINT -> .)
    RETURN          reduce using rule 90 (tipoINT -> .)
    CASE            reduce using rule 90 (tipoINT -> .)
    DEFAULT         reduce using rule 90 (tipoINT -> .)
    AND             reduce using rule 90 (tipoINT -> .)
    OR              reduce using rule 90 (tipoINT -> .)
    LESS            reduce using rule 90 (tipoINT -> .)
    GREATER         reduce using rule 90 (tipoINT -> .)
    DOUBLE_EQUAL    reduce using rule 90 (tipoINT -> .)
    DIFF            reduce using rule 90 (tipoINT -> .)
    COLON           reduce using rule 90 (tipoINT -> .)

    tipoINT                        shift and go to state 66

state 49

    (85) varcte -> ID . varcte1
    (93) varcte1 -> . epsilon
    (94) varcte1 -> . LPAREN exp varcte2 RPAREN
    (95) varcte1 -> . LBRACKET exp RBRACKET
    (141) epsilon -> .

    LPAREN          shift and go to state 67
    LBRACKET        shift and go to state 69
    TIMES           reduce using rule 141 (epsilon -> .)
    DIVIDE          reduce using rule 141 (epsilon -> .)
    PLUS            reduce using rule 141 (epsilon -> .)
    MINUS           reduce using rule 141 (epsilon -> .)
    VECTOR          reduce using rule 141 (epsilon -> .)
    INT             reduce using rule 141 (epsilon -> .)
    FLOAT           reduce using rule 141 (epsilon -> .)
    BOOL            reduce using rule 141 (epsilon -> .)
    STRING          reduce using rule 141 (epsilon -> .)
    FUNCTION        reduce using rule 141 (epsilon -> .)
    MAIN            reduce using rule 141 (epsilon -> .)
    ID              reduce using rule 141 (epsilon -> .)
    IF              reduce using rule 141 (epsilon -> .)
    SWITCH          reduce using rule 141 (epsilon -> .)
    WHILE           reduce using rule 141 (epsilon -> .)
    FOR             reduce using rule 141 (epsilon -> .)
    PRINT           reduce using rule 141 (epsilon -> .)
    INPUT           reduce using rule 141 (epsilon -> .)
    COMMA           reduce using rule 141 (epsilon -> .)
    RPAREN          reduce using rule 141 (epsilon -> .)
    RBRACKET        reduce using rule 141 (epsilon -> .)
    RCURL           reduce using rule 141 (epsilon -> .)
    RETURN          reduce using rule 141 (epsilon -> .)
    CASE            reduce using rule 141 (epsilon -> .)
    DEFAULT         reduce using rule 141 (epsilon -> .)
    AND             reduce using rule 141 (epsilon -> .)
    OR              reduce using rule 141 (epsilon -> .)
    LESS            reduce using rule 141 (epsilon -> .)
    GREATER         reduce using rule 141 (epsilon -> .)
    DOUBLE_EQUAL    reduce using rule 141 (epsilon -> .)
    DIFF            reduce using rule 141 (epsilon -> .)
    COLON           reduce using rule 141 (epsilon -> .)

    epsilon                        shift and go to state 68
    varcte1                        shift and go to state 70

state 50

    (99) cte_bool -> FALSE .

    TIMES           reduce using rule 99 (cte_bool -> FALSE .)
    DIVIDE          reduce using rule 99 (cte_bool -> FALSE .)
    PLUS            reduce using rule 99 (cte_bool -> FALSE .)
    MINUS           reduce using rule 99 (cte_bool -> FALSE .)
    LESS            reduce using rule 99 (cte_bool -> FALSE .)
    GREATER         reduce using rule 99 (cte_bool -> FALSE .)
    DOUBLE_EQUAL    reduce using rule 99 (cte_bool -> FALSE .)
    DIFF            reduce using rule 99 (cte_bool -> FALSE .)
    RPAREN          reduce using rule 99 (cte_bool -> FALSE .)
    VECTOR          reduce using rule 99 (cte_bool -> FALSE .)
    INT             reduce using rule 99 (cte_bool -> FALSE .)
    FLOAT           reduce using rule 99 (cte_bool -> FALSE .)
    BOOL            reduce using rule 99 (cte_bool -> FALSE .)
    STRING          reduce using rule 99 (cte_bool -> FALSE .)
    FUNCTION        reduce using rule 99 (cte_bool -> FALSE .)
    MAIN            reduce using rule 99 (cte_bool -> FALSE .)
    ID              reduce using rule 99 (cte_bool -> FALSE .)
    IF              reduce using rule 99 (cte_bool -> FALSE .)
    SWITCH          reduce using rule 99 (cte_bool -> FALSE .)
    WHILE           reduce using rule 99 (cte_bool -> FALSE .)
    FOR             reduce using rule 99 (cte_bool -> FALSE .)
    PRINT           reduce using rule 99 (cte_bool -> FALSE .)
    INPUT           reduce using rule 99 (cte_bool -> FALSE .)
    COMMA           reduce using rule 99 (cte_bool -> FALSE .)
    RBRACKET        reduce using rule 99 (cte_bool -> FALSE .)
    RCURL           reduce using rule 99 (cte_bool -> FALSE .)
    RETURN          reduce using rule 99 (cte_bool -> FALSE .)
    CASE            reduce using rule 99 (cte_bool -> FALSE .)
    DEFAULT         reduce using rule 99 (cte_bool -> FALSE .)
    AND             reduce using rule 99 (cte_bool -> FALSE .)
    OR              reduce using rule 99 (cte_bool -> FALSE .)
    COLON           reduce using rule 99 (cte_bool -> FALSE .)


state 51

    (53) factor -> factor1 .

    TIMES           reduce using rule 53 (factor -> factor1 .)
    DIVIDE          reduce using rule 53 (factor -> factor1 .)
    PLUS            reduce using rule 53 (factor -> factor1 .)
    MINUS           reduce using rule 53 (factor -> factor1 .)
    COMMA           reduce using rule 53 (factor -> factor1 .)
    RPAREN          reduce using rule 53 (factor -> factor1 .)
    VECTOR          reduce using rule 53 (factor -> factor1 .)
    INT             reduce using rule 53 (factor -> factor1 .)
    FLOAT           reduce using rule 53 (factor -> factor1 .)
    BOOL            reduce using rule 53 (factor -> factor1 .)
    STRING          reduce using rule 53 (factor -> factor1 .)
    FUNCTION        reduce using rule 53 (factor -> factor1 .)
    MAIN            reduce using rule 53 (factor -> factor1 .)
    ID              reduce using rule 53 (factor -> factor1 .)
    IF              reduce using rule 53 (factor -> factor1 .)
    SWITCH          reduce using rule 53 (factor -> factor1 .)
    WHILE           reduce using rule 53 (factor -> factor1 .)
    FOR             reduce using rule 53 (factor -> factor1 .)
    PRINT           reduce using rule 53 (factor -> factor1 .)
    INPUT           reduce using rule 53 (factor -> factor1 .)
    RBRACKET        reduce using rule 53 (factor -> factor1 .)
    RCURL           reduce using rule 53 (factor -> factor1 .)
    RETURN          reduce using rule 53 (factor -> factor1 .)
    CASE            reduce using rule 53 (factor -> factor1 .)
    DEFAULT         reduce using rule 53 (factor -> factor1 .)
    AND             reduce using rule 53 (factor -> factor1 .)
    OR              reduce using rule 53 (factor -> factor1 .)
    LESS            reduce using rule 53 (factor -> factor1 .)
    GREATER         reduce using rule 53 (factor -> factor1 .)
    DOUBLE_EQUAL    reduce using rule 53 (factor -> factor1 .)
    DIFF            reduce using rule 53 (factor -> factor1 .)


state 52

    (87) varcte -> CTE_FLOAT . tipoFLOAT
    (91) tipoFLOAT -> .

    TIMES           reduce using rule 91 (tipoFLOAT -> .)
    DIVIDE          reduce using rule 91 (tipoFLOAT -> .)
    PLUS            reduce using rule 91 (tipoFLOAT -> .)
    MINUS           reduce using rule 91 (tipoFLOAT -> .)
    VECTOR          reduce using rule 91 (tipoFLOAT -> .)
    INT             reduce using rule 91 (tipoFLOAT -> .)
    FLOAT           reduce using rule 91 (tipoFLOAT -> .)
    BOOL            reduce using rule 91 (tipoFLOAT -> .)
    STRING          reduce using rule 91 (tipoFLOAT -> .)
    FUNCTION        reduce using rule 91 (tipoFLOAT -> .)
    MAIN            reduce using rule 91 (tipoFLOAT -> .)
    ID              reduce using rule 91 (tipoFLOAT -> .)
    IF              reduce using rule 91 (tipoFLOAT -> .)
    SWITCH          reduce using rule 91 (tipoFLOAT -> .)
    WHILE           reduce using rule 91 (tipoFLOAT -> .)
    FOR             reduce using rule 91 (tipoFLOAT -> .)
    PRINT           reduce using rule 91 (tipoFLOAT -> .)
    INPUT           reduce using rule 91 (tipoFLOAT -> .)
    COMMA           reduce using rule 91 (tipoFLOAT -> .)
    RPAREN          reduce using rule 91 (tipoFLOAT -> .)
    RBRACKET        reduce using rule 91 (tipoFLOAT -> .)
    RCURL           reduce using rule 91 (tipoFLOAT -> .)
    RETURN          reduce using rule 91 (tipoFLOAT -> .)
    CASE            reduce using rule 91 (tipoFLOAT -> .)
    DEFAULT         reduce using rule 91 (tipoFLOAT -> .)
    AND             reduce using rule 91 (tipoFLOAT -> .)
    OR              reduce using rule 91 (tipoFLOAT -> .)
    LESS            reduce using rule 91 (tipoFLOAT -> .)
    GREATER         reduce using rule 91 (tipoFLOAT -> .)
    DOUBLE_EQUAL    reduce using rule 91 (tipoFLOAT -> .)
    DIFF            reduce using rule 91 (tipoFLOAT -> .)
    COLON           reduce using rule 91 (tipoFLOAT -> .)

    tipoFLOAT                      shift and go to state 71

state 53

    (22) inicializacion -> EQUALS exp .

    VECTOR          reduce using rule 22 (inicializacion -> EQUALS exp .)
    INT             reduce using rule 22 (inicializacion -> EQUALS exp .)
    FLOAT           reduce using rule 22 (inicializacion -> EQUALS exp .)
    BOOL            reduce using rule 22 (inicializacion -> EQUALS exp .)
    STRING          reduce using rule 22 (inicializacion -> EQUALS exp .)
    FUNCTION        reduce using rule 22 (inicializacion -> EQUALS exp .)
    MAIN            reduce using rule 22 (inicializacion -> EQUALS exp .)
    ID              reduce using rule 22 (inicializacion -> EQUALS exp .)
    IF              reduce using rule 22 (inicializacion -> EQUALS exp .)
    SWITCH          reduce using rule 22 (inicializacion -> EQUALS exp .)
    WHILE           reduce using rule 22 (inicializacion -> EQUALS exp .)
    FOR             reduce using rule 22 (inicializacion -> EQUALS exp .)
    PRINT           reduce using rule 22 (inicializacion -> EQUALS exp .)
    INPUT           reduce using rule 22 (inicializacion -> EQUALS exp .)


state 54

    (129) funcion5 -> ID declareFunc . LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 funcion6

    LPAREN          shift and go to state 72


state 55

    (45) main -> MAIN declareMain LCURL . main1 estatuto main2 RCURL
    (47) main1 -> . var_declaracion main1
    (48) main1 -> . epsilon
    (6) var_declaracion -> . tipo var_declaracion1
    (7) var_declaracion -> . VECTOR tipo var_declaracion2
    (141) epsilon -> .
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    VECTOR          shift and go to state 8
    ID              reduce using rule 141 (epsilon -> .)
    IF              reduce using rule 141 (epsilon -> .)
    SWITCH          reduce using rule 141 (epsilon -> .)
    WHILE           reduce using rule 141 (epsilon -> .)
    FOR             reduce using rule 141 (epsilon -> .)
    PRINT           reduce using rule 141 (epsilon -> .)
    INPUT           reduce using rule 141 (epsilon -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 5
    main1                          shift and go to state 73
    var_declaracion                shift and go to state 74
    epsilon                        shift and go to state 75

state 56

    (13) var_declaracion4 -> inicializacion_vector .

    VECTOR          reduce using rule 13 (var_declaracion4 -> inicializacion_vector .)
    INT             reduce using rule 13 (var_declaracion4 -> inicializacion_vector .)
    FLOAT           reduce using rule 13 (var_declaracion4 -> inicializacion_vector .)
    BOOL            reduce using rule 13 (var_declaracion4 -> inicializacion_vector .)
    STRING          reduce using rule 13 (var_declaracion4 -> inicializacion_vector .)
    FUNCTION        reduce using rule 13 (var_declaracion4 -> inicializacion_vector .)
    MAIN            reduce using rule 13 (var_declaracion4 -> inicializacion_vector .)
    ID              reduce using rule 13 (var_declaracion4 -> inicializacion_vector .)
    IF              reduce using rule 13 (var_declaracion4 -> inicializacion_vector .)
    SWITCH          reduce using rule 13 (var_declaracion4 -> inicializacion_vector .)
    WHILE           reduce using rule 13 (var_declaracion4 -> inicializacion_vector .)
    FOR             reduce using rule 13 (var_declaracion4 -> inicializacion_vector .)
    PRINT           reduce using rule 13 (var_declaracion4 -> inicializacion_vector .)
    INPUT           reduce using rule 13 (var_declaracion4 -> inicializacion_vector .)


state 57

    (12) var_declaracion4 -> epsilon .

    VECTOR          reduce using rule 12 (var_declaracion4 -> epsilon .)
    INT             reduce using rule 12 (var_declaracion4 -> epsilon .)
    FLOAT           reduce using rule 12 (var_declaracion4 -> epsilon .)
    BOOL            reduce using rule 12 (var_declaracion4 -> epsilon .)
    STRING          reduce using rule 12 (var_declaracion4 -> epsilon .)
    FUNCTION        reduce using rule 12 (var_declaracion4 -> epsilon .)
    MAIN            reduce using rule 12 (var_declaracion4 -> epsilon .)
    ID              reduce using rule 12 (var_declaracion4 -> epsilon .)
    IF              reduce using rule 12 (var_declaracion4 -> epsilon .)
    SWITCH          reduce using rule 12 (var_declaracion4 -> epsilon .)
    WHILE           reduce using rule 12 (var_declaracion4 -> epsilon .)
    FOR             reduce using rule 12 (var_declaracion4 -> epsilon .)
    PRINT           reduce using rule 12 (var_declaracion4 -> epsilon .)
    INPUT           reduce using rule 12 (var_declaracion4 -> epsilon .)


state 58

    (40) inicializacion_vector -> EQUALS . LBRACKET inicializacion_vector1 RBRACKET

    LBRACKET        shift and go to state 76


state 59

    (9) var_declaracion2 -> ID declareVar2 var_declaracion4 .

    VECTOR          reduce using rule 9 (var_declaracion2 -> ID declareVar2 var_declaracion4 .)
    INT             reduce using rule 9 (var_declaracion2 -> ID declareVar2 var_declaracion4 .)
    FLOAT           reduce using rule 9 (var_declaracion2 -> ID declareVar2 var_declaracion4 .)
    BOOL            reduce using rule 9 (var_declaracion2 -> ID declareVar2 var_declaracion4 .)
    STRING          reduce using rule 9 (var_declaracion2 -> ID declareVar2 var_declaracion4 .)
    FUNCTION        reduce using rule 9 (var_declaracion2 -> ID declareVar2 var_declaracion4 .)
    MAIN            reduce using rule 9 (var_declaracion2 -> ID declareVar2 var_declaracion4 .)
    ID              reduce using rule 9 (var_declaracion2 -> ID declareVar2 var_declaracion4 .)
    IF              reduce using rule 9 (var_declaracion2 -> ID declareVar2 var_declaracion4 .)
    SWITCH          reduce using rule 9 (var_declaracion2 -> ID declareVar2 var_declaracion4 .)
    WHILE           reduce using rule 9 (var_declaracion2 -> ID declareVar2 var_declaracion4 .)
    FOR             reduce using rule 9 (var_declaracion2 -> ID declareVar2 var_declaracion4 .)
    PRINT           reduce using rule 9 (var_declaracion2 -> ID declareVar2 var_declaracion4 .)
    INPUT           reduce using rule 9 (var_declaracion2 -> ID declareVar2 var_declaracion4 .)


state 60

    (30) exp -> termino checkEXPPOper . exp1
    (32) exp1 -> . PLUS exp
    (33) exp1 -> . MINUS exp
    (34) exp1 -> . epsilon
    (141) epsilon -> .

    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    VECTOR          reduce using rule 141 (epsilon -> .)
    INT             reduce using rule 141 (epsilon -> .)
    FLOAT           reduce using rule 141 (epsilon -> .)
    BOOL            reduce using rule 141 (epsilon -> .)
    STRING          reduce using rule 141 (epsilon -> .)
    FUNCTION        reduce using rule 141 (epsilon -> .)
    MAIN            reduce using rule 141 (epsilon -> .)
    ID              reduce using rule 141 (epsilon -> .)
    IF              reduce using rule 141 (epsilon -> .)
    SWITCH          reduce using rule 141 (epsilon -> .)
    WHILE           reduce using rule 141 (epsilon -> .)
    FOR             reduce using rule 141 (epsilon -> .)
    PRINT           reduce using rule 141 (epsilon -> .)
    INPUT           reduce using rule 141 (epsilon -> .)
    COMMA           reduce using rule 141 (epsilon -> .)
    RPAREN          reduce using rule 141 (epsilon -> .)
    RBRACKET        reduce using rule 141 (epsilon -> .)
    RCURL           reduce using rule 141 (epsilon -> .)
    RETURN          reduce using rule 141 (epsilon -> .)
    CASE            reduce using rule 141 (epsilon -> .)
    DEFAULT         reduce using rule 141 (epsilon -> .)
    AND             reduce using rule 141 (epsilon -> .)
    OR              reduce using rule 141 (epsilon -> .)
    LESS            reduce using rule 141 (epsilon -> .)
    GREATER         reduce using rule 141 (epsilon -> .)
    DOUBLE_EQUAL    reduce using rule 141 (epsilon -> .)
    DIFF            reduce using rule 141 (epsilon -> .)

    epsilon                        shift and go to state 77
    exp1                           shift and go to state 78

state 61

    (56) factor1 -> MINUS varcte .

    TIMES           reduce using rule 56 (factor1 -> MINUS varcte .)
    DIVIDE          reduce using rule 56 (factor1 -> MINUS varcte .)
    PLUS            reduce using rule 56 (factor1 -> MINUS varcte .)
    MINUS           reduce using rule 56 (factor1 -> MINUS varcte .)
    COMMA           reduce using rule 56 (factor1 -> MINUS varcte .)
    RPAREN          reduce using rule 56 (factor1 -> MINUS varcte .)
    AND             reduce using rule 56 (factor1 -> MINUS varcte .)
    OR              reduce using rule 56 (factor1 -> MINUS varcte .)
    LESS            reduce using rule 56 (factor1 -> MINUS varcte .)
    GREATER         reduce using rule 56 (factor1 -> MINUS varcte .)
    DOUBLE_EQUAL    reduce using rule 56 (factor1 -> MINUS varcte .)
    DIFF            reduce using rule 56 (factor1 -> MINUS varcte .)
    RBRACKET        reduce using rule 56 (factor1 -> MINUS varcte .)
    VECTOR          reduce using rule 56 (factor1 -> MINUS varcte .)
    INT             reduce using rule 56 (factor1 -> MINUS varcte .)
    FLOAT           reduce using rule 56 (factor1 -> MINUS varcte .)
    BOOL            reduce using rule 56 (factor1 -> MINUS varcte .)
    STRING          reduce using rule 56 (factor1 -> MINUS varcte .)
    FUNCTION        reduce using rule 56 (factor1 -> MINUS varcte .)
    MAIN            reduce using rule 56 (factor1 -> MINUS varcte .)
    ID              reduce using rule 56 (factor1 -> MINUS varcte .)
    IF              reduce using rule 56 (factor1 -> MINUS varcte .)
    SWITCH          reduce using rule 56 (factor1 -> MINUS varcte .)
    WHILE           reduce using rule 56 (factor1 -> MINUS varcte .)
    FOR             reduce using rule 56 (factor1 -> MINUS varcte .)
    PRINT           reduce using rule 56 (factor1 -> MINUS varcte .)
    INPUT           reduce using rule 56 (factor1 -> MINUS varcte .)
    RCURL           reduce using rule 56 (factor1 -> MINUS varcte .)
    RETURN          reduce using rule 56 (factor1 -> MINUS varcte .)
    CASE            reduce using rule 56 (factor1 -> MINUS varcte .)
    DEFAULT         reduce using rule 56 (factor1 -> MINUS varcte .)


state 62

    (55) factor1 -> PLUS varcte .

    TIMES           reduce using rule 55 (factor1 -> PLUS varcte .)
    DIVIDE          reduce using rule 55 (factor1 -> PLUS varcte .)
    PLUS            reduce using rule 55 (factor1 -> PLUS varcte .)
    MINUS           reduce using rule 55 (factor1 -> PLUS varcte .)
    COMMA           reduce using rule 55 (factor1 -> PLUS varcte .)
    RPAREN          reduce using rule 55 (factor1 -> PLUS varcte .)
    AND             reduce using rule 55 (factor1 -> PLUS varcte .)
    OR              reduce using rule 55 (factor1 -> PLUS varcte .)
    LESS            reduce using rule 55 (factor1 -> PLUS varcte .)
    GREATER         reduce using rule 55 (factor1 -> PLUS varcte .)
    DOUBLE_EQUAL    reduce using rule 55 (factor1 -> PLUS varcte .)
    DIFF            reduce using rule 55 (factor1 -> PLUS varcte .)
    RBRACKET        reduce using rule 55 (factor1 -> PLUS varcte .)
    VECTOR          reduce using rule 55 (factor1 -> PLUS varcte .)
    INT             reduce using rule 55 (factor1 -> PLUS varcte .)
    FLOAT           reduce using rule 55 (factor1 -> PLUS varcte .)
    BOOL            reduce using rule 55 (factor1 -> PLUS varcte .)
    STRING          reduce using rule 55 (factor1 -> PLUS varcte .)
    FUNCTION        reduce using rule 55 (factor1 -> PLUS varcte .)
    MAIN            reduce using rule 55 (factor1 -> PLUS varcte .)
    ID              reduce using rule 55 (factor1 -> PLUS varcte .)
    IF              reduce using rule 55 (factor1 -> PLUS varcte .)
    SWITCH          reduce using rule 55 (factor1 -> PLUS varcte .)
    WHILE           reduce using rule 55 (factor1 -> PLUS varcte .)
    FOR             reduce using rule 55 (factor1 -> PLUS varcte .)
    PRINT           reduce using rule 55 (factor1 -> PLUS varcte .)
    INPUT           reduce using rule 55 (factor1 -> PLUS varcte .)
    RCURL           reduce using rule 55 (factor1 -> PLUS varcte .)
    RETURN          reduce using rule 55 (factor1 -> PLUS varcte .)
    CASE            reduce using rule 55 (factor1 -> PLUS varcte .)
    DEFAULT         reduce using rule 55 (factor1 -> PLUS varcte .)


state 63

    (35) termino -> factor checkTERMPOper . termino1
    (37) termino1 -> . TIMES termino
    (38) termino1 -> . DIVIDE termino
    (39) termino1 -> . epsilon
    (141) epsilon -> .

    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    PLUS            reduce using rule 141 (epsilon -> .)
    MINUS           reduce using rule 141 (epsilon -> .)
    VECTOR          reduce using rule 141 (epsilon -> .)
    INT             reduce using rule 141 (epsilon -> .)
    FLOAT           reduce using rule 141 (epsilon -> .)
    BOOL            reduce using rule 141 (epsilon -> .)
    STRING          reduce using rule 141 (epsilon -> .)
    FUNCTION        reduce using rule 141 (epsilon -> .)
    MAIN            reduce using rule 141 (epsilon -> .)
    ID              reduce using rule 141 (epsilon -> .)
    IF              reduce using rule 141 (epsilon -> .)
    SWITCH          reduce using rule 141 (epsilon -> .)
    WHILE           reduce using rule 141 (epsilon -> .)
    FOR             reduce using rule 141 (epsilon -> .)
    PRINT           reduce using rule 141 (epsilon -> .)
    INPUT           reduce using rule 141 (epsilon -> .)
    COMMA           reduce using rule 141 (epsilon -> .)
    RPAREN          reduce using rule 141 (epsilon -> .)
    RBRACKET        reduce using rule 141 (epsilon -> .)
    RCURL           reduce using rule 141 (epsilon -> .)
    RETURN          reduce using rule 141 (epsilon -> .)
    CASE            reduce using rule 141 (epsilon -> .)
    DEFAULT         reduce using rule 141 (epsilon -> .)
    AND             reduce using rule 141 (epsilon -> .)
    OR              reduce using rule 141 (epsilon -> .)
    LESS            reduce using rule 141 (epsilon -> .)
    GREATER         reduce using rule 141 (epsilon -> .)
    DOUBLE_EQUAL    reduce using rule 141 (epsilon -> .)
    DIFF            reduce using rule 141 (epsilon -> .)

    epsilon                        shift and go to state 82
    termino1                       shift and go to state 83

state 64

    (88) varcte -> CTE_STRING tipoSTRING .

    TIMES           reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    DIVIDE          reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    PLUS            reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    MINUS           reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    VECTOR          reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    INT             reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    FLOAT           reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    BOOL            reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    STRING          reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    FUNCTION        reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    MAIN            reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    ID              reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    IF              reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    SWITCH          reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    WHILE           reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    FOR             reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    PRINT           reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    INPUT           reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    COMMA           reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    RPAREN          reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    RBRACKET        reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    RCURL           reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    RETURN          reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    CASE            reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    DEFAULT         reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    AND             reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    OR              reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    LESS            reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    GREATER         reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    DOUBLE_EQUAL    reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    DIFF            reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)
    COLON           reduce using rule 88 (varcte -> CTE_STRING tipoSTRING .)


state 65

    (52) factor -> LPAREN factorAddFakeCover . expresion RPAREN
    (67) expresion -> . expresion1
    (68) expresion1 -> . epsilon
    (69) expresion1 -> . expresion2 exp
    (141) epsilon -> .
    (70) expresion2 -> . LESS
    (71) expresion2 -> . GREATER
    (72) expresion2 -> . DOUBLE_EQUAL
    (73) expresion2 -> . DIFF

    RPAREN          reduce using rule 141 (epsilon -> .)
    LESS            shift and go to state 88
    GREATER         shift and go to state 92
    DOUBLE_EQUAL    shift and go to state 90
    DIFF            shift and go to state 91

    expresion                      shift and go to state 85
    expresion1                     shift and go to state 86
    expresion2                     shift and go to state 87
    epsilon                        shift and go to state 89

state 66

    (86) varcte -> CTE_INT tipoINT .

    TIMES           reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    DIVIDE          reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    PLUS            reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    MINUS           reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    VECTOR          reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    INT             reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    FLOAT           reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    BOOL            reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    STRING          reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    FUNCTION        reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    MAIN            reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    ID              reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    IF              reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    SWITCH          reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    WHILE           reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    FOR             reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    PRINT           reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    INPUT           reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    COMMA           reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    RPAREN          reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    RBRACKET        reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    RCURL           reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    RETURN          reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    CASE            reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    DEFAULT         reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    AND             reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    OR              reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    LESS            reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    GREATER         reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    DOUBLE_EQUAL    reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    DIFF            reduce using rule 86 (varcte -> CTE_INT tipoINT .)
    COLON           reduce using rule 86 (varcte -> CTE_INT tipoINT .)


state 67

    (94) varcte1 -> LPAREN . exp varcte2 RPAREN
    (30) exp -> . termino checkEXPPOper exp1
    (35) termino -> . factor checkTERMPOper termino1
    (52) factor -> . LPAREN factorAddFakeCover expresion RPAREN
    (53) factor -> . factor1
    (55) factor1 -> . PLUS varcte
    (56) factor1 -> . MINUS varcte
    (57) factor1 -> . varcte
    (85) varcte -> . ID varcte1
    (86) varcte -> . CTE_INT tipoINT
    (87) varcte -> . CTE_FLOAT tipoFLOAT
    (88) varcte -> . CTE_STRING tipoSTRING
    (89) varcte -> . cte_bool
    (98) cte_bool -> . TRUE
    (99) cte_bool -> . FALSE

    LPAREN          shift and go to state 47
    PLUS            shift and go to state 44
    MINUS           shift and go to state 42
    ID              shift and go to state 49
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 52
    CTE_STRING      shift and go to state 46
    TRUE            shift and go to state 41
    FALSE           shift and go to state 50

    factor1                        shift and go to state 51
    cte_bool                       shift and go to state 39
    termino                        shift and go to state 40
    exp                            shift and go to state 93
    factor                         shift and go to state 45
    varcte                         shift and go to state 43

state 68

    (93) varcte1 -> epsilon .

    TIMES           reduce using rule 93 (varcte1 -> epsilon .)
    DIVIDE          reduce using rule 93 (varcte1 -> epsilon .)
    PLUS            reduce using rule 93 (varcte1 -> epsilon .)
    MINUS           reduce using rule 93 (varcte1 -> epsilon .)
    VECTOR          reduce using rule 93 (varcte1 -> epsilon .)
    INT             reduce using rule 93 (varcte1 -> epsilon .)
    FLOAT           reduce using rule 93 (varcte1 -> epsilon .)
    BOOL            reduce using rule 93 (varcte1 -> epsilon .)
    STRING          reduce using rule 93 (varcte1 -> epsilon .)
    FUNCTION        reduce using rule 93 (varcte1 -> epsilon .)
    MAIN            reduce using rule 93 (varcte1 -> epsilon .)
    ID              reduce using rule 93 (varcte1 -> epsilon .)
    IF              reduce using rule 93 (varcte1 -> epsilon .)
    SWITCH          reduce using rule 93 (varcte1 -> epsilon .)
    WHILE           reduce using rule 93 (varcte1 -> epsilon .)
    FOR             reduce using rule 93 (varcte1 -> epsilon .)
    PRINT           reduce using rule 93 (varcte1 -> epsilon .)
    INPUT           reduce using rule 93 (varcte1 -> epsilon .)
    COMMA           reduce using rule 93 (varcte1 -> epsilon .)
    RPAREN          reduce using rule 93 (varcte1 -> epsilon .)
    RBRACKET        reduce using rule 93 (varcte1 -> epsilon .)
    RCURL           reduce using rule 93 (varcte1 -> epsilon .)
    RETURN          reduce using rule 93 (varcte1 -> epsilon .)
    CASE            reduce using rule 93 (varcte1 -> epsilon .)
    DEFAULT         reduce using rule 93 (varcte1 -> epsilon .)
    AND             reduce using rule 93 (varcte1 -> epsilon .)
    OR              reduce using rule 93 (varcte1 -> epsilon .)
    LESS            reduce using rule 93 (varcte1 -> epsilon .)
    GREATER         reduce using rule 93 (varcte1 -> epsilon .)
    DOUBLE_EQUAL    reduce using rule 93 (varcte1 -> epsilon .)
    DIFF            reduce using rule 93 (varcte1 -> epsilon .)
    COLON           reduce using rule 93 (varcte1 -> epsilon .)


state 69

    (95) varcte1 -> LBRACKET . exp RBRACKET
    (30) exp -> . termino checkEXPPOper exp1
    (35) termino -> . factor checkTERMPOper termino1
    (52) factor -> . LPAREN factorAddFakeCover expresion RPAREN
    (53) factor -> . factor1
    (55) factor1 -> . PLUS varcte
    (56) factor1 -> . MINUS varcte
    (57) factor1 -> . varcte
    (85) varcte -> . ID varcte1
    (86) varcte -> . CTE_INT tipoINT
    (87) varcte -> . CTE_FLOAT tipoFLOAT
    (88) varcte -> . CTE_STRING tipoSTRING
    (89) varcte -> . cte_bool
    (98) cte_bool -> . TRUE
    (99) cte_bool -> . FALSE

    LPAREN          shift and go to state 47
    PLUS            shift and go to state 44
    MINUS           shift and go to state 42
    ID              shift and go to state 49
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 52
    CTE_STRING      shift and go to state 46
    TRUE            shift and go to state 41
    FALSE           shift and go to state 50

    factor1                        shift and go to state 51
    cte_bool                       shift and go to state 39
    termino                        shift and go to state 40
    exp                            shift and go to state 94
    factor                         shift and go to state 45
    varcte                         shift and go to state 43

state 70

    (85) varcte -> ID varcte1 .

    TIMES           reduce using rule 85 (varcte -> ID varcte1 .)
    DIVIDE          reduce using rule 85 (varcte -> ID varcte1 .)
    PLUS            reduce using rule 85 (varcte -> ID varcte1 .)
    MINUS           reduce using rule 85 (varcte -> ID varcte1 .)
    VECTOR          reduce using rule 85 (varcte -> ID varcte1 .)
    INT             reduce using rule 85 (varcte -> ID varcte1 .)
    FLOAT           reduce using rule 85 (varcte -> ID varcte1 .)
    BOOL            reduce using rule 85 (varcte -> ID varcte1 .)
    STRING          reduce using rule 85 (varcte -> ID varcte1 .)
    FUNCTION        reduce using rule 85 (varcte -> ID varcte1 .)
    MAIN            reduce using rule 85 (varcte -> ID varcte1 .)
    ID              reduce using rule 85 (varcte -> ID varcte1 .)
    IF              reduce using rule 85 (varcte -> ID varcte1 .)
    SWITCH          reduce using rule 85 (varcte -> ID varcte1 .)
    WHILE           reduce using rule 85 (varcte -> ID varcte1 .)
    FOR             reduce using rule 85 (varcte -> ID varcte1 .)
    PRINT           reduce using rule 85 (varcte -> ID varcte1 .)
    INPUT           reduce using rule 85 (varcte -> ID varcte1 .)
    COMMA           reduce using rule 85 (varcte -> ID varcte1 .)
    RPAREN          reduce using rule 85 (varcte -> ID varcte1 .)
    RBRACKET        reduce using rule 85 (varcte -> ID varcte1 .)
    RCURL           reduce using rule 85 (varcte -> ID varcte1 .)
    RETURN          reduce using rule 85 (varcte -> ID varcte1 .)
    CASE            reduce using rule 85 (varcte -> ID varcte1 .)
    DEFAULT         reduce using rule 85 (varcte -> ID varcte1 .)
    AND             reduce using rule 85 (varcte -> ID varcte1 .)
    OR              reduce using rule 85 (varcte -> ID varcte1 .)
    LESS            reduce using rule 85 (varcte -> ID varcte1 .)
    GREATER         reduce using rule 85 (varcte -> ID varcte1 .)
    DOUBLE_EQUAL    reduce using rule 85 (varcte -> ID varcte1 .)
    DIFF            reduce using rule 85 (varcte -> ID varcte1 .)
    COLON           reduce using rule 85 (varcte -> ID varcte1 .)


state 71

    (87) varcte -> CTE_FLOAT tipoFLOAT .

    TIMES           reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    DIVIDE          reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    PLUS            reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    MINUS           reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    VECTOR          reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    INT             reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    FLOAT           reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    BOOL            reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    STRING          reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    FUNCTION        reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    MAIN            reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    ID              reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    IF              reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    SWITCH          reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    WHILE           reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    FOR             reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    PRINT           reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    INPUT           reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    COMMA           reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    RPAREN          reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    RBRACKET        reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    RCURL           reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    RETURN          reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    CASE            reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    DEFAULT         reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    AND             reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    OR              reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    LESS            reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    GREATER         reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    DOUBLE_EQUAL    reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    DIFF            reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)
    COLON           reduce using rule 87 (varcte -> CTE_FLOAT tipoFLOAT .)


state 72

    (129) funcion5 -> ID declareFunc LPAREN . funcion3 RPAREN LCURL funcion1 estatuto funcion2 funcion6
    (125) funcion3 -> . parametros
    (126) funcion3 -> . epsilon
    (16) parametros -> . tipo parametros1 ID parametros2
    (17) parametros -> . VECTOR tipo parametros1 ID parametros2
    (141) epsilon -> .
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    VECTOR          shift and go to state 99
    RPAREN          reduce using rule 141 (epsilon -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 95
    epsilon                        shift and go to state 96
    funcion3                       shift and go to state 97
    parametros                     shift and go to state 98

state 73

    (45) main -> MAIN declareMain LCURL main1 . estatuto main2 RCURL
    (58) estatuto -> . asignacion
    (59) estatuto -> . llamada
    (60) estatuto -> . condicion
    (61) estatuto -> . switch
    (62) estatuto -> . while
    (63) estatuto -> . for
    (64) asignacion -> . ID EQUALS asignacion1
    (78) llamada -> . ID LPAREN llamada1 RPAREN
    (79) llamada -> . print
    (80) llamada -> . input
    (105) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (133) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (51) while -> . WHILE LPAREN expresion RPAREN bloque
    (115) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (100) print -> . PRINT LPAREN print1 RPAREN
    (112) input -> . INPUT LPAREN input1 RPAREN

    ID              shift and go to state 111
    IF              shift and go to state 112
    SWITCH          shift and go to state 105
    WHILE           shift and go to state 100
    FOR             shift and go to state 109
    PRINT           shift and go to state 101
    INPUT           shift and go to state 110

    for                            shift and go to state 102
    estatuto                       shift and go to state 103
    switch                         shift and go to state 114
    llamada                        shift and go to state 104
    condicion                      shift and go to state 106
    print                          shift and go to state 107
    input                          shift and go to state 108
    asignacion                     shift and go to state 113
    while                          shift and go to state 115

state 74

    (47) main1 -> var_declaracion . main1
    (47) main1 -> . var_declaracion main1
    (48) main1 -> . epsilon
    (6) var_declaracion -> . tipo var_declaracion1
    (7) var_declaracion -> . VECTOR tipo var_declaracion2
    (141) epsilon -> .
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    VECTOR          shift and go to state 8
    ID              reduce using rule 141 (epsilon -> .)
    IF              reduce using rule 141 (epsilon -> .)
    SWITCH          reduce using rule 141 (epsilon -> .)
    WHILE           reduce using rule 141 (epsilon -> .)
    FOR             reduce using rule 141 (epsilon -> .)
    PRINT           reduce using rule 141 (epsilon -> .)
    INPUT           reduce using rule 141 (epsilon -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 5
    main1                          shift and go to state 116
    var_declaracion                shift and go to state 74
    epsilon                        shift and go to state 75

state 75

    (48) main1 -> epsilon .

    ID              reduce using rule 48 (main1 -> epsilon .)
    IF              reduce using rule 48 (main1 -> epsilon .)
    SWITCH          reduce using rule 48 (main1 -> epsilon .)
    WHILE           reduce using rule 48 (main1 -> epsilon .)
    FOR             reduce using rule 48 (main1 -> epsilon .)
    PRINT           reduce using rule 48 (main1 -> epsilon .)
    INPUT           reduce using rule 48 (main1 -> epsilon .)


state 76

    (40) inicializacion_vector -> EQUALS LBRACKET . inicializacion_vector1 RBRACKET
    (41) inicializacion_vector1 -> . varcte inicializacion_vector2
    (42) inicializacion_vector1 -> . epsilon
    (85) varcte -> . ID varcte1
    (86) varcte -> . CTE_INT tipoINT
    (87) varcte -> . CTE_FLOAT tipoFLOAT
    (88) varcte -> . CTE_STRING tipoSTRING
    (89) varcte -> . cte_bool
    (141) epsilon -> .
    (98) cte_bool -> . TRUE
    (99) cte_bool -> . FALSE

    ID              shift and go to state 49
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 52
    CTE_STRING      shift and go to state 46
    RBRACKET        reduce using rule 141 (epsilon -> .)
    TRUE            shift and go to state 41
    FALSE           shift and go to state 50

    varcte                         shift and go to state 117
    epsilon                        shift and go to state 118
    cte_bool                       shift and go to state 39
    inicializacion_vector1         shift and go to state 119

state 77

    (34) exp1 -> epsilon .

    VECTOR          reduce using rule 34 (exp1 -> epsilon .)
    INT             reduce using rule 34 (exp1 -> epsilon .)
    FLOAT           reduce using rule 34 (exp1 -> epsilon .)
    BOOL            reduce using rule 34 (exp1 -> epsilon .)
    STRING          reduce using rule 34 (exp1 -> epsilon .)
    FUNCTION        reduce using rule 34 (exp1 -> epsilon .)
    MAIN            reduce using rule 34 (exp1 -> epsilon .)
    ID              reduce using rule 34 (exp1 -> epsilon .)
    IF              reduce using rule 34 (exp1 -> epsilon .)
    SWITCH          reduce using rule 34 (exp1 -> epsilon .)
    WHILE           reduce using rule 34 (exp1 -> epsilon .)
    FOR             reduce using rule 34 (exp1 -> epsilon .)
    PRINT           reduce using rule 34 (exp1 -> epsilon .)
    INPUT           reduce using rule 34 (exp1 -> epsilon .)
    COMMA           reduce using rule 34 (exp1 -> epsilon .)
    RPAREN          reduce using rule 34 (exp1 -> epsilon .)
    RBRACKET        reduce using rule 34 (exp1 -> epsilon .)
    RCURL           reduce using rule 34 (exp1 -> epsilon .)
    RETURN          reduce using rule 34 (exp1 -> epsilon .)
    CASE            reduce using rule 34 (exp1 -> epsilon .)
    DEFAULT         reduce using rule 34 (exp1 -> epsilon .)
    AND             reduce using rule 34 (exp1 -> epsilon .)
    OR              reduce using rule 34 (exp1 -> epsilon .)
    LESS            reduce using rule 34 (exp1 -> epsilon .)
    GREATER         reduce using rule 34 (exp1 -> epsilon .)
    DOUBLE_EQUAL    reduce using rule 34 (exp1 -> epsilon .)
    DIFF            reduce using rule 34 (exp1 -> epsilon .)


state 78

    (30) exp -> termino checkEXPPOper exp1 .

    COMMA           reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    RPAREN          reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    LESS            reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    GREATER         reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    DOUBLE_EQUAL    reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    DIFF            reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    RBRACKET        reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    ID              reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    IF              reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    SWITCH          reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    WHILE           reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    FOR             reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    PRINT           reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    INPUT           reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    RCURL           reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    RETURN          reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    CASE            reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    DEFAULT         reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    VECTOR          reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    INT             reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    FLOAT           reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    BOOL            reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    STRING          reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    FUNCTION        reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    MAIN            reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    AND             reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    OR              reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)


state 79

    (32) exp1 -> PLUS . exp
    (30) exp -> . termino checkEXPPOper exp1
    (35) termino -> . factor checkTERMPOper termino1
    (52) factor -> . LPAREN factorAddFakeCover expresion RPAREN
    (53) factor -> . factor1
    (55) factor1 -> . PLUS varcte
    (56) factor1 -> . MINUS varcte
    (57) factor1 -> . varcte
    (85) varcte -> . ID varcte1
    (86) varcte -> . CTE_INT tipoINT
    (87) varcte -> . CTE_FLOAT tipoFLOAT
    (88) varcte -> . CTE_STRING tipoSTRING
    (89) varcte -> . cte_bool
    (98) cte_bool -> . TRUE
    (99) cte_bool -> . FALSE

    LPAREN          shift and go to state 47
    PLUS            shift and go to state 44
    MINUS           shift and go to state 42
    ID              shift and go to state 49
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 52
    CTE_STRING      shift and go to state 46
    TRUE            shift and go to state 41
    FALSE           shift and go to state 50

    factor1                        shift and go to state 51
    cte_bool                       shift and go to state 39
    termino                        shift and go to state 40
    exp                            shift and go to state 120
    factor                         shift and go to state 45
    varcte                         shift and go to state 43

state 80

    (33) exp1 -> MINUS . exp
    (30) exp -> . termino checkEXPPOper exp1
    (35) termino -> . factor checkTERMPOper termino1
    (52) factor -> . LPAREN factorAddFakeCover expresion RPAREN
    (53) factor -> . factor1
    (55) factor1 -> . PLUS varcte
    (56) factor1 -> . MINUS varcte
    (57) factor1 -> . varcte
    (85) varcte -> . ID varcte1
    (86) varcte -> . CTE_INT tipoINT
    (87) varcte -> . CTE_FLOAT tipoFLOAT
    (88) varcte -> . CTE_STRING tipoSTRING
    (89) varcte -> . cte_bool
    (98) cte_bool -> . TRUE
    (99) cte_bool -> . FALSE

    LPAREN          shift and go to state 47
    PLUS            shift and go to state 44
    MINUS           shift and go to state 42
    ID              shift and go to state 49
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 52
    CTE_STRING      shift and go to state 46
    TRUE            shift and go to state 41
    FALSE           shift and go to state 50

    factor1                        shift and go to state 51
    cte_bool                       shift and go to state 39
    termino                        shift and go to state 40
    exp                            shift and go to state 121
    factor                         shift and go to state 45
    varcte                         shift and go to state 43

state 81

    (38) termino1 -> DIVIDE . termino
    (35) termino -> . factor checkTERMPOper termino1
    (52) factor -> . LPAREN factorAddFakeCover expresion RPAREN
    (53) factor -> . factor1
    (55) factor1 -> . PLUS varcte
    (56) factor1 -> . MINUS varcte
    (57) factor1 -> . varcte
    (85) varcte -> . ID varcte1
    (86) varcte -> . CTE_INT tipoINT
    (87) varcte -> . CTE_FLOAT tipoFLOAT
    (88) varcte -> . CTE_STRING tipoSTRING
    (89) varcte -> . cte_bool
    (98) cte_bool -> . TRUE
    (99) cte_bool -> . FALSE

    LPAREN          shift and go to state 47
    PLUS            shift and go to state 44
    MINUS           shift and go to state 42
    ID              shift and go to state 49
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 52
    CTE_STRING      shift and go to state 46
    TRUE            shift and go to state 41
    FALSE           shift and go to state 50

    factor1                        shift and go to state 51
    cte_bool                       shift and go to state 39
    termino                        shift and go to state 122
    factor                         shift and go to state 45
    varcte                         shift and go to state 43

state 82

    (39) termino1 -> epsilon .

    PLUS            reduce using rule 39 (termino1 -> epsilon .)
    MINUS           reduce using rule 39 (termino1 -> epsilon .)
    VECTOR          reduce using rule 39 (termino1 -> epsilon .)
    INT             reduce using rule 39 (termino1 -> epsilon .)
    FLOAT           reduce using rule 39 (termino1 -> epsilon .)
    BOOL            reduce using rule 39 (termino1 -> epsilon .)
    STRING          reduce using rule 39 (termino1 -> epsilon .)
    FUNCTION        reduce using rule 39 (termino1 -> epsilon .)
    MAIN            reduce using rule 39 (termino1 -> epsilon .)
    ID              reduce using rule 39 (termino1 -> epsilon .)
    IF              reduce using rule 39 (termino1 -> epsilon .)
    SWITCH          reduce using rule 39 (termino1 -> epsilon .)
    WHILE           reduce using rule 39 (termino1 -> epsilon .)
    FOR             reduce using rule 39 (termino1 -> epsilon .)
    PRINT           reduce using rule 39 (termino1 -> epsilon .)
    INPUT           reduce using rule 39 (termino1 -> epsilon .)
    COMMA           reduce using rule 39 (termino1 -> epsilon .)
    RPAREN          reduce using rule 39 (termino1 -> epsilon .)
    RBRACKET        reduce using rule 39 (termino1 -> epsilon .)
    RCURL           reduce using rule 39 (termino1 -> epsilon .)
    RETURN          reduce using rule 39 (termino1 -> epsilon .)
    CASE            reduce using rule 39 (termino1 -> epsilon .)
    DEFAULT         reduce using rule 39 (termino1 -> epsilon .)
    AND             reduce using rule 39 (termino1 -> epsilon .)
    OR              reduce using rule 39 (termino1 -> epsilon .)
    LESS            reduce using rule 39 (termino1 -> epsilon .)
    GREATER         reduce using rule 39 (termino1 -> epsilon .)
    DOUBLE_EQUAL    reduce using rule 39 (termino1 -> epsilon .)
    DIFF            reduce using rule 39 (termino1 -> epsilon .)


state 83

    (35) termino -> factor checkTERMPOper termino1 .

    PLUS            reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    MINUS           reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    VECTOR          reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    INT             reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    FLOAT           reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    BOOL            reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    STRING          reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    FUNCTION        reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    MAIN            reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    ID              reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    IF              reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    SWITCH          reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    WHILE           reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    FOR             reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    PRINT           reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    INPUT           reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    COMMA           reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    RPAREN          reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    RBRACKET        reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    RCURL           reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    RETURN          reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    CASE            reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    DEFAULT         reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    AND             reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    OR              reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    LESS            reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    GREATER         reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    DOUBLE_EQUAL    reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    DIFF            reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)


state 84

    (37) termino1 -> TIMES . termino
    (35) termino -> . factor checkTERMPOper termino1
    (52) factor -> . LPAREN factorAddFakeCover expresion RPAREN
    (53) factor -> . factor1
    (55) factor1 -> . PLUS varcte
    (56) factor1 -> . MINUS varcte
    (57) factor1 -> . varcte
    (85) varcte -> . ID varcte1
    (86) varcte -> . CTE_INT tipoINT
    (87) varcte -> . CTE_FLOAT tipoFLOAT
    (88) varcte -> . CTE_STRING tipoSTRING
    (89) varcte -> . cte_bool
    (98) cte_bool -> . TRUE
    (99) cte_bool -> . FALSE

    LPAREN          shift and go to state 47
    PLUS            shift and go to state 44
    MINUS           shift and go to state 42
    ID              shift and go to state 49
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 52
    CTE_STRING      shift and go to state 46
    TRUE            shift and go to state 41
    FALSE           shift and go to state 50

    factor1                        shift and go to state 51
    cte_bool                       shift and go to state 39
    termino                        shift and go to state 123
    factor                         shift and go to state 45
    varcte                         shift and go to state 43

state 85

    (52) factor -> LPAREN factorAddFakeCover expresion . RPAREN

    RPAREN          shift and go to state 124


state 86

    (67) expresion -> expresion1 .

    RPAREN          reduce using rule 67 (expresion -> expresion1 .)


state 87

    (69) expresion1 -> expresion2 . exp
    (30) exp -> . termino checkEXPPOper exp1
    (35) termino -> . factor checkTERMPOper termino1
    (52) factor -> . LPAREN factorAddFakeCover expresion RPAREN
    (53) factor -> . factor1
    (55) factor1 -> . PLUS varcte
    (56) factor1 -> . MINUS varcte
    (57) factor1 -> . varcte
    (85) varcte -> . ID varcte1
    (86) varcte -> . CTE_INT tipoINT
    (87) varcte -> . CTE_FLOAT tipoFLOAT
    (88) varcte -> . CTE_STRING tipoSTRING
    (89) varcte -> . cte_bool
    (98) cte_bool -> . TRUE
    (99) cte_bool -> . FALSE

    LPAREN          shift and go to state 47
    PLUS            shift and go to state 44
    MINUS           shift and go to state 42
    ID              shift and go to state 49
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 52
    CTE_STRING      shift and go to state 46
    TRUE            shift and go to state 41
    FALSE           shift and go to state 50

    factor1                        shift and go to state 51
    cte_bool                       shift and go to state 39
    termino                        shift and go to state 40
    exp                            shift and go to state 125
    factor                         shift and go to state 45
    varcte                         shift and go to state 43

state 88

    (70) expresion2 -> LESS .

    LPAREN          reduce using rule 70 (expresion2 -> LESS .)
    PLUS            reduce using rule 70 (expresion2 -> LESS .)
    MINUS           reduce using rule 70 (expresion2 -> LESS .)
    ID              reduce using rule 70 (expresion2 -> LESS .)
    CTE_INT         reduce using rule 70 (expresion2 -> LESS .)
    CTE_FLOAT       reduce using rule 70 (expresion2 -> LESS .)
    CTE_STRING      reduce using rule 70 (expresion2 -> LESS .)
    TRUE            reduce using rule 70 (expresion2 -> LESS .)
    FALSE           reduce using rule 70 (expresion2 -> LESS .)


state 89

    (68) expresion1 -> epsilon .

    RPAREN          reduce using rule 68 (expresion1 -> epsilon .)


state 90

    (72) expresion2 -> DOUBLE_EQUAL .

    LPAREN          reduce using rule 72 (expresion2 -> DOUBLE_EQUAL .)
    PLUS            reduce using rule 72 (expresion2 -> DOUBLE_EQUAL .)
    MINUS           reduce using rule 72 (expresion2 -> DOUBLE_EQUAL .)
    ID              reduce using rule 72 (expresion2 -> DOUBLE_EQUAL .)
    CTE_INT         reduce using rule 72 (expresion2 -> DOUBLE_EQUAL .)
    CTE_FLOAT       reduce using rule 72 (expresion2 -> DOUBLE_EQUAL .)
    CTE_STRING      reduce using rule 72 (expresion2 -> DOUBLE_EQUAL .)
    TRUE            reduce using rule 72 (expresion2 -> DOUBLE_EQUAL .)
    FALSE           reduce using rule 72 (expresion2 -> DOUBLE_EQUAL .)


state 91

    (73) expresion2 -> DIFF .

    LPAREN          reduce using rule 73 (expresion2 -> DIFF .)
    PLUS            reduce using rule 73 (expresion2 -> DIFF .)
    MINUS           reduce using rule 73 (expresion2 -> DIFF .)
    ID              reduce using rule 73 (expresion2 -> DIFF .)
    CTE_INT         reduce using rule 73 (expresion2 -> DIFF .)
    CTE_FLOAT       reduce using rule 73 (expresion2 -> DIFF .)
    CTE_STRING      reduce using rule 73 (expresion2 -> DIFF .)
    TRUE            reduce using rule 73 (expresion2 -> DIFF .)
    FALSE           reduce using rule 73 (expresion2 -> DIFF .)


state 92

    (71) expresion2 -> GREATER .

    LPAREN          reduce using rule 71 (expresion2 -> GREATER .)
    PLUS            reduce using rule 71 (expresion2 -> GREATER .)
    MINUS           reduce using rule 71 (expresion2 -> GREATER .)
    ID              reduce using rule 71 (expresion2 -> GREATER .)
    CTE_INT         reduce using rule 71 (expresion2 -> GREATER .)
    CTE_FLOAT       reduce using rule 71 (expresion2 -> GREATER .)
    CTE_STRING      reduce using rule 71 (expresion2 -> GREATER .)
    TRUE            reduce using rule 71 (expresion2 -> GREATER .)
    FALSE           reduce using rule 71 (expresion2 -> GREATER .)


state 93

    (94) varcte1 -> LPAREN exp . varcte2 RPAREN
    (96) varcte2 -> . epsilon
    (97) varcte2 -> . COMMA exp varcte2
    (141) epsilon -> .

    COMMA           shift and go to state 127
    RPAREN          reduce using rule 141 (epsilon -> .)

    epsilon                        shift and go to state 126
    varcte2                        shift and go to state 128

state 94

    (95) varcte1 -> LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 129


state 95

    (16) parametros -> tipo . parametros1 ID parametros2
    (18) parametros1 -> . AMPERSON
    (19) parametros1 -> . epsilon
    (141) epsilon -> .

    AMPERSON        shift and go to state 132
    ID              reduce using rule 141 (epsilon -> .)

    parametros1                    shift and go to state 131
    epsilon                        shift and go to state 130

state 96

    (126) funcion3 -> epsilon .

    RPAREN          reduce using rule 126 (funcion3 -> epsilon .)


state 97

    (129) funcion5 -> ID declareFunc LPAREN funcion3 . RPAREN LCURL funcion1 estatuto funcion2 funcion6

    RPAREN          shift and go to state 133


state 98

    (125) funcion3 -> parametros .

    RPAREN          reduce using rule 125 (funcion3 -> parametros .)


state 99

    (17) parametros -> VECTOR . tipo parametros1 ID parametros2
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 134

state 100

    (51) while -> WHILE . LPAREN expresion RPAREN bloque

    LPAREN          shift and go to state 135


state 101

    (100) print -> PRINT . LPAREN print1 RPAREN

    LPAREN          shift and go to state 136


state 102

    (63) estatuto -> for .

    CASE            reduce using rule 63 (estatuto -> for .)
    DEFAULT         reduce using rule 63 (estatuto -> for .)
    ID              reduce using rule 63 (estatuto -> for .)
    IF              reduce using rule 63 (estatuto -> for .)
    SWITCH          reduce using rule 63 (estatuto -> for .)
    WHILE           reduce using rule 63 (estatuto -> for .)
    FOR             reduce using rule 63 (estatuto -> for .)
    PRINT           reduce using rule 63 (estatuto -> for .)
    INPUT           reduce using rule 63 (estatuto -> for .)
    RCURL           reduce using rule 63 (estatuto -> for .)
    RETURN          reduce using rule 63 (estatuto -> for .)


state 103

    (45) main -> MAIN declareMain LCURL main1 estatuto . main2 RCURL
    (49) main2 -> . estatuto main2
    (50) main2 -> . epsilon
    (58) estatuto -> . asignacion
    (59) estatuto -> . llamada
    (60) estatuto -> . condicion
    (61) estatuto -> . switch
    (62) estatuto -> . while
    (63) estatuto -> . for
    (141) epsilon -> .
    (64) asignacion -> . ID EQUALS asignacion1
    (78) llamada -> . ID LPAREN llamada1 RPAREN
    (79) llamada -> . print
    (80) llamada -> . input
    (105) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (133) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (51) while -> . WHILE LPAREN expresion RPAREN bloque
    (115) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (100) print -> . PRINT LPAREN print1 RPAREN
    (112) input -> . INPUT LPAREN input1 RPAREN

    RCURL           reduce using rule 141 (epsilon -> .)
    ID              shift and go to state 111
    IF              shift and go to state 112
    SWITCH          shift and go to state 105
    WHILE           shift and go to state 100
    FOR             shift and go to state 109
    PRINT           shift and go to state 101
    INPUT           shift and go to state 110

    for                            shift and go to state 102
    estatuto                       shift and go to state 137
    switch                         shift and go to state 114
    llamada                        shift and go to state 104
    condicion                      shift and go to state 106
    epsilon                        shift and go to state 138
    print                          shift and go to state 107
    input                          shift and go to state 108
    main2                          shift and go to state 139
    asignacion                     shift and go to state 113
    while                          shift and go to state 115

state 104

    (59) estatuto -> llamada .

    CASE            reduce using rule 59 (estatuto -> llamada .)
    DEFAULT         reduce using rule 59 (estatuto -> llamada .)
    ID              reduce using rule 59 (estatuto -> llamada .)
    IF              reduce using rule 59 (estatuto -> llamada .)
    SWITCH          reduce using rule 59 (estatuto -> llamada .)
    WHILE           reduce using rule 59 (estatuto -> llamada .)
    FOR             reduce using rule 59 (estatuto -> llamada .)
    PRINT           reduce using rule 59 (estatuto -> llamada .)
    INPUT           reduce using rule 59 (estatuto -> llamada .)
    RCURL           reduce using rule 59 (estatuto -> llamada .)
    RETURN          reduce using rule 59 (estatuto -> llamada .)


state 105

    (133) switch -> SWITCH . ID switch1 LCURL switch2 switch3 RCURL

    ID              shift and go to state 140


state 106

    (60) estatuto -> condicion .

    CASE            reduce using rule 60 (estatuto -> condicion .)
    DEFAULT         reduce using rule 60 (estatuto -> condicion .)
    ID              reduce using rule 60 (estatuto -> condicion .)
    IF              reduce using rule 60 (estatuto -> condicion .)
    SWITCH          reduce using rule 60 (estatuto -> condicion .)
    WHILE           reduce using rule 60 (estatuto -> condicion .)
    FOR             reduce using rule 60 (estatuto -> condicion .)
    PRINT           reduce using rule 60 (estatuto -> condicion .)
    INPUT           reduce using rule 60 (estatuto -> condicion .)
    RCURL           reduce using rule 60 (estatuto -> condicion .)
    RETURN          reduce using rule 60 (estatuto -> condicion .)


state 107

    (79) llamada -> print .

    ID              reduce using rule 79 (llamada -> print .)
    IF              reduce using rule 79 (llamada -> print .)
    SWITCH          reduce using rule 79 (llamada -> print .)
    WHILE           reduce using rule 79 (llamada -> print .)
    FOR             reduce using rule 79 (llamada -> print .)
    PRINT           reduce using rule 79 (llamada -> print .)
    INPUT           reduce using rule 79 (llamada -> print .)
    RCURL           reduce using rule 79 (llamada -> print .)
    RETURN          reduce using rule 79 (llamada -> print .)
    CASE            reduce using rule 79 (llamada -> print .)
    DEFAULT         reduce using rule 79 (llamada -> print .)


state 108

    (80) llamada -> input .

    ID              reduce using rule 80 (llamada -> input .)
    IF              reduce using rule 80 (llamada -> input .)
    SWITCH          reduce using rule 80 (llamada -> input .)
    WHILE           reduce using rule 80 (llamada -> input .)
    FOR             reduce using rule 80 (llamada -> input .)
    PRINT           reduce using rule 80 (llamada -> input .)
    INPUT           reduce using rule 80 (llamada -> input .)
    RCURL           reduce using rule 80 (llamada -> input .)
    RETURN          reduce using rule 80 (llamada -> input .)
    CASE            reduce using rule 80 (llamada -> input .)
    DEFAULT         reduce using rule 80 (llamada -> input .)


state 109

    (115) for -> FOR . CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque

    CTE_INT         shift and go to state 141


state 110

    (112) input -> INPUT . LPAREN input1 RPAREN

    LPAREN          shift and go to state 142


state 111

    (64) asignacion -> ID . EQUALS asignacion1
    (78) llamada -> ID . LPAREN llamada1 RPAREN

    EQUALS          shift and go to state 143
    LPAREN          shift and go to state 144


state 112

    (105) condicion -> IF . LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3

    LPAREN          shift and go to state 145


state 113

    (58) estatuto -> asignacion .

    CASE            reduce using rule 58 (estatuto -> asignacion .)
    DEFAULT         reduce using rule 58 (estatuto -> asignacion .)
    ID              reduce using rule 58 (estatuto -> asignacion .)
    IF              reduce using rule 58 (estatuto -> asignacion .)
    SWITCH          reduce using rule 58 (estatuto -> asignacion .)
    WHILE           reduce using rule 58 (estatuto -> asignacion .)
    FOR             reduce using rule 58 (estatuto -> asignacion .)
    PRINT           reduce using rule 58 (estatuto -> asignacion .)
    INPUT           reduce using rule 58 (estatuto -> asignacion .)
    RCURL           reduce using rule 58 (estatuto -> asignacion .)
    RETURN          reduce using rule 58 (estatuto -> asignacion .)


state 114

    (61) estatuto -> switch .

    CASE            reduce using rule 61 (estatuto -> switch .)
    DEFAULT         reduce using rule 61 (estatuto -> switch .)
    ID              reduce using rule 61 (estatuto -> switch .)
    IF              reduce using rule 61 (estatuto -> switch .)
    SWITCH          reduce using rule 61 (estatuto -> switch .)
    WHILE           reduce using rule 61 (estatuto -> switch .)
    FOR             reduce using rule 61 (estatuto -> switch .)
    PRINT           reduce using rule 61 (estatuto -> switch .)
    INPUT           reduce using rule 61 (estatuto -> switch .)
    RCURL           reduce using rule 61 (estatuto -> switch .)
    RETURN          reduce using rule 61 (estatuto -> switch .)


state 115

    (62) estatuto -> while .

    CASE            reduce using rule 62 (estatuto -> while .)
    DEFAULT         reduce using rule 62 (estatuto -> while .)
    ID              reduce using rule 62 (estatuto -> while .)
    IF              reduce using rule 62 (estatuto -> while .)
    SWITCH          reduce using rule 62 (estatuto -> while .)
    WHILE           reduce using rule 62 (estatuto -> while .)
    FOR             reduce using rule 62 (estatuto -> while .)
    PRINT           reduce using rule 62 (estatuto -> while .)
    INPUT           reduce using rule 62 (estatuto -> while .)
    RCURL           reduce using rule 62 (estatuto -> while .)
    RETURN          reduce using rule 62 (estatuto -> while .)


state 116

    (47) main1 -> var_declaracion main1 .

    ID              reduce using rule 47 (main1 -> var_declaracion main1 .)
    IF              reduce using rule 47 (main1 -> var_declaracion main1 .)
    SWITCH          reduce using rule 47 (main1 -> var_declaracion main1 .)
    WHILE           reduce using rule 47 (main1 -> var_declaracion main1 .)
    FOR             reduce using rule 47 (main1 -> var_declaracion main1 .)
    PRINT           reduce using rule 47 (main1 -> var_declaracion main1 .)
    INPUT           reduce using rule 47 (main1 -> var_declaracion main1 .)


state 117

    (41) inicializacion_vector1 -> varcte . inicializacion_vector2
    (43) inicializacion_vector2 -> . COMMA varcte inicializacion_vector2
    (44) inicializacion_vector2 -> . epsilon
    (141) epsilon -> .

    COMMA           shift and go to state 148
    RBRACKET        reduce using rule 141 (epsilon -> .)

    inicializacion_vector2         shift and go to state 146
    epsilon                        shift and go to state 147

state 118

    (42) inicializacion_vector1 -> epsilon .

    RBRACKET        reduce using rule 42 (inicializacion_vector1 -> epsilon .)


state 119

    (40) inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 . RBRACKET

    RBRACKET        shift and go to state 149


state 120

    (32) exp1 -> PLUS exp .

    VECTOR          reduce using rule 32 (exp1 -> PLUS exp .)
    INT             reduce using rule 32 (exp1 -> PLUS exp .)
    FLOAT           reduce using rule 32 (exp1 -> PLUS exp .)
    BOOL            reduce using rule 32 (exp1 -> PLUS exp .)
    STRING          reduce using rule 32 (exp1 -> PLUS exp .)
    FUNCTION        reduce using rule 32 (exp1 -> PLUS exp .)
    MAIN            reduce using rule 32 (exp1 -> PLUS exp .)
    ID              reduce using rule 32 (exp1 -> PLUS exp .)
    IF              reduce using rule 32 (exp1 -> PLUS exp .)
    SWITCH          reduce using rule 32 (exp1 -> PLUS exp .)
    WHILE           reduce using rule 32 (exp1 -> PLUS exp .)
    FOR             reduce using rule 32 (exp1 -> PLUS exp .)
    PRINT           reduce using rule 32 (exp1 -> PLUS exp .)
    INPUT           reduce using rule 32 (exp1 -> PLUS exp .)
    COMMA           reduce using rule 32 (exp1 -> PLUS exp .)
    RPAREN          reduce using rule 32 (exp1 -> PLUS exp .)
    RBRACKET        reduce using rule 32 (exp1 -> PLUS exp .)
    RCURL           reduce using rule 32 (exp1 -> PLUS exp .)
    RETURN          reduce using rule 32 (exp1 -> PLUS exp .)
    CASE            reduce using rule 32 (exp1 -> PLUS exp .)
    DEFAULT         reduce using rule 32 (exp1 -> PLUS exp .)
    AND             reduce using rule 32 (exp1 -> PLUS exp .)
    OR              reduce using rule 32 (exp1 -> PLUS exp .)
    LESS            reduce using rule 32 (exp1 -> PLUS exp .)
    GREATER         reduce using rule 32 (exp1 -> PLUS exp .)
    DOUBLE_EQUAL    reduce using rule 32 (exp1 -> PLUS exp .)
    DIFF            reduce using rule 32 (exp1 -> PLUS exp .)


state 121

    (33) exp1 -> MINUS exp .

    VECTOR          reduce using rule 33 (exp1 -> MINUS exp .)
    INT             reduce using rule 33 (exp1 -> MINUS exp .)
    FLOAT           reduce using rule 33 (exp1 -> MINUS exp .)
    BOOL            reduce using rule 33 (exp1 -> MINUS exp .)
    STRING          reduce using rule 33 (exp1 -> MINUS exp .)
    FUNCTION        reduce using rule 33 (exp1 -> MINUS exp .)
    MAIN            reduce using rule 33 (exp1 -> MINUS exp .)
    ID              reduce using rule 33 (exp1 -> MINUS exp .)
    IF              reduce using rule 33 (exp1 -> MINUS exp .)
    SWITCH          reduce using rule 33 (exp1 -> MINUS exp .)
    WHILE           reduce using rule 33 (exp1 -> MINUS exp .)
    FOR             reduce using rule 33 (exp1 -> MINUS exp .)
    PRINT           reduce using rule 33 (exp1 -> MINUS exp .)
    INPUT           reduce using rule 33 (exp1 -> MINUS exp .)
    COMMA           reduce using rule 33 (exp1 -> MINUS exp .)
    RPAREN          reduce using rule 33 (exp1 -> MINUS exp .)
    RBRACKET        reduce using rule 33 (exp1 -> MINUS exp .)
    RCURL           reduce using rule 33 (exp1 -> MINUS exp .)
    RETURN          reduce using rule 33 (exp1 -> MINUS exp .)
    CASE            reduce using rule 33 (exp1 -> MINUS exp .)
    DEFAULT         reduce using rule 33 (exp1 -> MINUS exp .)
    AND             reduce using rule 33 (exp1 -> MINUS exp .)
    OR              reduce using rule 33 (exp1 -> MINUS exp .)
    LESS            reduce using rule 33 (exp1 -> MINUS exp .)
    GREATER         reduce using rule 33 (exp1 -> MINUS exp .)
    DOUBLE_EQUAL    reduce using rule 33 (exp1 -> MINUS exp .)
    DIFF            reduce using rule 33 (exp1 -> MINUS exp .)


state 122

    (38) termino1 -> DIVIDE termino .

    PLUS            reduce using rule 38 (termino1 -> DIVIDE termino .)
    MINUS           reduce using rule 38 (termino1 -> DIVIDE termino .)
    VECTOR          reduce using rule 38 (termino1 -> DIVIDE termino .)
    INT             reduce using rule 38 (termino1 -> DIVIDE termino .)
    FLOAT           reduce using rule 38 (termino1 -> DIVIDE termino .)
    BOOL            reduce using rule 38 (termino1 -> DIVIDE termino .)
    STRING          reduce using rule 38 (termino1 -> DIVIDE termino .)
    FUNCTION        reduce using rule 38 (termino1 -> DIVIDE termino .)
    MAIN            reduce using rule 38 (termino1 -> DIVIDE termino .)
    ID              reduce using rule 38 (termino1 -> DIVIDE termino .)
    IF              reduce using rule 38 (termino1 -> DIVIDE termino .)
    SWITCH          reduce using rule 38 (termino1 -> DIVIDE termino .)
    WHILE           reduce using rule 38 (termino1 -> DIVIDE termino .)
    FOR             reduce using rule 38 (termino1 -> DIVIDE termino .)
    PRINT           reduce using rule 38 (termino1 -> DIVIDE termino .)
    INPUT           reduce using rule 38 (termino1 -> DIVIDE termino .)
    COMMA           reduce using rule 38 (termino1 -> DIVIDE termino .)
    RPAREN          reduce using rule 38 (termino1 -> DIVIDE termino .)
    RBRACKET        reduce using rule 38 (termino1 -> DIVIDE termino .)
    RCURL           reduce using rule 38 (termino1 -> DIVIDE termino .)
    RETURN          reduce using rule 38 (termino1 -> DIVIDE termino .)
    CASE            reduce using rule 38 (termino1 -> DIVIDE termino .)
    DEFAULT         reduce using rule 38 (termino1 -> DIVIDE termino .)
    AND             reduce using rule 38 (termino1 -> DIVIDE termino .)
    OR              reduce using rule 38 (termino1 -> DIVIDE termino .)
    LESS            reduce using rule 38 (termino1 -> DIVIDE termino .)
    GREATER         reduce using rule 38 (termino1 -> DIVIDE termino .)
    DOUBLE_EQUAL    reduce using rule 38 (termino1 -> DIVIDE termino .)
    DIFF            reduce using rule 38 (termino1 -> DIVIDE termino .)


state 123

    (37) termino1 -> TIMES termino .

    PLUS            reduce using rule 37 (termino1 -> TIMES termino .)
    MINUS           reduce using rule 37 (termino1 -> TIMES termino .)
    VECTOR          reduce using rule 37 (termino1 -> TIMES termino .)
    INT             reduce using rule 37 (termino1 -> TIMES termino .)
    FLOAT           reduce using rule 37 (termino1 -> TIMES termino .)
    BOOL            reduce using rule 37 (termino1 -> TIMES termino .)
    STRING          reduce using rule 37 (termino1 -> TIMES termino .)
    FUNCTION        reduce using rule 37 (termino1 -> TIMES termino .)
    MAIN            reduce using rule 37 (termino1 -> TIMES termino .)
    ID              reduce using rule 37 (termino1 -> TIMES termino .)
    IF              reduce using rule 37 (termino1 -> TIMES termino .)
    SWITCH          reduce using rule 37 (termino1 -> TIMES termino .)
    WHILE           reduce using rule 37 (termino1 -> TIMES termino .)
    FOR             reduce using rule 37 (termino1 -> TIMES termino .)
    PRINT           reduce using rule 37 (termino1 -> TIMES termino .)
    INPUT           reduce using rule 37 (termino1 -> TIMES termino .)
    COMMA           reduce using rule 37 (termino1 -> TIMES termino .)
    RPAREN          reduce using rule 37 (termino1 -> TIMES termino .)
    RBRACKET        reduce using rule 37 (termino1 -> TIMES termino .)
    RCURL           reduce using rule 37 (termino1 -> TIMES termino .)
    RETURN          reduce using rule 37 (termino1 -> TIMES termino .)
    CASE            reduce using rule 37 (termino1 -> TIMES termino .)
    DEFAULT         reduce using rule 37 (termino1 -> TIMES termino .)
    AND             reduce using rule 37 (termino1 -> TIMES termino .)
    OR              reduce using rule 37 (termino1 -> TIMES termino .)
    LESS            reduce using rule 37 (termino1 -> TIMES termino .)
    GREATER         reduce using rule 37 (termino1 -> TIMES termino .)
    DOUBLE_EQUAL    reduce using rule 37 (termino1 -> TIMES termino .)
    DIFF            reduce using rule 37 (termino1 -> TIMES termino .)


state 124

    (52) factor -> LPAREN factorAddFakeCover expresion RPAREN .

    TIMES           reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)
    DIVIDE          reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)
    PLUS            reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)
    MINUS           reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)
    COMMA           reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)
    RPAREN          reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)
    VECTOR          reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)
    INT             reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)
    FLOAT           reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)
    BOOL            reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)
    STRING          reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)
    FUNCTION        reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)
    MAIN            reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)
    ID              reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)
    IF              reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)
    SWITCH          reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)
    WHILE           reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)
    FOR             reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)
    PRINT           reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)
    INPUT           reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)
    RBRACKET        reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)
    RCURL           reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)
    RETURN          reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)
    CASE            reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)
    DEFAULT         reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)
    AND             reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)
    OR              reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)
    LESS            reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)
    GREATER         reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)
    DOUBLE_EQUAL    reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)
    DIFF            reduce using rule 52 (factor -> LPAREN factorAddFakeCover expresion RPAREN .)


state 125

    (69) expresion1 -> expresion2 exp .

    RPAREN          reduce using rule 69 (expresion1 -> expresion2 exp .)


state 126

    (96) varcte2 -> epsilon .

    RPAREN          reduce using rule 96 (varcte2 -> epsilon .)


state 127

    (97) varcte2 -> COMMA . exp varcte2
    (30) exp -> . termino checkEXPPOper exp1
    (35) termino -> . factor checkTERMPOper termino1
    (52) factor -> . LPAREN factorAddFakeCover expresion RPAREN
    (53) factor -> . factor1
    (55) factor1 -> . PLUS varcte
    (56) factor1 -> . MINUS varcte
    (57) factor1 -> . varcte
    (85) varcte -> . ID varcte1
    (86) varcte -> . CTE_INT tipoINT
    (87) varcte -> . CTE_FLOAT tipoFLOAT
    (88) varcte -> . CTE_STRING tipoSTRING
    (89) varcte -> . cte_bool
    (98) cte_bool -> . TRUE
    (99) cte_bool -> . FALSE

    LPAREN          shift and go to state 47
    PLUS            shift and go to state 44
    MINUS           shift and go to state 42
    ID              shift and go to state 49
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 52
    CTE_STRING      shift and go to state 46
    TRUE            shift and go to state 41
    FALSE           shift and go to state 50

    factor1                        shift and go to state 51
    cte_bool                       shift and go to state 39
    termino                        shift and go to state 40
    exp                            shift and go to state 150
    factor                         shift and go to state 45
    varcte                         shift and go to state 43

state 128

    (94) varcte1 -> LPAREN exp varcte2 . RPAREN

    RPAREN          shift and go to state 151


state 129

    (95) varcte1 -> LBRACKET exp RBRACKET .

    TIMES           reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    DIVIDE          reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    VECTOR          reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    INT             reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    FLOAT           reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    BOOL            reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    STRING          reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    FUNCTION        reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    MAIN            reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    ID              reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    IF              reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    SWITCH          reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    WHILE           reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    FOR             reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    PRINT           reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    INPUT           reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    COMMA           reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    RCURL           reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    RETURN          reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    CASE            reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    DEFAULT         reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    AND             reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    OR              reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    LESS            reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    GREATER         reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    DOUBLE_EQUAL    reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    DIFF            reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)
    COLON           reduce using rule 95 (varcte1 -> LBRACKET exp RBRACKET .)


state 130

    (19) parametros1 -> epsilon .

    ID              reduce using rule 19 (parametros1 -> epsilon .)


state 131

    (16) parametros -> tipo parametros1 . ID parametros2

    ID              shift and go to state 152


state 132

    (18) parametros1 -> AMPERSON .

    ID              reduce using rule 18 (parametros1 -> AMPERSON .)


state 133

    (129) funcion5 -> ID declareFunc LPAREN funcion3 RPAREN . LCURL funcion1 estatuto funcion2 funcion6

    LCURL           shift and go to state 153


state 134

    (17) parametros -> VECTOR tipo . parametros1 ID parametros2
    (18) parametros1 -> . AMPERSON
    (19) parametros1 -> . epsilon
    (141) epsilon -> .

    AMPERSON        shift and go to state 132
    ID              reduce using rule 141 (epsilon -> .)

    parametros1                    shift and go to state 154
    epsilon                        shift and go to state 130

state 135

    (51) while -> WHILE LPAREN . expresion RPAREN bloque
    (67) expresion -> . expresion1
    (68) expresion1 -> . epsilon
    (69) expresion1 -> . expresion2 exp
    (141) epsilon -> .
    (70) expresion2 -> . LESS
    (71) expresion2 -> . GREATER
    (72) expresion2 -> . DOUBLE_EQUAL
    (73) expresion2 -> . DIFF

    RPAREN          reduce using rule 141 (epsilon -> .)
    LESS            shift and go to state 88
    GREATER         shift and go to state 92
    DOUBLE_EQUAL    shift and go to state 90
    DIFF            shift and go to state 91

    expresion                      shift and go to state 155
    expresion1                     shift and go to state 86
    expresion2                     shift and go to state 87
    epsilon                        shift and go to state 89

state 136

    (100) print -> PRINT LPAREN . print1 RPAREN
    (101) print1 -> . CTE_STRING print2
    (102) print1 -> . ID print2

    CTE_STRING      shift and go to state 157
    ID              shift and go to state 158

    print1                         shift and go to state 156

state 137

    (49) main2 -> estatuto . main2
    (49) main2 -> . estatuto main2
    (50) main2 -> . epsilon
    (58) estatuto -> . asignacion
    (59) estatuto -> . llamada
    (60) estatuto -> . condicion
    (61) estatuto -> . switch
    (62) estatuto -> . while
    (63) estatuto -> . for
    (141) epsilon -> .
    (64) asignacion -> . ID EQUALS asignacion1
    (78) llamada -> . ID LPAREN llamada1 RPAREN
    (79) llamada -> . print
    (80) llamada -> . input
    (105) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (133) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (51) while -> . WHILE LPAREN expresion RPAREN bloque
    (115) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (100) print -> . PRINT LPAREN print1 RPAREN
    (112) input -> . INPUT LPAREN input1 RPAREN

    RCURL           reduce using rule 141 (epsilon -> .)
    ID              shift and go to state 111
    IF              shift and go to state 112
    SWITCH          shift and go to state 105
    WHILE           shift and go to state 100
    FOR             shift and go to state 109
    PRINT           shift and go to state 101
    INPUT           shift and go to state 110

    for                            shift and go to state 102
    estatuto                       shift and go to state 137
    switch                         shift and go to state 114
    llamada                        shift and go to state 104
    condicion                      shift and go to state 106
    print                          shift and go to state 107
    input                          shift and go to state 108
    epsilon                        shift and go to state 138
    main2                          shift and go to state 159
    asignacion                     shift and go to state 113
    while                          shift and go to state 115

state 138

    (50) main2 -> epsilon .

    RCURL           reduce using rule 50 (main2 -> epsilon .)


state 139

    (45) main -> MAIN declareMain LCURL main1 estatuto main2 . RCURL

    RCURL           shift and go to state 160


state 140

    (133) switch -> SWITCH ID . switch1 LCURL switch2 switch3 RCURL
    (134) switch1 -> . epsilon
    (135) switch1 -> . LBRACKET exp RBRACKET
    (141) epsilon -> .

    LBRACKET        shift and go to state 162
    LCURL           reduce using rule 141 (epsilon -> .)

    switch1                        shift and go to state 161
    epsilon                        shift and go to state 163

state 141

    (115) for -> FOR CTE_INT . TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque

    TO              shift and go to state 164


state 142

    (112) input -> INPUT LPAREN . input1 RPAREN
    (113) input1 -> . CTE_STRING
    (114) input1 -> . epsilon
    (141) epsilon -> .

    CTE_STRING      shift and go to state 165
    RPAREN          reduce using rule 141 (epsilon -> .)

    epsilon                        shift and go to state 167
    input1                         shift and go to state 166

state 143

    (64) asignacion -> ID EQUALS . asignacion1
    (65) asignacion1 -> . exp
    (66) asignacion1 -> . llamada
    (30) exp -> . termino checkEXPPOper exp1
    (78) llamada -> . ID LPAREN llamada1 RPAREN
    (79) llamada -> . print
    (80) llamada -> . input
    (35) termino -> . factor checkTERMPOper termino1
    (100) print -> . PRINT LPAREN print1 RPAREN
    (112) input -> . INPUT LPAREN input1 RPAREN
    (52) factor -> . LPAREN factorAddFakeCover expresion RPAREN
    (53) factor -> . factor1
    (55) factor1 -> . PLUS varcte
    (56) factor1 -> . MINUS varcte
    (57) factor1 -> . varcte
    (85) varcte -> . ID varcte1
    (86) varcte -> . CTE_INT tipoINT
    (87) varcte -> . CTE_FLOAT tipoFLOAT
    (88) varcte -> . CTE_STRING tipoSTRING
    (89) varcte -> . cte_bool
    (98) cte_bool -> . TRUE
    (99) cte_bool -> . FALSE

    ID              shift and go to state 169
    PRINT           shift and go to state 101
    INPUT           shift and go to state 110
    LPAREN          shift and go to state 47
    PLUS            shift and go to state 44
    MINUS           shift and go to state 42
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 52
    CTE_STRING      shift and go to state 46
    TRUE            shift and go to state 41
    FALSE           shift and go to state 50

    cte_bool                       shift and go to state 39
    termino                        shift and go to state 40
    varcte                         shift and go to state 43
    llamada                        shift and go to state 168
    print                          shift and go to state 107
    input                          shift and go to state 108
    factor                         shift and go to state 45
    factor1                        shift and go to state 51
    exp                            shift and go to state 170
    asignacion1                    shift and go to state 171

state 144

    (78) llamada -> ID LPAREN . llamada1 RPAREN
    (81) llamada1 -> . epsilon
    (82) llamada1 -> . exp llamada2
    (141) epsilon -> .
    (30) exp -> . termino checkEXPPOper exp1
    (35) termino -> . factor checkTERMPOper termino1
    (52) factor -> . LPAREN factorAddFakeCover expresion RPAREN
    (53) factor -> . factor1
    (55) factor1 -> . PLUS varcte
    (56) factor1 -> . MINUS varcte
    (57) factor1 -> . varcte
    (85) varcte -> . ID varcte1
    (86) varcte -> . CTE_INT tipoINT
    (87) varcte -> . CTE_FLOAT tipoFLOAT
    (88) varcte -> . CTE_STRING tipoSTRING
    (89) varcte -> . cte_bool
    (98) cte_bool -> . TRUE
    (99) cte_bool -> . FALSE

    RPAREN          reduce using rule 141 (epsilon -> .)
    LPAREN          shift and go to state 47
    PLUS            shift and go to state 44
    MINUS           shift and go to state 42
    ID              shift and go to state 49
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 52
    CTE_STRING      shift and go to state 46
    TRUE            shift and go to state 41
    FALSE           shift and go to state 50

    factor1                        shift and go to state 51
    epsilon                        shift and go to state 173
    cte_bool                       shift and go to state 39
    termino                        shift and go to state 40
    exp                            shift and go to state 174
    factor                         shift and go to state 45
    llamada1                       shift and go to state 172
    varcte                         shift and go to state 43

state 145

    (105) condicion -> IF LPAREN . expresion_logica RPAREN condicion1 condicion2 condicion3
    (74) expresion_logica -> . exp expresion_logica1 expresion
    (30) exp -> . termino checkEXPPOper exp1
    (35) termino -> . factor checkTERMPOper termino1
    (52) factor -> . LPAREN factorAddFakeCover expresion RPAREN
    (53) factor -> . factor1
    (55) factor1 -> . PLUS varcte
    (56) factor1 -> . MINUS varcte
    (57) factor1 -> . varcte
    (85) varcte -> . ID varcte1
    (86) varcte -> . CTE_INT tipoINT
    (87) varcte -> . CTE_FLOAT tipoFLOAT
    (88) varcte -> . CTE_STRING tipoSTRING
    (89) varcte -> . cte_bool
    (98) cte_bool -> . TRUE
    (99) cte_bool -> . FALSE

    LPAREN          shift and go to state 47
    PLUS            shift and go to state 44
    MINUS           shift and go to state 42
    ID              shift and go to state 49
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 52
    CTE_STRING      shift and go to state 46
    TRUE            shift and go to state 41
    FALSE           shift and go to state 50

    varcte                         shift and go to state 43
    expresion_logica               shift and go to state 175
    factor                         shift and go to state 45
    factor1                        shift and go to state 51
    exp                            shift and go to state 176
    cte_bool                       shift and go to state 39
    termino                        shift and go to state 40

state 146

    (41) inicializacion_vector1 -> varcte inicializacion_vector2 .

    RBRACKET        reduce using rule 41 (inicializacion_vector1 -> varcte inicializacion_vector2 .)


state 147

    (44) inicializacion_vector2 -> epsilon .

    RBRACKET        reduce using rule 44 (inicializacion_vector2 -> epsilon .)


state 148

    (43) inicializacion_vector2 -> COMMA . varcte inicializacion_vector2
    (85) varcte -> . ID varcte1
    (86) varcte -> . CTE_INT tipoINT
    (87) varcte -> . CTE_FLOAT tipoFLOAT
    (88) varcte -> . CTE_STRING tipoSTRING
    (89) varcte -> . cte_bool
    (98) cte_bool -> . TRUE
    (99) cte_bool -> . FALSE

    ID              shift and go to state 49
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 52
    CTE_STRING      shift and go to state 46
    TRUE            shift and go to state 41
    FALSE           shift and go to state 50

    varcte                         shift and go to state 177
    cte_bool                       shift and go to state 39

state 149

    (40) inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET .

    VECTOR          reduce using rule 40 (inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    INT             reduce using rule 40 (inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    FLOAT           reduce using rule 40 (inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    BOOL            reduce using rule 40 (inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    STRING          reduce using rule 40 (inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    FUNCTION        reduce using rule 40 (inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    MAIN            reduce using rule 40 (inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    ID              reduce using rule 40 (inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    IF              reduce using rule 40 (inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    SWITCH          reduce using rule 40 (inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    WHILE           reduce using rule 40 (inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    FOR             reduce using rule 40 (inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    PRINT           reduce using rule 40 (inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    INPUT           reduce using rule 40 (inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET .)


state 150

    (97) varcte2 -> COMMA exp . varcte2
    (96) varcte2 -> . epsilon
    (97) varcte2 -> . COMMA exp varcte2
    (141) epsilon -> .

    COMMA           shift and go to state 127
    RPAREN          reduce using rule 141 (epsilon -> .)

    epsilon                        shift and go to state 126
    varcte2                        shift and go to state 178

state 151

    (94) varcte1 -> LPAREN exp varcte2 RPAREN .

    TIMES           reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    DIVIDE          reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    PLUS            reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    MINUS           reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    VECTOR          reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    INT             reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    FLOAT           reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    BOOL            reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    STRING          reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    FUNCTION        reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    MAIN            reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    ID              reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    IF              reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    SWITCH          reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    WHILE           reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    FOR             reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    PRINT           reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    INPUT           reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    COMMA           reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    RPAREN          reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    RBRACKET        reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    RCURL           reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    RETURN          reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    CASE            reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    DEFAULT         reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    AND             reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    OR              reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    LESS            reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    GREATER         reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    DOUBLE_EQUAL    reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    DIFF            reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    COLON           reduce using rule 94 (varcte1 -> LPAREN exp varcte2 RPAREN .)


state 152

    (16) parametros -> tipo parametros1 ID . parametros2
    (20) parametros2 -> . COMMA parametros
    (21) parametros2 -> . epsilon
    (141) epsilon -> .

    COMMA           shift and go to state 180
    RPAREN          reduce using rule 141 (epsilon -> .)

    parametros2                    shift and go to state 179
    epsilon                        shift and go to state 181

state 153

    (129) funcion5 -> ID declareFunc LPAREN funcion3 RPAREN LCURL . funcion1 estatuto funcion2 funcion6
    (121) funcion1 -> . epsilon
    (122) funcion1 -> . var_declaracion funcion1
    (141) epsilon -> .
    (6) var_declaracion -> . tipo var_declaracion1
    (7) var_declaracion -> . VECTOR tipo var_declaracion2
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    ID              reduce using rule 141 (epsilon -> .)
    IF              reduce using rule 141 (epsilon -> .)
    SWITCH          reduce using rule 141 (epsilon -> .)
    WHILE           reduce using rule 141 (epsilon -> .)
    FOR             reduce using rule 141 (epsilon -> .)
    PRINT           reduce using rule 141 (epsilon -> .)
    INPUT           reduce using rule 141 (epsilon -> .)
    VECTOR          shift and go to state 8
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 5
    epsilon                        shift and go to state 182
    var_declaracion                shift and go to state 183
    funcion1                       shift and go to state 184

state 154

    (17) parametros -> VECTOR tipo parametros1 . ID parametros2

    ID              shift and go to state 185


state 155

    (51) while -> WHILE LPAREN expresion . RPAREN bloque

    RPAREN          shift and go to state 186


state 156

    (100) print -> PRINT LPAREN print1 . RPAREN

    RPAREN          shift and go to state 187


state 157

    (101) print1 -> CTE_STRING . print2
    (103) print2 -> . epsilon
    (104) print2 -> . PLUS print1
    (141) epsilon -> .

    PLUS            shift and go to state 190
    RPAREN          reduce using rule 141 (epsilon -> .)

    epsilon                        shift and go to state 188
    print2                         shift and go to state 189

state 158

    (102) print1 -> ID . print2
    (103) print2 -> . epsilon
    (104) print2 -> . PLUS print1
    (141) epsilon -> .

    PLUS            shift and go to state 190
    RPAREN          reduce using rule 141 (epsilon -> .)

    epsilon                        shift and go to state 188
    print2                         shift and go to state 191

state 159

    (49) main2 -> estatuto main2 .

    RCURL           reduce using rule 49 (main2 -> estatuto main2 .)


state 160

    (45) main -> MAIN declareMain LCURL main1 estatuto main2 RCURL .

    END             reduce using rule 45 (main -> MAIN declareMain LCURL main1 estatuto main2 RCURL .)


state 161

    (133) switch -> SWITCH ID switch1 . LCURL switch2 switch3 RCURL

    LCURL           shift and go to state 192


state 162

    (135) switch1 -> LBRACKET . exp RBRACKET
    (30) exp -> . termino checkEXPPOper exp1
    (35) termino -> . factor checkTERMPOper termino1
    (52) factor -> . LPAREN factorAddFakeCover expresion RPAREN
    (53) factor -> . factor1
    (55) factor1 -> . PLUS varcte
    (56) factor1 -> . MINUS varcte
    (57) factor1 -> . varcte
    (85) varcte -> . ID varcte1
    (86) varcte -> . CTE_INT tipoINT
    (87) varcte -> . CTE_FLOAT tipoFLOAT
    (88) varcte -> . CTE_STRING tipoSTRING
    (89) varcte -> . cte_bool
    (98) cte_bool -> . TRUE
    (99) cte_bool -> . FALSE

    LPAREN          shift and go to state 47
    PLUS            shift and go to state 44
    MINUS           shift and go to state 42
    ID              shift and go to state 49
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 52
    CTE_STRING      shift and go to state 46
    TRUE            shift and go to state 41
    FALSE           shift and go to state 50

    factor1                        shift and go to state 51
    cte_bool                       shift and go to state 39
    termino                        shift and go to state 40
    exp                            shift and go to state 193
    factor                         shift and go to state 45
    varcte                         shift and go to state 43

state 163

    (134) switch1 -> epsilon .

    LCURL           reduce using rule 134 (switch1 -> epsilon .)


state 164

    (115) for -> FOR CTE_INT TO . CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque

    CTE_INT         shift and go to state 194


state 165

    (113) input1 -> CTE_STRING .

    RPAREN          reduce using rule 113 (input1 -> CTE_STRING .)


state 166

    (112) input -> INPUT LPAREN input1 . RPAREN

    RPAREN          shift and go to state 195


state 167

    (114) input1 -> epsilon .

    RPAREN          reduce using rule 114 (input1 -> epsilon .)


state 168

    (66) asignacion1 -> llamada .

    ID              reduce using rule 66 (asignacion1 -> llamada .)
    IF              reduce using rule 66 (asignacion1 -> llamada .)
    SWITCH          reduce using rule 66 (asignacion1 -> llamada .)
    WHILE           reduce using rule 66 (asignacion1 -> llamada .)
    FOR             reduce using rule 66 (asignacion1 -> llamada .)
    PRINT           reduce using rule 66 (asignacion1 -> llamada .)
    INPUT           reduce using rule 66 (asignacion1 -> llamada .)
    RCURL           reduce using rule 66 (asignacion1 -> llamada .)
    RETURN          reduce using rule 66 (asignacion1 -> llamada .)
    CASE            reduce using rule 66 (asignacion1 -> llamada .)
    DEFAULT         reduce using rule 66 (asignacion1 -> llamada .)


state 169

    (78) llamada -> ID . LPAREN llamada1 RPAREN
    (85) varcte -> ID . varcte1
    (93) varcte1 -> . epsilon
    (94) varcte1 -> . LPAREN exp varcte2 RPAREN
    (95) varcte1 -> . LBRACKET exp RBRACKET
    (141) epsilon -> .

    LPAREN          shift and go to state 196
    LBRACKET        shift and go to state 69
    TIMES           reduce using rule 141 (epsilon -> .)
    DIVIDE          reduce using rule 141 (epsilon -> .)
    PLUS            reduce using rule 141 (epsilon -> .)
    MINUS           reduce using rule 141 (epsilon -> .)
    ID              reduce using rule 141 (epsilon -> .)
    IF              reduce using rule 141 (epsilon -> .)
    SWITCH          reduce using rule 141 (epsilon -> .)
    WHILE           reduce using rule 141 (epsilon -> .)
    FOR             reduce using rule 141 (epsilon -> .)
    PRINT           reduce using rule 141 (epsilon -> .)
    INPUT           reduce using rule 141 (epsilon -> .)
    RCURL           reduce using rule 141 (epsilon -> .)
    RETURN          reduce using rule 141 (epsilon -> .)
    CASE            reduce using rule 141 (epsilon -> .)
    DEFAULT         reduce using rule 141 (epsilon -> .)

    epsilon                        shift and go to state 68
    varcte1                        shift and go to state 70

state 170

    (65) asignacion1 -> exp .

    ID              reduce using rule 65 (asignacion1 -> exp .)
    IF              reduce using rule 65 (asignacion1 -> exp .)
    SWITCH          reduce using rule 65 (asignacion1 -> exp .)
    WHILE           reduce using rule 65 (asignacion1 -> exp .)
    FOR             reduce using rule 65 (asignacion1 -> exp .)
    PRINT           reduce using rule 65 (asignacion1 -> exp .)
    INPUT           reduce using rule 65 (asignacion1 -> exp .)
    RCURL           reduce using rule 65 (asignacion1 -> exp .)
    RETURN          reduce using rule 65 (asignacion1 -> exp .)
    CASE            reduce using rule 65 (asignacion1 -> exp .)
    DEFAULT         reduce using rule 65 (asignacion1 -> exp .)


state 171

    (64) asignacion -> ID EQUALS asignacion1 .

    ID              reduce using rule 64 (asignacion -> ID EQUALS asignacion1 .)
    IF              reduce using rule 64 (asignacion -> ID EQUALS asignacion1 .)
    SWITCH          reduce using rule 64 (asignacion -> ID EQUALS asignacion1 .)
    WHILE           reduce using rule 64 (asignacion -> ID EQUALS asignacion1 .)
    FOR             reduce using rule 64 (asignacion -> ID EQUALS asignacion1 .)
    PRINT           reduce using rule 64 (asignacion -> ID EQUALS asignacion1 .)
    INPUT           reduce using rule 64 (asignacion -> ID EQUALS asignacion1 .)
    RCURL           reduce using rule 64 (asignacion -> ID EQUALS asignacion1 .)
    RETURN          reduce using rule 64 (asignacion -> ID EQUALS asignacion1 .)
    CASE            reduce using rule 64 (asignacion -> ID EQUALS asignacion1 .)
    DEFAULT         reduce using rule 64 (asignacion -> ID EQUALS asignacion1 .)


state 172

    (78) llamada -> ID LPAREN llamada1 . RPAREN

    RPAREN          shift and go to state 197


state 173

    (81) llamada1 -> epsilon .

    RPAREN          reduce using rule 81 (llamada1 -> epsilon .)


state 174

    (82) llamada1 -> exp . llamada2
    (83) llamada2 -> . epsilon
    (84) llamada2 -> . COMMA exp llamada2
    (141) epsilon -> .

    COMMA           shift and go to state 200
    RPAREN          reduce using rule 141 (epsilon -> .)

    llamada2                       shift and go to state 198
    epsilon                        shift and go to state 199

state 175

    (105) condicion -> IF LPAREN expresion_logica . RPAREN condicion1 condicion2 condicion3

    RPAREN          shift and go to state 201


state 176

    (74) expresion_logica -> exp . expresion_logica1 expresion
    (75) expresion_logica1 -> . AND exp
    (76) expresion_logica1 -> . epsilon
    (77) expresion_logica1 -> . OR exp
    (141) epsilon -> .

    AND             shift and go to state 202
    OR              shift and go to state 205
    LESS            reduce using rule 141 (epsilon -> .)
    GREATER         reduce using rule 141 (epsilon -> .)
    DOUBLE_EQUAL    reduce using rule 141 (epsilon -> .)
    DIFF            reduce using rule 141 (epsilon -> .)
    RPAREN          reduce using rule 141 (epsilon -> .)

    expresion_logica1              shift and go to state 204
    epsilon                        shift and go to state 203

state 177

    (43) inicializacion_vector2 -> COMMA varcte . inicializacion_vector2
    (43) inicializacion_vector2 -> . COMMA varcte inicializacion_vector2
    (44) inicializacion_vector2 -> . epsilon
    (141) epsilon -> .

    COMMA           shift and go to state 148
    RBRACKET        reduce using rule 141 (epsilon -> .)

    inicializacion_vector2         shift and go to state 206
    epsilon                        shift and go to state 147

state 178

    (97) varcte2 -> COMMA exp varcte2 .

    RPAREN          reduce using rule 97 (varcte2 -> COMMA exp varcte2 .)


state 179

    (16) parametros -> tipo parametros1 ID parametros2 .

    RPAREN          reduce using rule 16 (parametros -> tipo parametros1 ID parametros2 .)


state 180

    (20) parametros2 -> COMMA . parametros
    (16) parametros -> . tipo parametros1 ID parametros2
    (17) parametros -> . VECTOR tipo parametros1 ID parametros2
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    VECTOR          shift and go to state 99
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    parametros                     shift and go to state 207
    tipo                           shift and go to state 95

state 181

    (21) parametros2 -> epsilon .

    RPAREN          reduce using rule 21 (parametros2 -> epsilon .)


state 182

    (121) funcion1 -> epsilon .

    ID              reduce using rule 121 (funcion1 -> epsilon .)
    IF              reduce using rule 121 (funcion1 -> epsilon .)
    SWITCH          reduce using rule 121 (funcion1 -> epsilon .)
    WHILE           reduce using rule 121 (funcion1 -> epsilon .)
    FOR             reduce using rule 121 (funcion1 -> epsilon .)
    PRINT           reduce using rule 121 (funcion1 -> epsilon .)
    INPUT           reduce using rule 121 (funcion1 -> epsilon .)


state 183

    (122) funcion1 -> var_declaracion . funcion1
    (121) funcion1 -> . epsilon
    (122) funcion1 -> . var_declaracion funcion1
    (141) epsilon -> .
    (6) var_declaracion -> . tipo var_declaracion1
    (7) var_declaracion -> . VECTOR tipo var_declaracion2
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    ID              reduce using rule 141 (epsilon -> .)
    IF              reduce using rule 141 (epsilon -> .)
    SWITCH          reduce using rule 141 (epsilon -> .)
    WHILE           reduce using rule 141 (epsilon -> .)
    FOR             reduce using rule 141 (epsilon -> .)
    PRINT           reduce using rule 141 (epsilon -> .)
    INPUT           reduce using rule 141 (epsilon -> .)
    VECTOR          shift and go to state 8
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 5
    epsilon                        shift and go to state 182
    var_declaracion                shift and go to state 183
    funcion1                       shift and go to state 208

state 184

    (129) funcion5 -> ID declareFunc LPAREN funcion3 RPAREN LCURL funcion1 . estatuto funcion2 funcion6
    (58) estatuto -> . asignacion
    (59) estatuto -> . llamada
    (60) estatuto -> . condicion
    (61) estatuto -> . switch
    (62) estatuto -> . while
    (63) estatuto -> . for
    (64) asignacion -> . ID EQUALS asignacion1
    (78) llamada -> . ID LPAREN llamada1 RPAREN
    (79) llamada -> . print
    (80) llamada -> . input
    (105) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (133) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (51) while -> . WHILE LPAREN expresion RPAREN bloque
    (115) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (100) print -> . PRINT LPAREN print1 RPAREN
    (112) input -> . INPUT LPAREN input1 RPAREN

    ID              shift and go to state 111
    IF              shift and go to state 112
    SWITCH          shift and go to state 105
    WHILE           shift and go to state 100
    FOR             shift and go to state 109
    PRINT           shift and go to state 101
    INPUT           shift and go to state 110

    for                            shift and go to state 102
    estatuto                       shift and go to state 209
    while                          shift and go to state 115
    llamada                        shift and go to state 104
    condicion                      shift and go to state 106
    print                          shift and go to state 107
    input                          shift and go to state 108
    asignacion                     shift and go to state 113
    switch                         shift and go to state 114

state 185

    (17) parametros -> VECTOR tipo parametros1 ID . parametros2
    (20) parametros2 -> . COMMA parametros
    (21) parametros2 -> . epsilon
    (141) epsilon -> .

    COMMA           shift and go to state 180
    RPAREN          reduce using rule 141 (epsilon -> .)

    parametros2                    shift and go to state 210
    epsilon                        shift and go to state 181

state 186

    (51) while -> WHILE LPAREN expresion RPAREN . bloque
    (27) bloque -> . LCURL estatuto bloque1 RCURL

    LCURL           shift and go to state 212

    bloque                         shift and go to state 211

state 187

    (100) print -> PRINT LPAREN print1 RPAREN .

    ID              reduce using rule 100 (print -> PRINT LPAREN print1 RPAREN .)
    IF              reduce using rule 100 (print -> PRINT LPAREN print1 RPAREN .)
    SWITCH          reduce using rule 100 (print -> PRINT LPAREN print1 RPAREN .)
    WHILE           reduce using rule 100 (print -> PRINT LPAREN print1 RPAREN .)
    FOR             reduce using rule 100 (print -> PRINT LPAREN print1 RPAREN .)
    PRINT           reduce using rule 100 (print -> PRINT LPAREN print1 RPAREN .)
    INPUT           reduce using rule 100 (print -> PRINT LPAREN print1 RPAREN .)
    RCURL           reduce using rule 100 (print -> PRINT LPAREN print1 RPAREN .)
    RETURN          reduce using rule 100 (print -> PRINT LPAREN print1 RPAREN .)
    CASE            reduce using rule 100 (print -> PRINT LPAREN print1 RPAREN .)
    DEFAULT         reduce using rule 100 (print -> PRINT LPAREN print1 RPAREN .)


state 188

    (103) print2 -> epsilon .

    RPAREN          reduce using rule 103 (print2 -> epsilon .)


state 189

    (101) print1 -> CTE_STRING print2 .

    RPAREN          reduce using rule 101 (print1 -> CTE_STRING print2 .)


state 190

    (104) print2 -> PLUS . print1
    (101) print1 -> . CTE_STRING print2
    (102) print1 -> . ID print2

    CTE_STRING      shift and go to state 157
    ID              shift and go to state 158

    print1                         shift and go to state 213

state 191

    (102) print1 -> ID print2 .

    RPAREN          reduce using rule 102 (print1 -> ID print2 .)


state 192

    (133) switch -> SWITCH ID switch1 LCURL . switch2 switch3 RCURL
    (136) switch2 -> . epsilon
    (137) switch2 -> . CASE varcte COLON switch4 switch2
    (141) epsilon -> .

    CASE            shift and go to state 214
    DEFAULT         reduce using rule 141 (epsilon -> .)

    switch2                        shift and go to state 215
    epsilon                        shift and go to state 216

state 193

    (135) switch1 -> LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 217


state 194

    (115) for -> FOR CTE_INT TO CTE_INT . BY LPAREN for1 CTE_INT RPAREN bloque

    BY              shift and go to state 218


state 195

    (112) input -> INPUT LPAREN input1 RPAREN .

    ID              reduce using rule 112 (input -> INPUT LPAREN input1 RPAREN .)
    IF              reduce using rule 112 (input -> INPUT LPAREN input1 RPAREN .)
    SWITCH          reduce using rule 112 (input -> INPUT LPAREN input1 RPAREN .)
    WHILE           reduce using rule 112 (input -> INPUT LPAREN input1 RPAREN .)
    FOR             reduce using rule 112 (input -> INPUT LPAREN input1 RPAREN .)
    PRINT           reduce using rule 112 (input -> INPUT LPAREN input1 RPAREN .)
    INPUT           reduce using rule 112 (input -> INPUT LPAREN input1 RPAREN .)
    RCURL           reduce using rule 112 (input -> INPUT LPAREN input1 RPAREN .)
    RETURN          reduce using rule 112 (input -> INPUT LPAREN input1 RPAREN .)
    CASE            reduce using rule 112 (input -> INPUT LPAREN input1 RPAREN .)
    DEFAULT         reduce using rule 112 (input -> INPUT LPAREN input1 RPAREN .)


state 196

    (78) llamada -> ID LPAREN . llamada1 RPAREN
    (94) varcte1 -> LPAREN . exp varcte2 RPAREN
    (81) llamada1 -> . epsilon
    (82) llamada1 -> . exp llamada2
    (30) exp -> . termino checkEXPPOper exp1
    (141) epsilon -> .
    (35) termino -> . factor checkTERMPOper termino1
    (52) factor -> . LPAREN factorAddFakeCover expresion RPAREN
    (53) factor -> . factor1
    (55) factor1 -> . PLUS varcte
    (56) factor1 -> . MINUS varcte
    (57) factor1 -> . varcte
    (85) varcte -> . ID varcte1
    (86) varcte -> . CTE_INT tipoINT
    (87) varcte -> . CTE_FLOAT tipoFLOAT
    (88) varcte -> . CTE_STRING tipoSTRING
    (89) varcte -> . cte_bool
    (98) cte_bool -> . TRUE
    (99) cte_bool -> . FALSE

    RPAREN          reduce using rule 141 (epsilon -> .)
    LPAREN          shift and go to state 47
    PLUS            shift and go to state 44
    MINUS           shift and go to state 42
    ID              shift and go to state 49
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 52
    CTE_STRING      shift and go to state 46
    TRUE            shift and go to state 41
    FALSE           shift and go to state 50

    factor1                        shift and go to state 51
    epsilon                        shift and go to state 173
    cte_bool                       shift and go to state 39
    termino                        shift and go to state 40
    exp                            shift and go to state 219
    factor                         shift and go to state 45
    llamada1                       shift and go to state 172
    varcte                         shift and go to state 43

state 197

    (78) llamada -> ID LPAREN llamada1 RPAREN .

    ID              reduce using rule 78 (llamada -> ID LPAREN llamada1 RPAREN .)
    IF              reduce using rule 78 (llamada -> ID LPAREN llamada1 RPAREN .)
    SWITCH          reduce using rule 78 (llamada -> ID LPAREN llamada1 RPAREN .)
    WHILE           reduce using rule 78 (llamada -> ID LPAREN llamada1 RPAREN .)
    FOR             reduce using rule 78 (llamada -> ID LPAREN llamada1 RPAREN .)
    PRINT           reduce using rule 78 (llamada -> ID LPAREN llamada1 RPAREN .)
    INPUT           reduce using rule 78 (llamada -> ID LPAREN llamada1 RPAREN .)
    RCURL           reduce using rule 78 (llamada -> ID LPAREN llamada1 RPAREN .)
    RETURN          reduce using rule 78 (llamada -> ID LPAREN llamada1 RPAREN .)
    CASE            reduce using rule 78 (llamada -> ID LPAREN llamada1 RPAREN .)
    DEFAULT         reduce using rule 78 (llamada -> ID LPAREN llamada1 RPAREN .)


state 198

    (82) llamada1 -> exp llamada2 .

    RPAREN          reduce using rule 82 (llamada1 -> exp llamada2 .)


state 199

    (83) llamada2 -> epsilon .

    RPAREN          reduce using rule 83 (llamada2 -> epsilon .)


state 200

    (84) llamada2 -> COMMA . exp llamada2
    (30) exp -> . termino checkEXPPOper exp1
    (35) termino -> . factor checkTERMPOper termino1
    (52) factor -> . LPAREN factorAddFakeCover expresion RPAREN
    (53) factor -> . factor1
    (55) factor1 -> . PLUS varcte
    (56) factor1 -> . MINUS varcte
    (57) factor1 -> . varcte
    (85) varcte -> . ID varcte1
    (86) varcte -> . CTE_INT tipoINT
    (87) varcte -> . CTE_FLOAT tipoFLOAT
    (88) varcte -> . CTE_STRING tipoSTRING
    (89) varcte -> . cte_bool
    (98) cte_bool -> . TRUE
    (99) cte_bool -> . FALSE

    LPAREN          shift and go to state 47
    PLUS            shift and go to state 44
    MINUS           shift and go to state 42
    ID              shift and go to state 49
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 52
    CTE_STRING      shift and go to state 46
    TRUE            shift and go to state 41
    FALSE           shift and go to state 50

    factor1                        shift and go to state 51
    cte_bool                       shift and go to state 39
    termino                        shift and go to state 40
    exp                            shift and go to state 220
    factor                         shift and go to state 45
    varcte                         shift and go to state 43

state 201

    (105) condicion -> IF LPAREN expresion_logica RPAREN . condicion1 condicion2 condicion3
    (106) condicion1 -> . bloque
    (107) condicion1 -> . LCURL bloque RCURL
    (27) bloque -> . LCURL estatuto bloque1 RCURL

    LCURL           shift and go to state 223

    condicion1                     shift and go to state 221
    bloque                         shift and go to state 222

state 202

    (75) expresion_logica1 -> AND . exp
    (30) exp -> . termino checkEXPPOper exp1
    (35) termino -> . factor checkTERMPOper termino1
    (52) factor -> . LPAREN factorAddFakeCover expresion RPAREN
    (53) factor -> . factor1
    (55) factor1 -> . PLUS varcte
    (56) factor1 -> . MINUS varcte
    (57) factor1 -> . varcte
    (85) varcte -> . ID varcte1
    (86) varcte -> . CTE_INT tipoINT
    (87) varcte -> . CTE_FLOAT tipoFLOAT
    (88) varcte -> . CTE_STRING tipoSTRING
    (89) varcte -> . cte_bool
    (98) cte_bool -> . TRUE
    (99) cte_bool -> . FALSE

    LPAREN          shift and go to state 47
    PLUS            shift and go to state 44
    MINUS           shift and go to state 42
    ID              shift and go to state 49
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 52
    CTE_STRING      shift and go to state 46
    TRUE            shift and go to state 41
    FALSE           shift and go to state 50

    factor1                        shift and go to state 51
    cte_bool                       shift and go to state 39
    termino                        shift and go to state 40
    exp                            shift and go to state 224
    factor                         shift and go to state 45
    varcte                         shift and go to state 43

state 203

    (76) expresion_logica1 -> epsilon .

    LESS            reduce using rule 76 (expresion_logica1 -> epsilon .)
    GREATER         reduce using rule 76 (expresion_logica1 -> epsilon .)
    DOUBLE_EQUAL    reduce using rule 76 (expresion_logica1 -> epsilon .)
    DIFF            reduce using rule 76 (expresion_logica1 -> epsilon .)
    RPAREN          reduce using rule 76 (expresion_logica1 -> epsilon .)


state 204

    (74) expresion_logica -> exp expresion_logica1 . expresion
    (67) expresion -> . expresion1
    (68) expresion1 -> . epsilon
    (69) expresion1 -> . expresion2 exp
    (141) epsilon -> .
    (70) expresion2 -> . LESS
    (71) expresion2 -> . GREATER
    (72) expresion2 -> . DOUBLE_EQUAL
    (73) expresion2 -> . DIFF

    RPAREN          reduce using rule 141 (epsilon -> .)
    LESS            shift and go to state 88
    GREATER         shift and go to state 92
    DOUBLE_EQUAL    shift and go to state 90
    DIFF            shift and go to state 91

    expresion                      shift and go to state 225
    expresion1                     shift and go to state 86
    expresion2                     shift and go to state 87
    epsilon                        shift and go to state 89

state 205

    (77) expresion_logica1 -> OR . exp
    (30) exp -> . termino checkEXPPOper exp1
    (35) termino -> . factor checkTERMPOper termino1
    (52) factor -> . LPAREN factorAddFakeCover expresion RPAREN
    (53) factor -> . factor1
    (55) factor1 -> . PLUS varcte
    (56) factor1 -> . MINUS varcte
    (57) factor1 -> . varcte
    (85) varcte -> . ID varcte1
    (86) varcte -> . CTE_INT tipoINT
    (87) varcte -> . CTE_FLOAT tipoFLOAT
    (88) varcte -> . CTE_STRING tipoSTRING
    (89) varcte -> . cte_bool
    (98) cte_bool -> . TRUE
    (99) cte_bool -> . FALSE

    LPAREN          shift and go to state 47
    PLUS            shift and go to state 44
    MINUS           shift and go to state 42
    ID              shift and go to state 49
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 52
    CTE_STRING      shift and go to state 46
    TRUE            shift and go to state 41
    FALSE           shift and go to state 50

    factor1                        shift and go to state 51
    cte_bool                       shift and go to state 39
    termino                        shift and go to state 40
    exp                            shift and go to state 226
    factor                         shift and go to state 45
    varcte                         shift and go to state 43

state 206

    (43) inicializacion_vector2 -> COMMA varcte inicializacion_vector2 .

    RBRACKET        reduce using rule 43 (inicializacion_vector2 -> COMMA varcte inicializacion_vector2 .)


state 207

    (20) parametros2 -> COMMA parametros .

    RPAREN          reduce using rule 20 (parametros2 -> COMMA parametros .)


state 208

    (122) funcion1 -> var_declaracion funcion1 .

    ID              reduce using rule 122 (funcion1 -> var_declaracion funcion1 .)
    IF              reduce using rule 122 (funcion1 -> var_declaracion funcion1 .)
    SWITCH          reduce using rule 122 (funcion1 -> var_declaracion funcion1 .)
    WHILE           reduce using rule 122 (funcion1 -> var_declaracion funcion1 .)
    FOR             reduce using rule 122 (funcion1 -> var_declaracion funcion1 .)
    PRINT           reduce using rule 122 (funcion1 -> var_declaracion funcion1 .)
    INPUT           reduce using rule 122 (funcion1 -> var_declaracion funcion1 .)


state 209

    (129) funcion5 -> ID declareFunc LPAREN funcion3 RPAREN LCURL funcion1 estatuto . funcion2 funcion6
    (123) funcion2 -> . epsilon
    (124) funcion2 -> . estatuto funcion2
    (141) epsilon -> .
    (58) estatuto -> . asignacion
    (59) estatuto -> . llamada
    (60) estatuto -> . condicion
    (61) estatuto -> . switch
    (62) estatuto -> . while
    (63) estatuto -> . for
    (64) asignacion -> . ID EQUALS asignacion1
    (78) llamada -> . ID LPAREN llamada1 RPAREN
    (79) llamada -> . print
    (80) llamada -> . input
    (105) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (133) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (51) while -> . WHILE LPAREN expresion RPAREN bloque
    (115) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (100) print -> . PRINT LPAREN print1 RPAREN
    (112) input -> . INPUT LPAREN input1 RPAREN

    RCURL           reduce using rule 141 (epsilon -> .)
    RETURN          reduce using rule 141 (epsilon -> .)
    ID              shift and go to state 111
    IF              shift and go to state 112
    SWITCH          shift and go to state 105
    WHILE           shift and go to state 100
    FOR             shift and go to state 109
    PRINT           shift and go to state 101
    INPUT           shift and go to state 110

    funcion2                       shift and go to state 227
    for                            shift and go to state 102
    estatuto                       shift and go to state 228
    while                          shift and go to state 115
    llamada                        shift and go to state 104
    condicion                      shift and go to state 106
    print                          shift and go to state 107
    input                          shift and go to state 108
    epsilon                        shift and go to state 229
    asignacion                     shift and go to state 113
    switch                         shift and go to state 114

state 210

    (17) parametros -> VECTOR tipo parametros1 ID parametros2 .

    RPAREN          reduce using rule 17 (parametros -> VECTOR tipo parametros1 ID parametros2 .)


state 211

    (51) while -> WHILE LPAREN expresion RPAREN bloque .

    RCURL           reduce using rule 51 (while -> WHILE LPAREN expresion RPAREN bloque .)
    ID              reduce using rule 51 (while -> WHILE LPAREN expresion RPAREN bloque .)
    IF              reduce using rule 51 (while -> WHILE LPAREN expresion RPAREN bloque .)
    SWITCH          reduce using rule 51 (while -> WHILE LPAREN expresion RPAREN bloque .)
    WHILE           reduce using rule 51 (while -> WHILE LPAREN expresion RPAREN bloque .)
    FOR             reduce using rule 51 (while -> WHILE LPAREN expresion RPAREN bloque .)
    PRINT           reduce using rule 51 (while -> WHILE LPAREN expresion RPAREN bloque .)
    INPUT           reduce using rule 51 (while -> WHILE LPAREN expresion RPAREN bloque .)
    RETURN          reduce using rule 51 (while -> WHILE LPAREN expresion RPAREN bloque .)
    CASE            reduce using rule 51 (while -> WHILE LPAREN expresion RPAREN bloque .)
    DEFAULT         reduce using rule 51 (while -> WHILE LPAREN expresion RPAREN bloque .)


state 212

    (27) bloque -> LCURL . estatuto bloque1 RCURL
    (58) estatuto -> . asignacion
    (59) estatuto -> . llamada
    (60) estatuto -> . condicion
    (61) estatuto -> . switch
    (62) estatuto -> . while
    (63) estatuto -> . for
    (64) asignacion -> . ID EQUALS asignacion1
    (78) llamada -> . ID LPAREN llamada1 RPAREN
    (79) llamada -> . print
    (80) llamada -> . input
    (105) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (133) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (51) while -> . WHILE LPAREN expresion RPAREN bloque
    (115) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (100) print -> . PRINT LPAREN print1 RPAREN
    (112) input -> . INPUT LPAREN input1 RPAREN

    ID              shift and go to state 111
    IF              shift and go to state 112
    SWITCH          shift and go to state 105
    WHILE           shift and go to state 100
    FOR             shift and go to state 109
    PRINT           shift and go to state 101
    INPUT           shift and go to state 110

    for                            shift and go to state 102
    estatuto                       shift and go to state 230
    switch                         shift and go to state 114
    llamada                        shift and go to state 104
    condicion                      shift and go to state 106
    print                          shift and go to state 107
    input                          shift and go to state 108
    asignacion                     shift and go to state 113
    while                          shift and go to state 115

state 213

    (104) print2 -> PLUS print1 .

    RPAREN          reduce using rule 104 (print2 -> PLUS print1 .)


state 214

    (137) switch2 -> CASE . varcte COLON switch4 switch2
    (85) varcte -> . ID varcte1
    (86) varcte -> . CTE_INT tipoINT
    (87) varcte -> . CTE_FLOAT tipoFLOAT
    (88) varcte -> . CTE_STRING tipoSTRING
    (89) varcte -> . cte_bool
    (98) cte_bool -> . TRUE
    (99) cte_bool -> . FALSE

    ID              shift and go to state 49
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 52
    CTE_STRING      shift and go to state 46
    TRUE            shift and go to state 41
    FALSE           shift and go to state 50

    varcte                         shift and go to state 231
    cte_bool                       shift and go to state 39

state 215

    (133) switch -> SWITCH ID switch1 LCURL switch2 . switch3 RCURL
    (138) switch3 -> . DEFAULT COLON switch4

    DEFAULT         shift and go to state 233

    switch3                        shift and go to state 232

state 216

    (136) switch2 -> epsilon .

    DEFAULT         reduce using rule 136 (switch2 -> epsilon .)


state 217

    (135) switch1 -> LBRACKET exp RBRACKET .

    LCURL           reduce using rule 135 (switch1 -> LBRACKET exp RBRACKET .)


state 218

    (115) for -> FOR CTE_INT TO CTE_INT BY . LPAREN for1 CTE_INT RPAREN bloque

    LPAREN          shift and go to state 234


state 219

    (94) varcte1 -> LPAREN exp . varcte2 RPAREN
    (82) llamada1 -> exp . llamada2
    (96) varcte2 -> . epsilon
    (97) varcte2 -> . COMMA exp varcte2
    (83) llamada2 -> . epsilon
    (84) llamada2 -> . COMMA exp llamada2
    (141) epsilon -> .

    COMMA           shift and go to state 236
    RPAREN          reduce using rule 141 (epsilon -> .)

    llamada2                       shift and go to state 198
    epsilon                        shift and go to state 235
    varcte2                        shift and go to state 128

state 220

    (84) llamada2 -> COMMA exp . llamada2
    (83) llamada2 -> . epsilon
    (84) llamada2 -> . COMMA exp llamada2
    (141) epsilon -> .

    COMMA           shift and go to state 200
    RPAREN          reduce using rule 141 (epsilon -> .)

    llamada2                       shift and go to state 237
    epsilon                        shift and go to state 199

state 221

    (105) condicion -> IF LPAREN expresion_logica RPAREN condicion1 . condicion2 condicion3
    (108) condicion2 -> . ELSEIF condicion1 condicion2
    (109) condicion2 -> . epsilon
    (141) epsilon -> .

    ELSEIF          shift and go to state 240
    ELSE            reduce using rule 141 (epsilon -> .)
    ID              reduce using rule 141 (epsilon -> .)
    IF              reduce using rule 141 (epsilon -> .)
    SWITCH          reduce using rule 141 (epsilon -> .)
    WHILE           reduce using rule 141 (epsilon -> .)
    FOR             reduce using rule 141 (epsilon -> .)
    PRINT           reduce using rule 141 (epsilon -> .)
    INPUT           reduce using rule 141 (epsilon -> .)
    RCURL           reduce using rule 141 (epsilon -> .)
    RETURN          reduce using rule 141 (epsilon -> .)
    CASE            reduce using rule 141 (epsilon -> .)
    DEFAULT         reduce using rule 141 (epsilon -> .)

    epsilon                        shift and go to state 238
    condicion2                     shift and go to state 239

state 222

    (106) condicion1 -> bloque .

    ELSEIF          reduce using rule 106 (condicion1 -> bloque .)
    ELSE            reduce using rule 106 (condicion1 -> bloque .)
    ID              reduce using rule 106 (condicion1 -> bloque .)
    IF              reduce using rule 106 (condicion1 -> bloque .)
    SWITCH          reduce using rule 106 (condicion1 -> bloque .)
    WHILE           reduce using rule 106 (condicion1 -> bloque .)
    FOR             reduce using rule 106 (condicion1 -> bloque .)
    PRINT           reduce using rule 106 (condicion1 -> bloque .)
    INPUT           reduce using rule 106 (condicion1 -> bloque .)
    RCURL           reduce using rule 106 (condicion1 -> bloque .)
    RETURN          reduce using rule 106 (condicion1 -> bloque .)
    CASE            reduce using rule 106 (condicion1 -> bloque .)
    DEFAULT         reduce using rule 106 (condicion1 -> bloque .)


state 223

    (107) condicion1 -> LCURL . bloque RCURL
    (27) bloque -> LCURL . estatuto bloque1 RCURL
    (27) bloque -> . LCURL estatuto bloque1 RCURL
    (58) estatuto -> . asignacion
    (59) estatuto -> . llamada
    (60) estatuto -> . condicion
    (61) estatuto -> . switch
    (62) estatuto -> . while
    (63) estatuto -> . for
    (64) asignacion -> . ID EQUALS asignacion1
    (78) llamada -> . ID LPAREN llamada1 RPAREN
    (79) llamada -> . print
    (80) llamada -> . input
    (105) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (133) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (51) while -> . WHILE LPAREN expresion RPAREN bloque
    (115) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (100) print -> . PRINT LPAREN print1 RPAREN
    (112) input -> . INPUT LPAREN input1 RPAREN

    LCURL           shift and go to state 212
    ID              shift and go to state 111
    IF              shift and go to state 112
    SWITCH          shift and go to state 105
    WHILE           shift and go to state 100
    FOR             shift and go to state 109
    PRINT           shift and go to state 101
    INPUT           shift and go to state 110

    bloque                         shift and go to state 241
    for                            shift and go to state 102
    estatuto                       shift and go to state 230
    switch                         shift and go to state 114
    llamada                        shift and go to state 104
    condicion                      shift and go to state 106
    print                          shift and go to state 107
    input                          shift and go to state 108
    asignacion                     shift and go to state 113
    while                          shift and go to state 115

state 224

    (75) expresion_logica1 -> AND exp .

    LESS            reduce using rule 75 (expresion_logica1 -> AND exp .)
    GREATER         reduce using rule 75 (expresion_logica1 -> AND exp .)
    DOUBLE_EQUAL    reduce using rule 75 (expresion_logica1 -> AND exp .)
    DIFF            reduce using rule 75 (expresion_logica1 -> AND exp .)
    RPAREN          reduce using rule 75 (expresion_logica1 -> AND exp .)


state 225

    (74) expresion_logica -> exp expresion_logica1 expresion .

    RPAREN          reduce using rule 74 (expresion_logica -> exp expresion_logica1 expresion .)


state 226

    (77) expresion_logica1 -> OR exp .

    LESS            reduce using rule 77 (expresion_logica1 -> OR exp .)
    GREATER         reduce using rule 77 (expresion_logica1 -> OR exp .)
    DOUBLE_EQUAL    reduce using rule 77 (expresion_logica1 -> OR exp .)
    DIFF            reduce using rule 77 (expresion_logica1 -> OR exp .)
    RPAREN          reduce using rule 77 (expresion_logica1 -> OR exp .)


state 227

    (129) funcion5 -> ID declareFunc LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 . funcion6
    (131) funcion6 -> . RCURL
    (132) funcion6 -> . RETURN ID RCURL

    RCURL           shift and go to state 243
    RETURN          shift and go to state 244

    funcion6                       shift and go to state 242

state 228

    (124) funcion2 -> estatuto . funcion2
    (123) funcion2 -> . epsilon
    (124) funcion2 -> . estatuto funcion2
    (141) epsilon -> .
    (58) estatuto -> . asignacion
    (59) estatuto -> . llamada
    (60) estatuto -> . condicion
    (61) estatuto -> . switch
    (62) estatuto -> . while
    (63) estatuto -> . for
    (64) asignacion -> . ID EQUALS asignacion1
    (78) llamada -> . ID LPAREN llamada1 RPAREN
    (79) llamada -> . print
    (80) llamada -> . input
    (105) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (133) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (51) while -> . WHILE LPAREN expresion RPAREN bloque
    (115) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (100) print -> . PRINT LPAREN print1 RPAREN
    (112) input -> . INPUT LPAREN input1 RPAREN

    RCURL           reduce using rule 141 (epsilon -> .)
    RETURN          reduce using rule 141 (epsilon -> .)
    ID              shift and go to state 111
    IF              shift and go to state 112
    SWITCH          shift and go to state 105
    WHILE           shift and go to state 100
    FOR             shift and go to state 109
    PRINT           shift and go to state 101
    INPUT           shift and go to state 110

    funcion2                       shift and go to state 245
    for                            shift and go to state 102
    estatuto                       shift and go to state 228
    while                          shift and go to state 115
    llamada                        shift and go to state 104
    condicion                      shift and go to state 106
    print                          shift and go to state 107
    input                          shift and go to state 108
    epsilon                        shift and go to state 229
    asignacion                     shift and go to state 113
    switch                         shift and go to state 114

state 229

    (123) funcion2 -> epsilon .

    RCURL           reduce using rule 123 (funcion2 -> epsilon .)
    RETURN          reduce using rule 123 (funcion2 -> epsilon .)


state 230

    (27) bloque -> LCURL estatuto . bloque1 RCURL
    (28) bloque1 -> . estatuto bloque1
    (29) bloque1 -> . epsilon
    (58) estatuto -> . asignacion
    (59) estatuto -> . llamada
    (60) estatuto -> . condicion
    (61) estatuto -> . switch
    (62) estatuto -> . while
    (63) estatuto -> . for
    (141) epsilon -> .
    (64) asignacion -> . ID EQUALS asignacion1
    (78) llamada -> . ID LPAREN llamada1 RPAREN
    (79) llamada -> . print
    (80) llamada -> . input
    (105) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (133) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (51) while -> . WHILE LPAREN expresion RPAREN bloque
    (115) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (100) print -> . PRINT LPAREN print1 RPAREN
    (112) input -> . INPUT LPAREN input1 RPAREN

    RCURL           reduce using rule 141 (epsilon -> .)
    ID              shift and go to state 111
    IF              shift and go to state 112
    SWITCH          shift and go to state 105
    WHILE           shift and go to state 100
    FOR             shift and go to state 109
    PRINT           shift and go to state 101
    INPUT           shift and go to state 110

    for                            shift and go to state 102
    estatuto                       shift and go to state 246
    switch                         shift and go to state 114
    llamada                        shift and go to state 104
    condicion                      shift and go to state 106
    print                          shift and go to state 107
    input                          shift and go to state 108
    epsilon                        shift and go to state 247
    bloque1                        shift and go to state 248
    asignacion                     shift and go to state 113
    while                          shift and go to state 115

state 231

    (137) switch2 -> CASE varcte . COLON switch4 switch2

    COLON           shift and go to state 249


state 232

    (133) switch -> SWITCH ID switch1 LCURL switch2 switch3 . RCURL

    RCURL           shift and go to state 250


state 233

    (138) switch3 -> DEFAULT . COLON switch4

    COLON           shift and go to state 251


state 234

    (115) for -> FOR CTE_INT TO CTE_INT BY LPAREN . for1 CTE_INT RPAREN bloque
    (116) for1 -> . PLUS
    (117) for1 -> . TIMES
    (118) for1 -> . DIVIDE
    (119) for1 -> . MINUS

    PLUS            shift and go to state 254
    TIMES           shift and go to state 253
    DIVIDE          shift and go to state 252
    MINUS           shift and go to state 256

    for1                           shift and go to state 255

state 235

    (96) varcte2 -> epsilon .
    (83) llamada2 -> epsilon .

  ! reduce/reduce conflict for RPAREN resolved using rule 83 (llamada2 -> epsilon .)
    RPAREN          reduce using rule 83 (llamada2 -> epsilon .)

  ! RPAREN          [ reduce using rule 96 (varcte2 -> epsilon .) ]


state 236

    (97) varcte2 -> COMMA . exp varcte2
    (84) llamada2 -> COMMA . exp llamada2
    (30) exp -> . termino checkEXPPOper exp1
    (35) termino -> . factor checkTERMPOper termino1
    (52) factor -> . LPAREN factorAddFakeCover expresion RPAREN
    (53) factor -> . factor1
    (55) factor1 -> . PLUS varcte
    (56) factor1 -> . MINUS varcte
    (57) factor1 -> . varcte
    (85) varcte -> . ID varcte1
    (86) varcte -> . CTE_INT tipoINT
    (87) varcte -> . CTE_FLOAT tipoFLOAT
    (88) varcte -> . CTE_STRING tipoSTRING
    (89) varcte -> . cte_bool
    (98) cte_bool -> . TRUE
    (99) cte_bool -> . FALSE

    LPAREN          shift and go to state 47
    PLUS            shift and go to state 44
    MINUS           shift and go to state 42
    ID              shift and go to state 49
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 52
    CTE_STRING      shift and go to state 46
    TRUE            shift and go to state 41
    FALSE           shift and go to state 50

    factor1                        shift and go to state 51
    cte_bool                       shift and go to state 39
    termino                        shift and go to state 40
    exp                            shift and go to state 257
    factor                         shift and go to state 45
    varcte                         shift and go to state 43

state 237

    (84) llamada2 -> COMMA exp llamada2 .

    RPAREN          reduce using rule 84 (llamada2 -> COMMA exp llamada2 .)


state 238

    (109) condicion2 -> epsilon .

    ELSE            reduce using rule 109 (condicion2 -> epsilon .)
    ID              reduce using rule 109 (condicion2 -> epsilon .)
    IF              reduce using rule 109 (condicion2 -> epsilon .)
    SWITCH          reduce using rule 109 (condicion2 -> epsilon .)
    WHILE           reduce using rule 109 (condicion2 -> epsilon .)
    FOR             reduce using rule 109 (condicion2 -> epsilon .)
    PRINT           reduce using rule 109 (condicion2 -> epsilon .)
    INPUT           reduce using rule 109 (condicion2 -> epsilon .)
    RCURL           reduce using rule 109 (condicion2 -> epsilon .)
    RETURN          reduce using rule 109 (condicion2 -> epsilon .)
    CASE            reduce using rule 109 (condicion2 -> epsilon .)
    DEFAULT         reduce using rule 109 (condicion2 -> epsilon .)


state 239

    (105) condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 . condicion3
    (110) condicion3 -> . ELSE condicion1
    (111) condicion3 -> . epsilon
    (141) epsilon -> .

    ELSE            shift and go to state 259
    ID              reduce using rule 141 (epsilon -> .)
    IF              reduce using rule 141 (epsilon -> .)
    SWITCH          reduce using rule 141 (epsilon -> .)
    WHILE           reduce using rule 141 (epsilon -> .)
    FOR             reduce using rule 141 (epsilon -> .)
    PRINT           reduce using rule 141 (epsilon -> .)
    INPUT           reduce using rule 141 (epsilon -> .)
    RCURL           reduce using rule 141 (epsilon -> .)
    RETURN          reduce using rule 141 (epsilon -> .)
    CASE            reduce using rule 141 (epsilon -> .)
    DEFAULT         reduce using rule 141 (epsilon -> .)

    epsilon                        shift and go to state 258
    condicion3                     shift and go to state 260

state 240

    (108) condicion2 -> ELSEIF . condicion1 condicion2
    (106) condicion1 -> . bloque
    (107) condicion1 -> . LCURL bloque RCURL
    (27) bloque -> . LCURL estatuto bloque1 RCURL

    LCURL           shift and go to state 223

    bloque                         shift and go to state 222
    condicion1                     shift and go to state 261

state 241

    (107) condicion1 -> LCURL bloque . RCURL

    RCURL           shift and go to state 262


state 242

    (129) funcion5 -> ID declareFunc LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 funcion6 .

    FUNCTION        reduce using rule 129 (funcion5 -> ID declareFunc LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 funcion6 .)
    MAIN            reduce using rule 129 (funcion5 -> ID declareFunc LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 funcion6 .)


state 243

    (131) funcion6 -> RCURL .

    FUNCTION        reduce using rule 131 (funcion6 -> RCURL .)
    MAIN            reduce using rule 131 (funcion6 -> RCURL .)


state 244

    (132) funcion6 -> RETURN . ID RCURL

    ID              shift and go to state 263


state 245

    (124) funcion2 -> estatuto funcion2 .

    RCURL           reduce using rule 124 (funcion2 -> estatuto funcion2 .)
    RETURN          reduce using rule 124 (funcion2 -> estatuto funcion2 .)


state 246

    (28) bloque1 -> estatuto . bloque1
    (28) bloque1 -> . estatuto bloque1
    (29) bloque1 -> . epsilon
    (58) estatuto -> . asignacion
    (59) estatuto -> . llamada
    (60) estatuto -> . condicion
    (61) estatuto -> . switch
    (62) estatuto -> . while
    (63) estatuto -> . for
    (141) epsilon -> .
    (64) asignacion -> . ID EQUALS asignacion1
    (78) llamada -> . ID LPAREN llamada1 RPAREN
    (79) llamada -> . print
    (80) llamada -> . input
    (105) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (133) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (51) while -> . WHILE LPAREN expresion RPAREN bloque
    (115) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (100) print -> . PRINT LPAREN print1 RPAREN
    (112) input -> . INPUT LPAREN input1 RPAREN

    RCURL           reduce using rule 141 (epsilon -> .)
    ID              shift and go to state 111
    IF              shift and go to state 112
    SWITCH          shift and go to state 105
    WHILE           shift and go to state 100
    FOR             shift and go to state 109
    PRINT           shift and go to state 101
    INPUT           shift and go to state 110

    for                            shift and go to state 102
    estatuto                       shift and go to state 246
    switch                         shift and go to state 114
    llamada                        shift and go to state 104
    condicion                      shift and go to state 106
    print                          shift and go to state 107
    input                          shift and go to state 108
    epsilon                        shift and go to state 247
    bloque1                        shift and go to state 264
    asignacion                     shift and go to state 113
    while                          shift and go to state 115

state 247

    (29) bloque1 -> epsilon .

    RCURL           reduce using rule 29 (bloque1 -> epsilon .)


state 248

    (27) bloque -> LCURL estatuto bloque1 . RCURL

    RCURL           shift and go to state 265


state 249

    (137) switch2 -> CASE varcte COLON . switch4 switch2
    (139) switch4 -> . LCURL PASS RCURL
    (140) switch4 -> . estatuto
    (58) estatuto -> . asignacion
    (59) estatuto -> . llamada
    (60) estatuto -> . condicion
    (61) estatuto -> . switch
    (62) estatuto -> . while
    (63) estatuto -> . for
    (64) asignacion -> . ID EQUALS asignacion1
    (78) llamada -> . ID LPAREN llamada1 RPAREN
    (79) llamada -> . print
    (80) llamada -> . input
    (105) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (133) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (51) while -> . WHILE LPAREN expresion RPAREN bloque
    (115) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (100) print -> . PRINT LPAREN print1 RPAREN
    (112) input -> . INPUT LPAREN input1 RPAREN

    LCURL           shift and go to state 266
    ID              shift and go to state 111
    IF              shift and go to state 112
    SWITCH          shift and go to state 105
    WHILE           shift and go to state 100
    FOR             shift and go to state 109
    PRINT           shift and go to state 101
    INPUT           shift and go to state 110

    for                            shift and go to state 102
    estatuto                       shift and go to state 267
    switch                         shift and go to state 114
    llamada                        shift and go to state 104
    condicion                      shift and go to state 106
    print                          shift and go to state 107
    input                          shift and go to state 108
    asignacion                     shift and go to state 113
    switch4                        shift and go to state 268
    while                          shift and go to state 115

state 250

    (133) switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .

    ID              reduce using rule 133 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    IF              reduce using rule 133 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    SWITCH          reduce using rule 133 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    WHILE           reduce using rule 133 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    FOR             reduce using rule 133 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    PRINT           reduce using rule 133 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    INPUT           reduce using rule 133 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    RCURL           reduce using rule 133 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    RETURN          reduce using rule 133 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    CASE            reduce using rule 133 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    DEFAULT         reduce using rule 133 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)


state 251

    (138) switch3 -> DEFAULT COLON . switch4
    (139) switch4 -> . LCURL PASS RCURL
    (140) switch4 -> . estatuto
    (58) estatuto -> . asignacion
    (59) estatuto -> . llamada
    (60) estatuto -> . condicion
    (61) estatuto -> . switch
    (62) estatuto -> . while
    (63) estatuto -> . for
    (64) asignacion -> . ID EQUALS asignacion1
    (78) llamada -> . ID LPAREN llamada1 RPAREN
    (79) llamada -> . print
    (80) llamada -> . input
    (105) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (133) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (51) while -> . WHILE LPAREN expresion RPAREN bloque
    (115) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (100) print -> . PRINT LPAREN print1 RPAREN
    (112) input -> . INPUT LPAREN input1 RPAREN

    LCURL           shift and go to state 266
    ID              shift and go to state 111
    IF              shift and go to state 112
    SWITCH          shift and go to state 105
    WHILE           shift and go to state 100
    FOR             shift and go to state 109
    PRINT           shift and go to state 101
    INPUT           shift and go to state 110

    for                            shift and go to state 102
    estatuto                       shift and go to state 267
    switch                         shift and go to state 114
    llamada                        shift and go to state 104
    condicion                      shift and go to state 106
    print                          shift and go to state 107
    input                          shift and go to state 108
    asignacion                     shift and go to state 113
    switch4                        shift and go to state 269
    while                          shift and go to state 115

state 252

    (118) for1 -> DIVIDE .

    CTE_INT         reduce using rule 118 (for1 -> DIVIDE .)


state 253

    (117) for1 -> TIMES .

    CTE_INT         reduce using rule 117 (for1 -> TIMES .)


state 254

    (116) for1 -> PLUS .

    CTE_INT         reduce using rule 116 (for1 -> PLUS .)


state 255

    (115) for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 . CTE_INT RPAREN bloque

    CTE_INT         shift and go to state 270


state 256

    (119) for1 -> MINUS .

    CTE_INT         reduce using rule 119 (for1 -> MINUS .)


state 257

    (97) varcte2 -> COMMA exp . varcte2
    (84) llamada2 -> COMMA exp . llamada2
    (96) varcte2 -> . epsilon
    (97) varcte2 -> . COMMA exp varcte2
    (83) llamada2 -> . epsilon
    (84) llamada2 -> . COMMA exp llamada2
    (141) epsilon -> .

    COMMA           shift and go to state 236
    RPAREN          reduce using rule 141 (epsilon -> .)

    llamada2                       shift and go to state 237
    epsilon                        shift and go to state 235
    varcte2                        shift and go to state 178

state 258

    (111) condicion3 -> epsilon .

    ID              reduce using rule 111 (condicion3 -> epsilon .)
    IF              reduce using rule 111 (condicion3 -> epsilon .)
    SWITCH          reduce using rule 111 (condicion3 -> epsilon .)
    WHILE           reduce using rule 111 (condicion3 -> epsilon .)
    FOR             reduce using rule 111 (condicion3 -> epsilon .)
    PRINT           reduce using rule 111 (condicion3 -> epsilon .)
    INPUT           reduce using rule 111 (condicion3 -> epsilon .)
    RCURL           reduce using rule 111 (condicion3 -> epsilon .)
    RETURN          reduce using rule 111 (condicion3 -> epsilon .)
    CASE            reduce using rule 111 (condicion3 -> epsilon .)
    DEFAULT         reduce using rule 111 (condicion3 -> epsilon .)


state 259

    (110) condicion3 -> ELSE . condicion1
    (106) condicion1 -> . bloque
    (107) condicion1 -> . LCURL bloque RCURL
    (27) bloque -> . LCURL estatuto bloque1 RCURL

    LCURL           shift and go to state 223

    bloque                         shift and go to state 222
    condicion1                     shift and go to state 271

state 260

    (105) condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .

    ID              reduce using rule 105 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    IF              reduce using rule 105 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    SWITCH          reduce using rule 105 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    WHILE           reduce using rule 105 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    FOR             reduce using rule 105 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    PRINT           reduce using rule 105 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    INPUT           reduce using rule 105 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    RCURL           reduce using rule 105 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    RETURN          reduce using rule 105 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    CASE            reduce using rule 105 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    DEFAULT         reduce using rule 105 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)


state 261

    (108) condicion2 -> ELSEIF condicion1 . condicion2
    (108) condicion2 -> . ELSEIF condicion1 condicion2
    (109) condicion2 -> . epsilon
    (141) epsilon -> .

    ELSEIF          shift and go to state 240
    ELSE            reduce using rule 141 (epsilon -> .)
    ID              reduce using rule 141 (epsilon -> .)
    IF              reduce using rule 141 (epsilon -> .)
    SWITCH          reduce using rule 141 (epsilon -> .)
    WHILE           reduce using rule 141 (epsilon -> .)
    FOR             reduce using rule 141 (epsilon -> .)
    PRINT           reduce using rule 141 (epsilon -> .)
    INPUT           reduce using rule 141 (epsilon -> .)
    RCURL           reduce using rule 141 (epsilon -> .)
    RETURN          reduce using rule 141 (epsilon -> .)
    CASE            reduce using rule 141 (epsilon -> .)
    DEFAULT         reduce using rule 141 (epsilon -> .)

    epsilon                        shift and go to state 238
    condicion2                     shift and go to state 272

state 262

    (107) condicion1 -> LCURL bloque RCURL .

    ELSEIF          reduce using rule 107 (condicion1 -> LCURL bloque RCURL .)
    ELSE            reduce using rule 107 (condicion1 -> LCURL bloque RCURL .)
    ID              reduce using rule 107 (condicion1 -> LCURL bloque RCURL .)
    IF              reduce using rule 107 (condicion1 -> LCURL bloque RCURL .)
    SWITCH          reduce using rule 107 (condicion1 -> LCURL bloque RCURL .)
    WHILE           reduce using rule 107 (condicion1 -> LCURL bloque RCURL .)
    FOR             reduce using rule 107 (condicion1 -> LCURL bloque RCURL .)
    PRINT           reduce using rule 107 (condicion1 -> LCURL bloque RCURL .)
    INPUT           reduce using rule 107 (condicion1 -> LCURL bloque RCURL .)
    RCURL           reduce using rule 107 (condicion1 -> LCURL bloque RCURL .)
    RETURN          reduce using rule 107 (condicion1 -> LCURL bloque RCURL .)
    CASE            reduce using rule 107 (condicion1 -> LCURL bloque RCURL .)
    DEFAULT         reduce using rule 107 (condicion1 -> LCURL bloque RCURL .)


state 263

    (132) funcion6 -> RETURN ID . RCURL

    RCURL           shift and go to state 273


state 264

    (28) bloque1 -> estatuto bloque1 .

    RCURL           reduce using rule 28 (bloque1 -> estatuto bloque1 .)


state 265

    (27) bloque -> LCURL estatuto bloque1 RCURL .

    ID              reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    IF              reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    SWITCH          reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    WHILE           reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    FOR             reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    PRINT           reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    INPUT           reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    RCURL           reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    RETURN          reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    CASE            reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    DEFAULT         reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    ELSEIF          reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    ELSE            reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)


state 266

    (139) switch4 -> LCURL . PASS RCURL

    PASS            shift and go to state 274


state 267

    (140) switch4 -> estatuto .

    RCURL           reduce using rule 140 (switch4 -> estatuto .)
    CASE            reduce using rule 140 (switch4 -> estatuto .)
    DEFAULT         reduce using rule 140 (switch4 -> estatuto .)


state 268

    (137) switch2 -> CASE varcte COLON switch4 . switch2
    (136) switch2 -> . epsilon
    (137) switch2 -> . CASE varcte COLON switch4 switch2
    (141) epsilon -> .

    CASE            shift and go to state 214
    DEFAULT         reduce using rule 141 (epsilon -> .)

    switch2                        shift and go to state 275
    epsilon                        shift and go to state 216

state 269

    (138) switch3 -> DEFAULT COLON switch4 .

    RCURL           reduce using rule 138 (switch3 -> DEFAULT COLON switch4 .)


state 270

    (115) for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT . RPAREN bloque

    RPAREN          shift and go to state 276


state 271

    (110) condicion3 -> ELSE condicion1 .

    ID              reduce using rule 110 (condicion3 -> ELSE condicion1 .)
    IF              reduce using rule 110 (condicion3 -> ELSE condicion1 .)
    SWITCH          reduce using rule 110 (condicion3 -> ELSE condicion1 .)
    WHILE           reduce using rule 110 (condicion3 -> ELSE condicion1 .)
    FOR             reduce using rule 110 (condicion3 -> ELSE condicion1 .)
    PRINT           reduce using rule 110 (condicion3 -> ELSE condicion1 .)
    INPUT           reduce using rule 110 (condicion3 -> ELSE condicion1 .)
    RCURL           reduce using rule 110 (condicion3 -> ELSE condicion1 .)
    RETURN          reduce using rule 110 (condicion3 -> ELSE condicion1 .)
    CASE            reduce using rule 110 (condicion3 -> ELSE condicion1 .)
    DEFAULT         reduce using rule 110 (condicion3 -> ELSE condicion1 .)


state 272

    (108) condicion2 -> ELSEIF condicion1 condicion2 .

    ELSE            reduce using rule 108 (condicion2 -> ELSEIF condicion1 condicion2 .)
    ID              reduce using rule 108 (condicion2 -> ELSEIF condicion1 condicion2 .)
    IF              reduce using rule 108 (condicion2 -> ELSEIF condicion1 condicion2 .)
    SWITCH          reduce using rule 108 (condicion2 -> ELSEIF condicion1 condicion2 .)
    WHILE           reduce using rule 108 (condicion2 -> ELSEIF condicion1 condicion2 .)
    FOR             reduce using rule 108 (condicion2 -> ELSEIF condicion1 condicion2 .)
    PRINT           reduce using rule 108 (condicion2 -> ELSEIF condicion1 condicion2 .)
    INPUT           reduce using rule 108 (condicion2 -> ELSEIF condicion1 condicion2 .)
    RCURL           reduce using rule 108 (condicion2 -> ELSEIF condicion1 condicion2 .)
    RETURN          reduce using rule 108 (condicion2 -> ELSEIF condicion1 condicion2 .)
    CASE            reduce using rule 108 (condicion2 -> ELSEIF condicion1 condicion2 .)
    DEFAULT         reduce using rule 108 (condicion2 -> ELSEIF condicion1 condicion2 .)


state 273

    (132) funcion6 -> RETURN ID RCURL .

    FUNCTION        reduce using rule 132 (funcion6 -> RETURN ID RCURL .)
    MAIN            reduce using rule 132 (funcion6 -> RETURN ID RCURL .)


state 274

    (139) switch4 -> LCURL PASS . RCURL

    RCURL           shift and go to state 277


state 275

    (137) switch2 -> CASE varcte COLON switch4 switch2 .

    DEFAULT         reduce using rule 137 (switch2 -> CASE varcte COLON switch4 switch2 .)


state 276

    (115) for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN . bloque
    (27) bloque -> . LCURL estatuto bloque1 RCURL

    LCURL           shift and go to state 212

    bloque                         shift and go to state 278

state 277

    (139) switch4 -> LCURL PASS RCURL .

    RCURL           reduce using rule 139 (switch4 -> LCURL PASS RCURL .)
    CASE            reduce using rule 139 (switch4 -> LCURL PASS RCURL .)
    DEFAULT         reduce using rule 139 (switch4 -> LCURL PASS RCURL .)


state 278

    (115) for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .

    ID              reduce using rule 115 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    IF              reduce using rule 115 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    SWITCH          reduce using rule 115 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    WHILE           reduce using rule 115 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    FOR             reduce using rule 115 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    PRINT           reduce using rule 115 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    INPUT           reduce using rule 115 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    RCURL           reduce using rule 115 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    RETURN          reduce using rule 115 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    CASE            reduce using rule 115 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    DEFAULT         reduce using rule 115 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 235 resolved using rule (llamada2 -> epsilon)
WARNING: rejected rule (varcte2 -> epsilon) in state 235
