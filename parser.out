Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> START programa1 programa2 main END
Rule 2     programa1 -> var_declaracion programa1
Rule 3     programa1 -> epsilon
Rule 4     programa2 -> funcion programa2
Rule 5     programa2 -> epsilon
Rule 6     var_declaracion -> tipo var_declaracion1
Rule 7     var_declaracion -> VECTOR tipo var_declaracion2
Rule 8     var_declaracion1 -> ID declareVar
Rule 9     var_declaracion2 -> ID declareVar2
Rule 10    var_declaracion3 -> epsilon
Rule 11    var_declaracion3 -> inicializacion
Rule 12    var_declaracion4 -> epsilon
Rule 13    var_declaracion4 -> inicializacion_vector
Rule 14    declareVar -> <empty>
Rule 15    declareVar2 -> <empty>
Rule 16    parametros -> tipo parametros1 ID parametros2
Rule 17    parametros -> VECTOR tipo parametros1 ID parametros2
Rule 18    parametros1 -> AMPERSON
Rule 19    parametros1 -> epsilon
Rule 20    parametros2 -> COMMA parametros
Rule 21    parametros2 -> epsilon
Rule 22    inicializacion -> EQUALS exp
Rule 23    tipo -> INT
Rule 24    tipo -> FLOAT
Rule 25    tipo -> BOOL
Rule 26    tipo -> STRING
Rule 27    bloque -> LCURL estatuto bloque1 RCURL
Rule 28    bloque1 -> estatuto bloque1
Rule 29    bloque1 -> epsilon
Rule 30    exp -> termino checkEXPPOper exp1
Rule 31    checkEXPPOper -> <empty>
Rule 32    exp1 -> PLUS addOperator exp
Rule 33    exp1 -> MINUS addOperator exp
Rule 34    exp1 -> epsilon
Rule 35    termino -> factor checkTERMPOper termino1
Rule 36    checkTERMPOper -> <empty>
Rule 37    termino1 -> TIMES addOperator termino
Rule 38    termino1 -> DIVIDE addOperator termino
Rule 39    termino1 -> epsilon
Rule 40    addOperator -> <empty>
Rule 41    inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET
Rule 42    inicializacion_vector1 -> varcte inicializacion_vector2
Rule 43    inicializacion_vector1 -> epsilon
Rule 44    inicializacion_vector2 -> COMMA varcte inicializacion_vector2
Rule 45    inicializacion_vector2 -> epsilon
Rule 46    main -> MAIN declareMain LCURL main1 estatuto main2 RCURL
Rule 47    declareMain -> <empty>
Rule 48    main1 -> var_declaracion main1
Rule 49    main1 -> epsilon
Rule 50    main2 -> estatuto main2
Rule 51    main2 -> epsilon
Rule 52    while -> WHILE LPAREN expresion RPAREN bloque
Rule 53    factor -> LPAREN factorAddFakeCover exp RPAREN
Rule 54    factor -> factor1
Rule 55    factorAddFakeCover -> <empty>
Rule 56    factor1 -> PLUS varcte
Rule 57    factor1 -> MINUS varcte
Rule 58    factor1 -> varcte
Rule 59    estatuto -> asignacion
Rule 60    estatuto -> llamada
Rule 61    estatuto -> condicion
Rule 62    estatuto -> switch
Rule 63    estatuto -> while
Rule 64    estatuto -> for
Rule 65    asignacion -> ID EQUALS asignacion1
Rule 66    asignacion1 -> exp
Rule 67    asignacion1 -> llamada
Rule 68    asignacion1 -> asignacion_vector
Rule 69    asignacion_vector -> LBRACKET inicializacion_vector1 RBRACKET
Rule 70    expresion -> expresion1
Rule 71    expresion1 -> epsilon
Rule 72    expresion1 -> expresion2 exp
Rule 73    expresion2 -> LESS
Rule 74    expresion2 -> GREATER
Rule 75    expresion2 -> DOUBLE_EQUAL
Rule 76    expresion2 -> DIFF
Rule 77    expresion_logica -> exp expresion_logica1 expresion
Rule 78    expresion_logica1 -> AND exp
Rule 79    expresion_logica1 -> epsilon
Rule 80    expresion_logica1 -> OR exp
Rule 81    llamada -> ID LPAREN llamada1 RPAREN
Rule 82    llamada -> print
Rule 83    llamada -> input
Rule 84    llamada1 -> epsilon
Rule 85    llamada1 -> exp llamada2
Rule 86    llamada2 -> epsilon
Rule 87    llamada2 -> COMMA exp llamada2
Rule 88    varcte -> ID varcte1
Rule 89    varcte -> CTE_INT tipoINT
Rule 90    varcte -> CTE_FLOAT tipoFLOAT
Rule 91    varcte -> CTE_STRING tipoSTRING
Rule 92    varcte -> cte_bool
Rule 93    tipoINT -> <empty>
Rule 94    tipoFLOAT -> <empty>
Rule 95    tipoSTRING -> <empty>
Rule 96    varcte1 -> epsilon
Rule 97    varcte1 -> LPAREN exp varcte2 RPAREN
Rule 98    varcte1 -> LBRACKET exp RBRACKET
Rule 99    varcte2 -> epsilon
Rule 100   varcte2 -> COMMA exp varcte2
Rule 101   cte_bool -> TRUE
Rule 102   cte_bool -> FALSE
Rule 103   print -> PRINT LPAREN print1 RPAREN
Rule 104   print1 -> CTE_STRING print2
Rule 105   print1 -> ID print2
Rule 106   print2 -> epsilon
Rule 107   print2 -> PLUS print1
Rule 108   condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
Rule 109   condicion1 -> bloque
Rule 110   condicion1 -> LCURL bloque RCURL
Rule 111   condicion2 -> ELSEIF condicion1 condicion2
Rule 112   condicion2 -> epsilon
Rule 113   condicion3 -> ELSE condicion1
Rule 114   condicion3 -> epsilon
Rule 115   input -> INPUT LPAREN input1 RPAREN
Rule 116   input1 -> CTE_STRING
Rule 117   input1 -> epsilon
Rule 118   for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
Rule 119   for1 -> PLUS
Rule 120   for1 -> TIMES
Rule 121   for1 -> DIVIDE
Rule 122   for1 -> MINUS
Rule 123   funcion -> FUNCTION funcion4
Rule 124   funcion1 -> epsilon
Rule 125   funcion1 -> var_declaracion funcion1
Rule 126   funcion2 -> epsilon
Rule 127   funcion2 -> estatuto funcion2
Rule 128   funcion3 -> parametros
Rule 129   funcion3 -> epsilon
Rule 130   funcion4 -> VOID funcion5
Rule 131   funcion4 -> tipo funcion5
Rule 132   funcion5 -> ID declareFunc LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 funcion6
Rule 133   declareFunc -> <empty>
Rule 134   funcion6 -> RCURL
Rule 135   funcion6 -> RETURN ID RCURL
Rule 136   switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL
Rule 137   switch1 -> epsilon
Rule 138   switch1 -> LBRACKET exp RBRACKET
Rule 139   switch2 -> epsilon
Rule 140   switch2 -> CASE varcte COLON switch4 switch2
Rule 141   switch3 -> DEFAULT COLON switch4
Rule 142   switch4 -> LCURL PASS RCURL
Rule 143   switch4 -> estatuto
Rule 144   epsilon -> <empty>

Terminals, with rules where they appear

AMPERSON             : 18
AND                  : 78
BOOL                 : 25
BY                   : 118
CASE                 : 140
COLON                : 140 141
COMMA                : 20 44 87 100
CTE_FLOAT            : 90
CTE_INT              : 89 118 118 118
CTE_STRING           : 91 104 116
DEFAULT              : 141
DIFF                 : 76
DIVIDE               : 38 121
DOUBLE_EQUAL         : 75
ELSE                 : 113
ELSEIF               : 111
END                  : 1
EQUALS               : 22 41 65
FALSE                : 102
FLOAT                : 24
FOR                  : 118
FUNCTION             : 123
GREATER              : 74
ID                   : 8 9 16 17 65 81 88 105 132 135 136
IF                   : 108
INPUT                : 115
INT                  : 23
LBRACKET             : 41 69 98 138
LCURL                : 27 46 110 132 136 142
LESS                 : 73
LPAREN               : 52 53 81 97 103 108 115 118 132
MAIN                 : 46
MINUS                : 33 57 122
OR                   : 80
PASS                 : 142
PLUS                 : 32 56 107 119
PRINT                : 103
RBRACKET             : 41 69 98 138
RCURL                : 27 46 110 134 135 136 142
RETURN               : 135
RPAREN               : 52 53 81 97 103 108 115 118 132
START                : 1
STRING               : 26
SWITCH               : 136
TIMES                : 37 120
TO                   : 118
TRUE                 : 101
VECTOR               : 7 17
VOID                 : 130
WHILE                : 52
error                : 

Nonterminals, with rules where they appear

addOperator          : 32 33 37 38
asignacion           : 59
asignacion1          : 65
asignacion_vector    : 68
bloque               : 52 109 110 118
bloque1              : 27 28
checkEXPPOper        : 30
checkTERMPOper       : 35
condicion            : 61
condicion1           : 108 111 113
condicion2           : 108 111
condicion3           : 108
cte_bool             : 92
declareFunc          : 132
declareMain          : 46
declareVar           : 8
declareVar2          : 9
epsilon              : 3 5 10 12 19 21 29 34 39 43 45 49 51 71 79 84 86 96 99 106 112 114 117 124 126 129 137 139
estatuto             : 27 28 46 50 127 132 143
exp                  : 22 32 33 53 66 72 77 78 80 85 87 97 98 100 138
exp1                 : 30
expresion            : 52 77
expresion1           : 70
expresion2           : 72
expresion_logica     : 108
expresion_logica1    : 77
factor               : 35
factor1              : 54
factorAddFakeCover   : 53
for                  : 64
for1                 : 118
funcion              : 4
funcion1             : 125 132
funcion2             : 127 132
funcion3             : 132
funcion4             : 123
funcion5             : 130 131
funcion6             : 132
inicializacion       : 11
inicializacion_vector : 13
inicializacion_vector1 : 41 69
inicializacion_vector2 : 42 44
input                : 83
input1               : 115
llamada              : 60 67
llamada1             : 81
llamada2             : 85 87
main                 : 1
main1                : 46 48
main2                : 46 50
parametros           : 20 128
parametros1          : 16 17
parametros2          : 16 17
print                : 82
print1               : 103 107
print2               : 104 105
programa             : 0
programa1            : 1 2
programa2            : 1 4
switch               : 62
switch1              : 136
switch2              : 136 140
switch3              : 136
switch4              : 140 141
termino              : 30 37 38
termino1             : 35
tipo                 : 6 7 16 17 131
tipoFLOAT            : 90
tipoINT              : 89
tipoSTRING           : 91
var_declaracion      : 2 48 125
var_declaracion1     : 6
var_declaracion2     : 7
var_declaracion3     : 
var_declaracion4     : 
varcte               : 42 44 56 57 58 140
varcte1              : 88
varcte2              : 97 100
while                : 63

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . START programa1 programa2 main END

    START           shift and go to state 1

    programa                       shift and go to state 2

state 1

    (1) programa -> START . programa1 programa2 main END
    (2) programa1 -> . var_declaracion programa1
    (3) programa1 -> . epsilon
    (6) var_declaracion -> . tipo var_declaracion1
    (7) var_declaracion -> . VECTOR tipo var_declaracion2
    (144) epsilon -> .
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    VECTOR          shift and go to state 8
    FUNCTION        reduce using rule 144 (epsilon -> .)
    MAIN            reduce using rule 144 (epsilon -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 5
    var_declaracion                shift and go to state 6
    programa1                      shift and go to state 7
    epsilon                        shift and go to state 10

state 2

    (0) S' -> programa .



state 3

    (24) tipo -> FLOAT .

    AMPERSON        reduce using rule 24 (tipo -> FLOAT .)
    ID              reduce using rule 24 (tipo -> FLOAT .)


state 4

    (26) tipo -> STRING .

    AMPERSON        reduce using rule 26 (tipo -> STRING .)
    ID              reduce using rule 26 (tipo -> STRING .)


state 5

    (6) var_declaracion -> tipo . var_declaracion1
    (8) var_declaracion1 -> . ID declareVar

    ID              shift and go to state 13

    var_declaracion1               shift and go to state 12

state 6

    (2) programa1 -> var_declaracion . programa1
    (2) programa1 -> . var_declaracion programa1
    (3) programa1 -> . epsilon
    (6) var_declaracion -> . tipo var_declaracion1
    (7) var_declaracion -> . VECTOR tipo var_declaracion2
    (144) epsilon -> .
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    VECTOR          shift and go to state 8
    FUNCTION        reduce using rule 144 (epsilon -> .)
    MAIN            reduce using rule 144 (epsilon -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 5
    epsilon                        shift and go to state 10
    var_declaracion                shift and go to state 6
    programa1                      shift and go to state 14

state 7

    (1) programa -> START programa1 . programa2 main END
    (4) programa2 -> . funcion programa2
    (5) programa2 -> . epsilon
    (123) funcion -> . FUNCTION funcion4
    (144) epsilon -> .

    FUNCTION        shift and go to state 15
    MAIN            reduce using rule 144 (epsilon -> .)

    epsilon                        shift and go to state 16
    programa2                      shift and go to state 17
    funcion                        shift and go to state 18

state 8

    (7) var_declaracion -> VECTOR . tipo var_declaracion2
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 19

state 9

    (25) tipo -> BOOL .

    AMPERSON        reduce using rule 25 (tipo -> BOOL .)
    ID              reduce using rule 25 (tipo -> BOOL .)


state 10

    (3) programa1 -> epsilon .

    FUNCTION        reduce using rule 3 (programa1 -> epsilon .)
    MAIN            reduce using rule 3 (programa1 -> epsilon .)


state 11

    (23) tipo -> INT .

    AMPERSON        reduce using rule 23 (tipo -> INT .)
    ID              reduce using rule 23 (tipo -> INT .)


state 12

    (6) var_declaracion -> tipo var_declaracion1 .

    VECTOR          reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    INT             reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    FLOAT           reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    BOOL            reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    STRING          reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    ID              reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    IF              reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    SWITCH          reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    WHILE           reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    FOR             reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    PRINT           reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    INPUT           reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    FUNCTION        reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    MAIN            reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)


state 13

    (8) var_declaracion1 -> ID . declareVar
    (14) declareVar -> .

    VECTOR          reduce using rule 14 (declareVar -> .)
    INT             reduce using rule 14 (declareVar -> .)
    FLOAT           reduce using rule 14 (declareVar -> .)
    BOOL            reduce using rule 14 (declareVar -> .)
    STRING          reduce using rule 14 (declareVar -> .)
    FUNCTION        reduce using rule 14 (declareVar -> .)
    MAIN            reduce using rule 14 (declareVar -> .)
    ID              reduce using rule 14 (declareVar -> .)
    IF              reduce using rule 14 (declareVar -> .)
    SWITCH          reduce using rule 14 (declareVar -> .)
    WHILE           reduce using rule 14 (declareVar -> .)
    FOR             reduce using rule 14 (declareVar -> .)
    PRINT           reduce using rule 14 (declareVar -> .)
    INPUT           reduce using rule 14 (declareVar -> .)

    declareVar                     shift and go to state 20

state 14

    (2) programa1 -> var_declaracion programa1 .

    FUNCTION        reduce using rule 2 (programa1 -> var_declaracion programa1 .)
    MAIN            reduce using rule 2 (programa1 -> var_declaracion programa1 .)


state 15

    (123) funcion -> FUNCTION . funcion4
    (130) funcion4 -> . VOID funcion5
    (131) funcion4 -> . tipo funcion5
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    VOID            shift and go to state 22
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    funcion4                       shift and go to state 23
    tipo                           shift and go to state 21

state 16

    (5) programa2 -> epsilon .

    MAIN            reduce using rule 5 (programa2 -> epsilon .)


state 17

    (1) programa -> START programa1 programa2 . main END
    (46) main -> . MAIN declareMain LCURL main1 estatuto main2 RCURL

    MAIN            shift and go to state 25

    main                           shift and go to state 24

state 18

    (4) programa2 -> funcion . programa2
    (4) programa2 -> . funcion programa2
    (5) programa2 -> . epsilon
    (123) funcion -> . FUNCTION funcion4
    (144) epsilon -> .

    FUNCTION        shift and go to state 15
    MAIN            reduce using rule 144 (epsilon -> .)

    epsilon                        shift and go to state 16
    programa2                      shift and go to state 26
    funcion                        shift and go to state 18

state 19

    (7) var_declaracion -> VECTOR tipo . var_declaracion2
    (9) var_declaracion2 -> . ID declareVar2

    ID              shift and go to state 28

    var_declaracion2               shift and go to state 27

state 20

    (8) var_declaracion1 -> ID declareVar .

    VECTOR          reduce using rule 8 (var_declaracion1 -> ID declareVar .)
    INT             reduce using rule 8 (var_declaracion1 -> ID declareVar .)
    FLOAT           reduce using rule 8 (var_declaracion1 -> ID declareVar .)
    BOOL            reduce using rule 8 (var_declaracion1 -> ID declareVar .)
    STRING          reduce using rule 8 (var_declaracion1 -> ID declareVar .)
    FUNCTION        reduce using rule 8 (var_declaracion1 -> ID declareVar .)
    MAIN            reduce using rule 8 (var_declaracion1 -> ID declareVar .)
    ID              reduce using rule 8 (var_declaracion1 -> ID declareVar .)
    IF              reduce using rule 8 (var_declaracion1 -> ID declareVar .)
    SWITCH          reduce using rule 8 (var_declaracion1 -> ID declareVar .)
    WHILE           reduce using rule 8 (var_declaracion1 -> ID declareVar .)
    FOR             reduce using rule 8 (var_declaracion1 -> ID declareVar .)
    PRINT           reduce using rule 8 (var_declaracion1 -> ID declareVar .)
    INPUT           reduce using rule 8 (var_declaracion1 -> ID declareVar .)


state 21

    (131) funcion4 -> tipo . funcion5
    (132) funcion5 -> . ID declareFunc LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 funcion6

    ID              shift and go to state 29

    funcion5                       shift and go to state 30

state 22

    (130) funcion4 -> VOID . funcion5
    (132) funcion5 -> . ID declareFunc LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 funcion6

    ID              shift and go to state 29

    funcion5                       shift and go to state 31

state 23

    (123) funcion -> FUNCTION funcion4 .

    FUNCTION        reduce using rule 123 (funcion -> FUNCTION funcion4 .)
    MAIN            reduce using rule 123 (funcion -> FUNCTION funcion4 .)


state 24

    (1) programa -> START programa1 programa2 main . END

    END             shift and go to state 32


state 25

    (46) main -> MAIN . declareMain LCURL main1 estatuto main2 RCURL
    (47) declareMain -> .

    LCURL           reduce using rule 47 (declareMain -> .)

    declareMain                    shift and go to state 33

state 26

    (4) programa2 -> funcion programa2 .

    MAIN            reduce using rule 4 (programa2 -> funcion programa2 .)


state 27

    (7) var_declaracion -> VECTOR tipo var_declaracion2 .

    VECTOR          reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    INT             reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    FLOAT           reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    BOOL            reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    STRING          reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    ID              reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    IF              reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    SWITCH          reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    WHILE           reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    FOR             reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    PRINT           reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    INPUT           reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    FUNCTION        reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    MAIN            reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)


state 28

    (9) var_declaracion2 -> ID . declareVar2
    (15) declareVar2 -> .

    VECTOR          reduce using rule 15 (declareVar2 -> .)
    INT             reduce using rule 15 (declareVar2 -> .)
    FLOAT           reduce using rule 15 (declareVar2 -> .)
    BOOL            reduce using rule 15 (declareVar2 -> .)
    STRING          reduce using rule 15 (declareVar2 -> .)
    FUNCTION        reduce using rule 15 (declareVar2 -> .)
    MAIN            reduce using rule 15 (declareVar2 -> .)
    ID              reduce using rule 15 (declareVar2 -> .)
    IF              reduce using rule 15 (declareVar2 -> .)
    SWITCH          reduce using rule 15 (declareVar2 -> .)
    WHILE           reduce using rule 15 (declareVar2 -> .)
    FOR             reduce using rule 15 (declareVar2 -> .)
    PRINT           reduce using rule 15 (declareVar2 -> .)
    INPUT           reduce using rule 15 (declareVar2 -> .)

    declareVar2                    shift and go to state 34

state 29

    (132) funcion5 -> ID . declareFunc LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 funcion6
    (133) declareFunc -> .

    LPAREN          reduce using rule 133 (declareFunc -> .)

    declareFunc                    shift and go to state 35

state 30

    (131) funcion4 -> tipo funcion5 .

    FUNCTION        reduce using rule 131 (funcion4 -> tipo funcion5 .)
    MAIN            reduce using rule 131 (funcion4 -> tipo funcion5 .)


state 31

    (130) funcion4 -> VOID funcion5 .

    FUNCTION        reduce using rule 130 (funcion4 -> VOID funcion5 .)
    MAIN            reduce using rule 130 (funcion4 -> VOID funcion5 .)


state 32

    (1) programa -> START programa1 programa2 main END .

    $end            reduce using rule 1 (programa -> START programa1 programa2 main END .)


state 33

    (46) main -> MAIN declareMain . LCURL main1 estatuto main2 RCURL

    LCURL           shift and go to state 36


state 34

    (9) var_declaracion2 -> ID declareVar2 .

    VECTOR          reduce using rule 9 (var_declaracion2 -> ID declareVar2 .)
    INT             reduce using rule 9 (var_declaracion2 -> ID declareVar2 .)
    FLOAT           reduce using rule 9 (var_declaracion2 -> ID declareVar2 .)
    BOOL            reduce using rule 9 (var_declaracion2 -> ID declareVar2 .)
    STRING          reduce using rule 9 (var_declaracion2 -> ID declareVar2 .)
    FUNCTION        reduce using rule 9 (var_declaracion2 -> ID declareVar2 .)
    MAIN            reduce using rule 9 (var_declaracion2 -> ID declareVar2 .)
    ID              reduce using rule 9 (var_declaracion2 -> ID declareVar2 .)
    IF              reduce using rule 9 (var_declaracion2 -> ID declareVar2 .)
    SWITCH          reduce using rule 9 (var_declaracion2 -> ID declareVar2 .)
    WHILE           reduce using rule 9 (var_declaracion2 -> ID declareVar2 .)
    FOR             reduce using rule 9 (var_declaracion2 -> ID declareVar2 .)
    PRINT           reduce using rule 9 (var_declaracion2 -> ID declareVar2 .)
    INPUT           reduce using rule 9 (var_declaracion2 -> ID declareVar2 .)


state 35

    (132) funcion5 -> ID declareFunc . LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 funcion6

    LPAREN          shift and go to state 37


state 36

    (46) main -> MAIN declareMain LCURL . main1 estatuto main2 RCURL
    (48) main1 -> . var_declaracion main1
    (49) main1 -> . epsilon
    (6) var_declaracion -> . tipo var_declaracion1
    (7) var_declaracion -> . VECTOR tipo var_declaracion2
    (144) epsilon -> .
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    VECTOR          shift and go to state 8
    ID              reduce using rule 144 (epsilon -> .)
    IF              reduce using rule 144 (epsilon -> .)
    SWITCH          reduce using rule 144 (epsilon -> .)
    WHILE           reduce using rule 144 (epsilon -> .)
    FOR             reduce using rule 144 (epsilon -> .)
    PRINT           reduce using rule 144 (epsilon -> .)
    INPUT           reduce using rule 144 (epsilon -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 5
    main1                          shift and go to state 38
    var_declaracion                shift and go to state 39
    epsilon                        shift and go to state 40

state 37

    (132) funcion5 -> ID declareFunc LPAREN . funcion3 RPAREN LCURL funcion1 estatuto funcion2 funcion6
    (128) funcion3 -> . parametros
    (129) funcion3 -> . epsilon
    (16) parametros -> . tipo parametros1 ID parametros2
    (17) parametros -> . VECTOR tipo parametros1 ID parametros2
    (144) epsilon -> .
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    VECTOR          shift and go to state 45
    RPAREN          reduce using rule 144 (epsilon -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 41
    epsilon                        shift and go to state 42
    funcion3                       shift and go to state 43
    parametros                     shift and go to state 44

state 38

    (46) main -> MAIN declareMain LCURL main1 . estatuto main2 RCURL
    (59) estatuto -> . asignacion
    (60) estatuto -> . llamada
    (61) estatuto -> . condicion
    (62) estatuto -> . switch
    (63) estatuto -> . while
    (64) estatuto -> . for
    (65) asignacion -> . ID EQUALS asignacion1
    (81) llamada -> . ID LPAREN llamada1 RPAREN
    (82) llamada -> . print
    (83) llamada -> . input
    (108) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (136) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (52) while -> . WHILE LPAREN expresion RPAREN bloque
    (118) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (103) print -> . PRINT LPAREN print1 RPAREN
    (115) input -> . INPUT LPAREN input1 RPAREN

    ID              shift and go to state 57
    IF              shift and go to state 58
    SWITCH          shift and go to state 51
    WHILE           shift and go to state 46
    FOR             shift and go to state 55
    PRINT           shift and go to state 47
    INPUT           shift and go to state 56

    for                            shift and go to state 48
    estatuto                       shift and go to state 49
    switch                         shift and go to state 60
    llamada                        shift and go to state 50
    condicion                      shift and go to state 52
    print                          shift and go to state 53
    input                          shift and go to state 54
    asignacion                     shift and go to state 59
    while                          shift and go to state 61

state 39

    (48) main1 -> var_declaracion . main1
    (48) main1 -> . var_declaracion main1
    (49) main1 -> . epsilon
    (6) var_declaracion -> . tipo var_declaracion1
    (7) var_declaracion -> . VECTOR tipo var_declaracion2
    (144) epsilon -> .
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    VECTOR          shift and go to state 8
    ID              reduce using rule 144 (epsilon -> .)
    IF              reduce using rule 144 (epsilon -> .)
    SWITCH          reduce using rule 144 (epsilon -> .)
    WHILE           reduce using rule 144 (epsilon -> .)
    FOR             reduce using rule 144 (epsilon -> .)
    PRINT           reduce using rule 144 (epsilon -> .)
    INPUT           reduce using rule 144 (epsilon -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 5
    main1                          shift and go to state 62
    var_declaracion                shift and go to state 39
    epsilon                        shift and go to state 40

state 40

    (49) main1 -> epsilon .

    ID              reduce using rule 49 (main1 -> epsilon .)
    IF              reduce using rule 49 (main1 -> epsilon .)
    SWITCH          reduce using rule 49 (main1 -> epsilon .)
    WHILE           reduce using rule 49 (main1 -> epsilon .)
    FOR             reduce using rule 49 (main1 -> epsilon .)
    PRINT           reduce using rule 49 (main1 -> epsilon .)
    INPUT           reduce using rule 49 (main1 -> epsilon .)


state 41

    (16) parametros -> tipo . parametros1 ID parametros2
    (18) parametros1 -> . AMPERSON
    (19) parametros1 -> . epsilon
    (144) epsilon -> .

    AMPERSON        shift and go to state 65
    ID              reduce using rule 144 (epsilon -> .)

    parametros1                    shift and go to state 64
    epsilon                        shift and go to state 63

state 42

    (129) funcion3 -> epsilon .

    RPAREN          reduce using rule 129 (funcion3 -> epsilon .)


state 43

    (132) funcion5 -> ID declareFunc LPAREN funcion3 . RPAREN LCURL funcion1 estatuto funcion2 funcion6

    RPAREN          shift and go to state 66


state 44

    (128) funcion3 -> parametros .

    RPAREN          reduce using rule 128 (funcion3 -> parametros .)


state 45

    (17) parametros -> VECTOR . tipo parametros1 ID parametros2
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 67

state 46

    (52) while -> WHILE . LPAREN expresion RPAREN bloque

    LPAREN          shift and go to state 68


state 47

    (103) print -> PRINT . LPAREN print1 RPAREN

    LPAREN          shift and go to state 69


state 48

    (64) estatuto -> for .

    ID              reduce using rule 64 (estatuto -> for .)
    IF              reduce using rule 64 (estatuto -> for .)
    SWITCH          reduce using rule 64 (estatuto -> for .)
    WHILE           reduce using rule 64 (estatuto -> for .)
    FOR             reduce using rule 64 (estatuto -> for .)
    PRINT           reduce using rule 64 (estatuto -> for .)
    INPUT           reduce using rule 64 (estatuto -> for .)
    RCURL           reduce using rule 64 (estatuto -> for .)
    RETURN          reduce using rule 64 (estatuto -> for .)
    CASE            reduce using rule 64 (estatuto -> for .)
    DEFAULT         reduce using rule 64 (estatuto -> for .)


state 49

    (46) main -> MAIN declareMain LCURL main1 estatuto . main2 RCURL
    (50) main2 -> . estatuto main2
    (51) main2 -> . epsilon
    (59) estatuto -> . asignacion
    (60) estatuto -> . llamada
    (61) estatuto -> . condicion
    (62) estatuto -> . switch
    (63) estatuto -> . while
    (64) estatuto -> . for
    (144) epsilon -> .
    (65) asignacion -> . ID EQUALS asignacion1
    (81) llamada -> . ID LPAREN llamada1 RPAREN
    (82) llamada -> . print
    (83) llamada -> . input
    (108) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (136) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (52) while -> . WHILE LPAREN expresion RPAREN bloque
    (118) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (103) print -> . PRINT LPAREN print1 RPAREN
    (115) input -> . INPUT LPAREN input1 RPAREN

    RCURL           reduce using rule 144 (epsilon -> .)
    ID              shift and go to state 57
    IF              shift and go to state 58
    SWITCH          shift and go to state 51
    WHILE           shift and go to state 46
    FOR             shift and go to state 55
    PRINT           shift and go to state 47
    INPUT           shift and go to state 56

    for                            shift and go to state 48
    estatuto                       shift and go to state 70
    switch                         shift and go to state 60
    llamada                        shift and go to state 50
    condicion                      shift and go to state 52
    epsilon                        shift and go to state 71
    print                          shift and go to state 53
    input                          shift and go to state 54
    main2                          shift and go to state 72
    asignacion                     shift and go to state 59
    while                          shift and go to state 61

state 50

    (60) estatuto -> llamada .

    ID              reduce using rule 60 (estatuto -> llamada .)
    IF              reduce using rule 60 (estatuto -> llamada .)
    SWITCH          reduce using rule 60 (estatuto -> llamada .)
    WHILE           reduce using rule 60 (estatuto -> llamada .)
    FOR             reduce using rule 60 (estatuto -> llamada .)
    PRINT           reduce using rule 60 (estatuto -> llamada .)
    INPUT           reduce using rule 60 (estatuto -> llamada .)
    RCURL           reduce using rule 60 (estatuto -> llamada .)
    RETURN          reduce using rule 60 (estatuto -> llamada .)
    CASE            reduce using rule 60 (estatuto -> llamada .)
    DEFAULT         reduce using rule 60 (estatuto -> llamada .)


state 51

    (136) switch -> SWITCH . ID switch1 LCURL switch2 switch3 RCURL

    ID              shift and go to state 73


state 52

    (61) estatuto -> condicion .

    ID              reduce using rule 61 (estatuto -> condicion .)
    IF              reduce using rule 61 (estatuto -> condicion .)
    SWITCH          reduce using rule 61 (estatuto -> condicion .)
    WHILE           reduce using rule 61 (estatuto -> condicion .)
    FOR             reduce using rule 61 (estatuto -> condicion .)
    PRINT           reduce using rule 61 (estatuto -> condicion .)
    INPUT           reduce using rule 61 (estatuto -> condicion .)
    RCURL           reduce using rule 61 (estatuto -> condicion .)
    RETURN          reduce using rule 61 (estatuto -> condicion .)
    CASE            reduce using rule 61 (estatuto -> condicion .)
    DEFAULT         reduce using rule 61 (estatuto -> condicion .)


state 53

    (82) llamada -> print .

    ID              reduce using rule 82 (llamada -> print .)
    IF              reduce using rule 82 (llamada -> print .)
    SWITCH          reduce using rule 82 (llamada -> print .)
    WHILE           reduce using rule 82 (llamada -> print .)
    FOR             reduce using rule 82 (llamada -> print .)
    PRINT           reduce using rule 82 (llamada -> print .)
    INPUT           reduce using rule 82 (llamada -> print .)
    RCURL           reduce using rule 82 (llamada -> print .)
    RETURN          reduce using rule 82 (llamada -> print .)
    CASE            reduce using rule 82 (llamada -> print .)
    DEFAULT         reduce using rule 82 (llamada -> print .)


state 54

    (83) llamada -> input .

    ID              reduce using rule 83 (llamada -> input .)
    IF              reduce using rule 83 (llamada -> input .)
    SWITCH          reduce using rule 83 (llamada -> input .)
    WHILE           reduce using rule 83 (llamada -> input .)
    FOR             reduce using rule 83 (llamada -> input .)
    PRINT           reduce using rule 83 (llamada -> input .)
    INPUT           reduce using rule 83 (llamada -> input .)
    RCURL           reduce using rule 83 (llamada -> input .)
    RETURN          reduce using rule 83 (llamada -> input .)
    CASE            reduce using rule 83 (llamada -> input .)
    DEFAULT         reduce using rule 83 (llamada -> input .)


state 55

    (118) for -> FOR . CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque

    CTE_INT         shift and go to state 74


state 56

    (115) input -> INPUT . LPAREN input1 RPAREN

    LPAREN          shift and go to state 75


state 57

    (65) asignacion -> ID . EQUALS asignacion1
    (81) llamada -> ID . LPAREN llamada1 RPAREN

    EQUALS          shift and go to state 76
    LPAREN          shift and go to state 77


state 58

    (108) condicion -> IF . LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3

    LPAREN          shift and go to state 78


state 59

    (59) estatuto -> asignacion .

    ID              reduce using rule 59 (estatuto -> asignacion .)
    IF              reduce using rule 59 (estatuto -> asignacion .)
    SWITCH          reduce using rule 59 (estatuto -> asignacion .)
    WHILE           reduce using rule 59 (estatuto -> asignacion .)
    FOR             reduce using rule 59 (estatuto -> asignacion .)
    PRINT           reduce using rule 59 (estatuto -> asignacion .)
    INPUT           reduce using rule 59 (estatuto -> asignacion .)
    RCURL           reduce using rule 59 (estatuto -> asignacion .)
    RETURN          reduce using rule 59 (estatuto -> asignacion .)
    CASE            reduce using rule 59 (estatuto -> asignacion .)
    DEFAULT         reduce using rule 59 (estatuto -> asignacion .)


state 60

    (62) estatuto -> switch .

    ID              reduce using rule 62 (estatuto -> switch .)
    IF              reduce using rule 62 (estatuto -> switch .)
    SWITCH          reduce using rule 62 (estatuto -> switch .)
    WHILE           reduce using rule 62 (estatuto -> switch .)
    FOR             reduce using rule 62 (estatuto -> switch .)
    PRINT           reduce using rule 62 (estatuto -> switch .)
    INPUT           reduce using rule 62 (estatuto -> switch .)
    RCURL           reduce using rule 62 (estatuto -> switch .)
    RETURN          reduce using rule 62 (estatuto -> switch .)
    CASE            reduce using rule 62 (estatuto -> switch .)
    DEFAULT         reduce using rule 62 (estatuto -> switch .)


state 61

    (63) estatuto -> while .

    ID              reduce using rule 63 (estatuto -> while .)
    IF              reduce using rule 63 (estatuto -> while .)
    SWITCH          reduce using rule 63 (estatuto -> while .)
    WHILE           reduce using rule 63 (estatuto -> while .)
    FOR             reduce using rule 63 (estatuto -> while .)
    PRINT           reduce using rule 63 (estatuto -> while .)
    INPUT           reduce using rule 63 (estatuto -> while .)
    RCURL           reduce using rule 63 (estatuto -> while .)
    RETURN          reduce using rule 63 (estatuto -> while .)
    CASE            reduce using rule 63 (estatuto -> while .)
    DEFAULT         reduce using rule 63 (estatuto -> while .)


state 62

    (48) main1 -> var_declaracion main1 .

    ID              reduce using rule 48 (main1 -> var_declaracion main1 .)
    IF              reduce using rule 48 (main1 -> var_declaracion main1 .)
    SWITCH          reduce using rule 48 (main1 -> var_declaracion main1 .)
    WHILE           reduce using rule 48 (main1 -> var_declaracion main1 .)
    FOR             reduce using rule 48 (main1 -> var_declaracion main1 .)
    PRINT           reduce using rule 48 (main1 -> var_declaracion main1 .)
    INPUT           reduce using rule 48 (main1 -> var_declaracion main1 .)


state 63

    (19) parametros1 -> epsilon .

    ID              reduce using rule 19 (parametros1 -> epsilon .)


state 64

    (16) parametros -> tipo parametros1 . ID parametros2

    ID              shift and go to state 79


state 65

    (18) parametros1 -> AMPERSON .

    ID              reduce using rule 18 (parametros1 -> AMPERSON .)


state 66

    (132) funcion5 -> ID declareFunc LPAREN funcion3 RPAREN . LCURL funcion1 estatuto funcion2 funcion6

    LCURL           shift and go to state 80


state 67

    (17) parametros -> VECTOR tipo . parametros1 ID parametros2
    (18) parametros1 -> . AMPERSON
    (19) parametros1 -> . epsilon
    (144) epsilon -> .

    AMPERSON        shift and go to state 65
    ID              reduce using rule 144 (epsilon -> .)

    parametros1                    shift and go to state 81
    epsilon                        shift and go to state 63

state 68

    (52) while -> WHILE LPAREN . expresion RPAREN bloque
    (70) expresion -> . expresion1
    (71) expresion1 -> . epsilon
    (72) expresion1 -> . expresion2 exp
    (144) epsilon -> .
    (73) expresion2 -> . LESS
    (74) expresion2 -> . GREATER
    (75) expresion2 -> . DOUBLE_EQUAL
    (76) expresion2 -> . DIFF

    RPAREN          reduce using rule 144 (epsilon -> .)
    LESS            shift and go to state 85
    GREATER         shift and go to state 89
    DOUBLE_EQUAL    shift and go to state 87
    DIFF            shift and go to state 88

    expresion                      shift and go to state 82
    expresion1                     shift and go to state 83
    expresion2                     shift and go to state 84
    epsilon                        shift and go to state 86

state 69

    (103) print -> PRINT LPAREN . print1 RPAREN
    (104) print1 -> . CTE_STRING print2
    (105) print1 -> . ID print2

    CTE_STRING      shift and go to state 91
    ID              shift and go to state 92

    print1                         shift and go to state 90

state 70

    (50) main2 -> estatuto . main2
    (50) main2 -> . estatuto main2
    (51) main2 -> . epsilon
    (59) estatuto -> . asignacion
    (60) estatuto -> . llamada
    (61) estatuto -> . condicion
    (62) estatuto -> . switch
    (63) estatuto -> . while
    (64) estatuto -> . for
    (144) epsilon -> .
    (65) asignacion -> . ID EQUALS asignacion1
    (81) llamada -> . ID LPAREN llamada1 RPAREN
    (82) llamada -> . print
    (83) llamada -> . input
    (108) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (136) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (52) while -> . WHILE LPAREN expresion RPAREN bloque
    (118) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (103) print -> . PRINT LPAREN print1 RPAREN
    (115) input -> . INPUT LPAREN input1 RPAREN

    RCURL           reduce using rule 144 (epsilon -> .)
    ID              shift and go to state 57
    IF              shift and go to state 58
    SWITCH          shift and go to state 51
    WHILE           shift and go to state 46
    FOR             shift and go to state 55
    PRINT           shift and go to state 47
    INPUT           shift and go to state 56

    for                            shift and go to state 48
    estatuto                       shift and go to state 70
    switch                         shift and go to state 60
    llamada                        shift and go to state 50
    condicion                      shift and go to state 52
    print                          shift and go to state 53
    input                          shift and go to state 54
    epsilon                        shift and go to state 71
    main2                          shift and go to state 93
    asignacion                     shift and go to state 59
    while                          shift and go to state 61

state 71

    (51) main2 -> epsilon .

    RCURL           reduce using rule 51 (main2 -> epsilon .)


state 72

    (46) main -> MAIN declareMain LCURL main1 estatuto main2 . RCURL

    RCURL           shift and go to state 94


state 73

    (136) switch -> SWITCH ID . switch1 LCURL switch2 switch3 RCURL
    (137) switch1 -> . epsilon
    (138) switch1 -> . LBRACKET exp RBRACKET
    (144) epsilon -> .

    LBRACKET        shift and go to state 96
    LCURL           reduce using rule 144 (epsilon -> .)

    switch1                        shift and go to state 95
    epsilon                        shift and go to state 97

state 74

    (118) for -> FOR CTE_INT . TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque

    TO              shift and go to state 98


state 75

    (115) input -> INPUT LPAREN . input1 RPAREN
    (116) input1 -> . CTE_STRING
    (117) input1 -> . epsilon
    (144) epsilon -> .

    CTE_STRING      shift and go to state 99
    RPAREN          reduce using rule 144 (epsilon -> .)

    epsilon                        shift and go to state 101
    input1                         shift and go to state 100

state 76

    (65) asignacion -> ID EQUALS . asignacion1
    (66) asignacion1 -> . exp
    (67) asignacion1 -> . llamada
    (68) asignacion1 -> . asignacion_vector
    (30) exp -> . termino checkEXPPOper exp1
    (81) llamada -> . ID LPAREN llamada1 RPAREN
    (82) llamada -> . print
    (83) llamada -> . input
    (69) asignacion_vector -> . LBRACKET inicializacion_vector1 RBRACKET
    (35) termino -> . factor checkTERMPOper termino1
    (103) print -> . PRINT LPAREN print1 RPAREN
    (115) input -> . INPUT LPAREN input1 RPAREN
    (53) factor -> . LPAREN factorAddFakeCover exp RPAREN
    (54) factor -> . factor1
    (56) factor1 -> . PLUS varcte
    (57) factor1 -> . MINUS varcte
    (58) factor1 -> . varcte
    (88) varcte -> . ID varcte1
    (89) varcte -> . CTE_INT tipoINT
    (90) varcte -> . CTE_FLOAT tipoFLOAT
    (91) varcte -> . CTE_STRING tipoSTRING
    (92) varcte -> . cte_bool
    (101) cte_bool -> . TRUE
    (102) cte_bool -> . FALSE

    ID              shift and go to state 115
    LBRACKET        shift and go to state 104
    PRINT           shift and go to state 47
    INPUT           shift and go to state 56
    LPAREN          shift and go to state 113
    PLUS            shift and go to state 110
    MINUS           shift and go to state 107
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 118
    CTE_STRING      shift and go to state 102
    TRUE            shift and go to state 106
    FALSE           shift and go to state 116

    cte_bool                       shift and go to state 103
    termino                        shift and go to state 105
    varcte                         shift and go to state 108
    llamada                        shift and go to state 109
    factor                         shift and go to state 111
    print                          shift and go to state 53
    input                          shift and go to state 54
    asignacion_vector              shift and go to state 112
    factor1                        shift and go to state 117
    exp                            shift and go to state 119
    asignacion1                    shift and go to state 120

state 77

    (81) llamada -> ID LPAREN . llamada1 RPAREN
    (84) llamada1 -> . epsilon
    (85) llamada1 -> . exp llamada2
    (144) epsilon -> .
    (30) exp -> . termino checkEXPPOper exp1
    (35) termino -> . factor checkTERMPOper termino1
    (53) factor -> . LPAREN factorAddFakeCover exp RPAREN
    (54) factor -> . factor1
    (56) factor1 -> . PLUS varcte
    (57) factor1 -> . MINUS varcte
    (58) factor1 -> . varcte
    (88) varcte -> . ID varcte1
    (89) varcte -> . CTE_INT tipoINT
    (90) varcte -> . CTE_FLOAT tipoFLOAT
    (91) varcte -> . CTE_STRING tipoSTRING
    (92) varcte -> . cte_bool
    (101) cte_bool -> . TRUE
    (102) cte_bool -> . FALSE

    RPAREN          reduce using rule 144 (epsilon -> .)
    LPAREN          shift and go to state 113
    PLUS            shift and go to state 110
    MINUS           shift and go to state 107
    ID              shift and go to state 123
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 118
    CTE_STRING      shift and go to state 102
    TRUE            shift and go to state 106
    FALSE           shift and go to state 116

    factor1                        shift and go to state 117
    epsilon                        shift and go to state 122
    cte_bool                       shift and go to state 103
    termino                        shift and go to state 105
    exp                            shift and go to state 124
    factor                         shift and go to state 111
    llamada1                       shift and go to state 121
    varcte                         shift and go to state 108

state 78

    (108) condicion -> IF LPAREN . expresion_logica RPAREN condicion1 condicion2 condicion3
    (77) expresion_logica -> . exp expresion_logica1 expresion
    (30) exp -> . termino checkEXPPOper exp1
    (35) termino -> . factor checkTERMPOper termino1
    (53) factor -> . LPAREN factorAddFakeCover exp RPAREN
    (54) factor -> . factor1
    (56) factor1 -> . PLUS varcte
    (57) factor1 -> . MINUS varcte
    (58) factor1 -> . varcte
    (88) varcte -> . ID varcte1
    (89) varcte -> . CTE_INT tipoINT
    (90) varcte -> . CTE_FLOAT tipoFLOAT
    (91) varcte -> . CTE_STRING tipoSTRING
    (92) varcte -> . cte_bool
    (101) cte_bool -> . TRUE
    (102) cte_bool -> . FALSE

    LPAREN          shift and go to state 113
    PLUS            shift and go to state 110
    MINUS           shift and go to state 107
    ID              shift and go to state 123
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 118
    CTE_STRING      shift and go to state 102
    TRUE            shift and go to state 106
    FALSE           shift and go to state 116

    varcte                         shift and go to state 108
    expresion_logica               shift and go to state 125
    factor                         shift and go to state 111
    factor1                        shift and go to state 117
    exp                            shift and go to state 126
    cte_bool                       shift and go to state 103
    termino                        shift and go to state 105

state 79

    (16) parametros -> tipo parametros1 ID . parametros2
    (20) parametros2 -> . COMMA parametros
    (21) parametros2 -> . epsilon
    (144) epsilon -> .

    COMMA           shift and go to state 128
    RPAREN          reduce using rule 144 (epsilon -> .)

    parametros2                    shift and go to state 127
    epsilon                        shift and go to state 129

state 80

    (132) funcion5 -> ID declareFunc LPAREN funcion3 RPAREN LCURL . funcion1 estatuto funcion2 funcion6
    (124) funcion1 -> . epsilon
    (125) funcion1 -> . var_declaracion funcion1
    (144) epsilon -> .
    (6) var_declaracion -> . tipo var_declaracion1
    (7) var_declaracion -> . VECTOR tipo var_declaracion2
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    ID              reduce using rule 144 (epsilon -> .)
    IF              reduce using rule 144 (epsilon -> .)
    SWITCH          reduce using rule 144 (epsilon -> .)
    WHILE           reduce using rule 144 (epsilon -> .)
    FOR             reduce using rule 144 (epsilon -> .)
    PRINT           reduce using rule 144 (epsilon -> .)
    INPUT           reduce using rule 144 (epsilon -> .)
    VECTOR          shift and go to state 8
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 5
    epsilon                        shift and go to state 130
    var_declaracion                shift and go to state 131
    funcion1                       shift and go to state 132

state 81

    (17) parametros -> VECTOR tipo parametros1 . ID parametros2

    ID              shift and go to state 133


state 82

    (52) while -> WHILE LPAREN expresion . RPAREN bloque

    RPAREN          shift and go to state 134


state 83

    (70) expresion -> expresion1 .

    RPAREN          reduce using rule 70 (expresion -> expresion1 .)


state 84

    (72) expresion1 -> expresion2 . exp
    (30) exp -> . termino checkEXPPOper exp1
    (35) termino -> . factor checkTERMPOper termino1
    (53) factor -> . LPAREN factorAddFakeCover exp RPAREN
    (54) factor -> . factor1
    (56) factor1 -> . PLUS varcte
    (57) factor1 -> . MINUS varcte
    (58) factor1 -> . varcte
    (88) varcte -> . ID varcte1
    (89) varcte -> . CTE_INT tipoINT
    (90) varcte -> . CTE_FLOAT tipoFLOAT
    (91) varcte -> . CTE_STRING tipoSTRING
    (92) varcte -> . cte_bool
    (101) cte_bool -> . TRUE
    (102) cte_bool -> . FALSE

    LPAREN          shift and go to state 113
    PLUS            shift and go to state 110
    MINUS           shift and go to state 107
    ID              shift and go to state 123
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 118
    CTE_STRING      shift and go to state 102
    TRUE            shift and go to state 106
    FALSE           shift and go to state 116

    factor1                        shift and go to state 117
    cte_bool                       shift and go to state 103
    termino                        shift and go to state 105
    exp                            shift and go to state 135
    factor                         shift and go to state 111
    varcte                         shift and go to state 108

state 85

    (73) expresion2 -> LESS .

    LPAREN          reduce using rule 73 (expresion2 -> LESS .)
    PLUS            reduce using rule 73 (expresion2 -> LESS .)
    MINUS           reduce using rule 73 (expresion2 -> LESS .)
    ID              reduce using rule 73 (expresion2 -> LESS .)
    CTE_INT         reduce using rule 73 (expresion2 -> LESS .)
    CTE_FLOAT       reduce using rule 73 (expresion2 -> LESS .)
    CTE_STRING      reduce using rule 73 (expresion2 -> LESS .)
    TRUE            reduce using rule 73 (expresion2 -> LESS .)
    FALSE           reduce using rule 73 (expresion2 -> LESS .)


state 86

    (71) expresion1 -> epsilon .

    RPAREN          reduce using rule 71 (expresion1 -> epsilon .)


state 87

    (75) expresion2 -> DOUBLE_EQUAL .

    LPAREN          reduce using rule 75 (expresion2 -> DOUBLE_EQUAL .)
    PLUS            reduce using rule 75 (expresion2 -> DOUBLE_EQUAL .)
    MINUS           reduce using rule 75 (expresion2 -> DOUBLE_EQUAL .)
    ID              reduce using rule 75 (expresion2 -> DOUBLE_EQUAL .)
    CTE_INT         reduce using rule 75 (expresion2 -> DOUBLE_EQUAL .)
    CTE_FLOAT       reduce using rule 75 (expresion2 -> DOUBLE_EQUAL .)
    CTE_STRING      reduce using rule 75 (expresion2 -> DOUBLE_EQUAL .)
    TRUE            reduce using rule 75 (expresion2 -> DOUBLE_EQUAL .)
    FALSE           reduce using rule 75 (expresion2 -> DOUBLE_EQUAL .)


state 88

    (76) expresion2 -> DIFF .

    LPAREN          reduce using rule 76 (expresion2 -> DIFF .)
    PLUS            reduce using rule 76 (expresion2 -> DIFF .)
    MINUS           reduce using rule 76 (expresion2 -> DIFF .)
    ID              reduce using rule 76 (expresion2 -> DIFF .)
    CTE_INT         reduce using rule 76 (expresion2 -> DIFF .)
    CTE_FLOAT       reduce using rule 76 (expresion2 -> DIFF .)
    CTE_STRING      reduce using rule 76 (expresion2 -> DIFF .)
    TRUE            reduce using rule 76 (expresion2 -> DIFF .)
    FALSE           reduce using rule 76 (expresion2 -> DIFF .)


state 89

    (74) expresion2 -> GREATER .

    LPAREN          reduce using rule 74 (expresion2 -> GREATER .)
    PLUS            reduce using rule 74 (expresion2 -> GREATER .)
    MINUS           reduce using rule 74 (expresion2 -> GREATER .)
    ID              reduce using rule 74 (expresion2 -> GREATER .)
    CTE_INT         reduce using rule 74 (expresion2 -> GREATER .)
    CTE_FLOAT       reduce using rule 74 (expresion2 -> GREATER .)
    CTE_STRING      reduce using rule 74 (expresion2 -> GREATER .)
    TRUE            reduce using rule 74 (expresion2 -> GREATER .)
    FALSE           reduce using rule 74 (expresion2 -> GREATER .)


state 90

    (103) print -> PRINT LPAREN print1 . RPAREN

    RPAREN          shift and go to state 136


state 91

    (104) print1 -> CTE_STRING . print2
    (106) print2 -> . epsilon
    (107) print2 -> . PLUS print1
    (144) epsilon -> .

    PLUS            shift and go to state 139
    RPAREN          reduce using rule 144 (epsilon -> .)

    epsilon                        shift and go to state 137
    print2                         shift and go to state 138

state 92

    (105) print1 -> ID . print2
    (106) print2 -> . epsilon
    (107) print2 -> . PLUS print1
    (144) epsilon -> .

    PLUS            shift and go to state 139
    RPAREN          reduce using rule 144 (epsilon -> .)

    epsilon                        shift and go to state 137
    print2                         shift and go to state 140

state 93

    (50) main2 -> estatuto main2 .

    RCURL           reduce using rule 50 (main2 -> estatuto main2 .)


state 94

    (46) main -> MAIN declareMain LCURL main1 estatuto main2 RCURL .

    END             reduce using rule 46 (main -> MAIN declareMain LCURL main1 estatuto main2 RCURL .)


state 95

    (136) switch -> SWITCH ID switch1 . LCURL switch2 switch3 RCURL

    LCURL           shift and go to state 141


state 96

    (138) switch1 -> LBRACKET . exp RBRACKET
    (30) exp -> . termino checkEXPPOper exp1
    (35) termino -> . factor checkTERMPOper termino1
    (53) factor -> . LPAREN factorAddFakeCover exp RPAREN
    (54) factor -> . factor1
    (56) factor1 -> . PLUS varcte
    (57) factor1 -> . MINUS varcte
    (58) factor1 -> . varcte
    (88) varcte -> . ID varcte1
    (89) varcte -> . CTE_INT tipoINT
    (90) varcte -> . CTE_FLOAT tipoFLOAT
    (91) varcte -> . CTE_STRING tipoSTRING
    (92) varcte -> . cte_bool
    (101) cte_bool -> . TRUE
    (102) cte_bool -> . FALSE

    LPAREN          shift and go to state 113
    PLUS            shift and go to state 110
    MINUS           shift and go to state 107
    ID              shift and go to state 123
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 118
    CTE_STRING      shift and go to state 102
    TRUE            shift and go to state 106
    FALSE           shift and go to state 116

    factor1                        shift and go to state 117
    cte_bool                       shift and go to state 103
    termino                        shift and go to state 105
    exp                            shift and go to state 142
    factor                         shift and go to state 111
    varcte                         shift and go to state 108

state 97

    (137) switch1 -> epsilon .

    LCURL           reduce using rule 137 (switch1 -> epsilon .)


state 98

    (118) for -> FOR CTE_INT TO . CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque

    CTE_INT         shift and go to state 143


state 99

    (116) input1 -> CTE_STRING .

    RPAREN          reduce using rule 116 (input1 -> CTE_STRING .)


state 100

    (115) input -> INPUT LPAREN input1 . RPAREN

    RPAREN          shift and go to state 144


state 101

    (117) input1 -> epsilon .

    RPAREN          reduce using rule 117 (input1 -> epsilon .)


state 102

    (91) varcte -> CTE_STRING . tipoSTRING
    (95) tipoSTRING -> .

    TIMES           reduce using rule 95 (tipoSTRING -> .)
    DIVIDE          reduce using rule 95 (tipoSTRING -> .)
    PLUS            reduce using rule 95 (tipoSTRING -> .)
    MINUS           reduce using rule 95 (tipoSTRING -> .)
    ID              reduce using rule 95 (tipoSTRING -> .)
    IF              reduce using rule 95 (tipoSTRING -> .)
    SWITCH          reduce using rule 95 (tipoSTRING -> .)
    WHILE           reduce using rule 95 (tipoSTRING -> .)
    FOR             reduce using rule 95 (tipoSTRING -> .)
    PRINT           reduce using rule 95 (tipoSTRING -> .)
    INPUT           reduce using rule 95 (tipoSTRING -> .)
    RCURL           reduce using rule 95 (tipoSTRING -> .)
    RETURN          reduce using rule 95 (tipoSTRING -> .)
    CASE            reduce using rule 95 (tipoSTRING -> .)
    DEFAULT         reduce using rule 95 (tipoSTRING -> .)
    COMMA           reduce using rule 95 (tipoSTRING -> .)
    RPAREN          reduce using rule 95 (tipoSTRING -> .)
    AND             reduce using rule 95 (tipoSTRING -> .)
    OR              reduce using rule 95 (tipoSTRING -> .)
    LESS            reduce using rule 95 (tipoSTRING -> .)
    GREATER         reduce using rule 95 (tipoSTRING -> .)
    DOUBLE_EQUAL    reduce using rule 95 (tipoSTRING -> .)
    DIFF            reduce using rule 95 (tipoSTRING -> .)
    RBRACKET        reduce using rule 95 (tipoSTRING -> .)
    COLON           reduce using rule 95 (tipoSTRING -> .)

    tipoSTRING                     shift and go to state 145

state 103

    (92) varcte -> cte_bool .

    TIMES           reduce using rule 92 (varcte -> cte_bool .)
    DIVIDE          reduce using rule 92 (varcte -> cte_bool .)
    PLUS            reduce using rule 92 (varcte -> cte_bool .)
    MINUS           reduce using rule 92 (varcte -> cte_bool .)
    COMMA           reduce using rule 92 (varcte -> cte_bool .)
    RPAREN          reduce using rule 92 (varcte -> cte_bool .)
    ID              reduce using rule 92 (varcte -> cte_bool .)
    IF              reduce using rule 92 (varcte -> cte_bool .)
    SWITCH          reduce using rule 92 (varcte -> cte_bool .)
    WHILE           reduce using rule 92 (varcte -> cte_bool .)
    FOR             reduce using rule 92 (varcte -> cte_bool .)
    PRINT           reduce using rule 92 (varcte -> cte_bool .)
    INPUT           reduce using rule 92 (varcte -> cte_bool .)
    RCURL           reduce using rule 92 (varcte -> cte_bool .)
    RETURN          reduce using rule 92 (varcte -> cte_bool .)
    CASE            reduce using rule 92 (varcte -> cte_bool .)
    DEFAULT         reduce using rule 92 (varcte -> cte_bool .)
    AND             reduce using rule 92 (varcte -> cte_bool .)
    OR              reduce using rule 92 (varcte -> cte_bool .)
    LESS            reduce using rule 92 (varcte -> cte_bool .)
    GREATER         reduce using rule 92 (varcte -> cte_bool .)
    DOUBLE_EQUAL    reduce using rule 92 (varcte -> cte_bool .)
    DIFF            reduce using rule 92 (varcte -> cte_bool .)
    RBRACKET        reduce using rule 92 (varcte -> cte_bool .)
    COLON           reduce using rule 92 (varcte -> cte_bool .)


state 104

    (69) asignacion_vector -> LBRACKET . inicializacion_vector1 RBRACKET
    (42) inicializacion_vector1 -> . varcte inicializacion_vector2
    (43) inicializacion_vector1 -> . epsilon
    (88) varcte -> . ID varcte1
    (89) varcte -> . CTE_INT tipoINT
    (90) varcte -> . CTE_FLOAT tipoFLOAT
    (91) varcte -> . CTE_STRING tipoSTRING
    (92) varcte -> . cte_bool
    (144) epsilon -> .
    (101) cte_bool -> . TRUE
    (102) cte_bool -> . FALSE

    ID              shift and go to state 123
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 118
    CTE_STRING      shift and go to state 102
    RBRACKET        reduce using rule 144 (epsilon -> .)
    TRUE            shift and go to state 106
    FALSE           shift and go to state 116

    varcte                         shift and go to state 146
    epsilon                        shift and go to state 147
    cte_bool                       shift and go to state 103
    inicializacion_vector1         shift and go to state 148

state 105

    (30) exp -> termino . checkEXPPOper exp1
    (31) checkEXPPOper -> .

    PLUS            reduce using rule 31 (checkEXPPOper -> .)
    MINUS           reduce using rule 31 (checkEXPPOper -> .)
    ID              reduce using rule 31 (checkEXPPOper -> .)
    IF              reduce using rule 31 (checkEXPPOper -> .)
    SWITCH          reduce using rule 31 (checkEXPPOper -> .)
    WHILE           reduce using rule 31 (checkEXPPOper -> .)
    FOR             reduce using rule 31 (checkEXPPOper -> .)
    PRINT           reduce using rule 31 (checkEXPPOper -> .)
    INPUT           reduce using rule 31 (checkEXPPOper -> .)
    RCURL           reduce using rule 31 (checkEXPPOper -> .)
    RETURN          reduce using rule 31 (checkEXPPOper -> .)
    CASE            reduce using rule 31 (checkEXPPOper -> .)
    DEFAULT         reduce using rule 31 (checkEXPPOper -> .)
    COMMA           reduce using rule 31 (checkEXPPOper -> .)
    RPAREN          reduce using rule 31 (checkEXPPOper -> .)
    AND             reduce using rule 31 (checkEXPPOper -> .)
    OR              reduce using rule 31 (checkEXPPOper -> .)
    LESS            reduce using rule 31 (checkEXPPOper -> .)
    GREATER         reduce using rule 31 (checkEXPPOper -> .)
    DOUBLE_EQUAL    reduce using rule 31 (checkEXPPOper -> .)
    DIFF            reduce using rule 31 (checkEXPPOper -> .)
    RBRACKET        reduce using rule 31 (checkEXPPOper -> .)

    checkEXPPOper                  shift and go to state 149

state 106

    (101) cte_bool -> TRUE .

    TIMES           reduce using rule 101 (cte_bool -> TRUE .)
    DIVIDE          reduce using rule 101 (cte_bool -> TRUE .)
    PLUS            reduce using rule 101 (cte_bool -> TRUE .)
    MINUS           reduce using rule 101 (cte_bool -> TRUE .)
    COMMA           reduce using rule 101 (cte_bool -> TRUE .)
    RPAREN          reduce using rule 101 (cte_bool -> TRUE .)
    ID              reduce using rule 101 (cte_bool -> TRUE .)
    IF              reduce using rule 101 (cte_bool -> TRUE .)
    SWITCH          reduce using rule 101 (cte_bool -> TRUE .)
    WHILE           reduce using rule 101 (cte_bool -> TRUE .)
    FOR             reduce using rule 101 (cte_bool -> TRUE .)
    PRINT           reduce using rule 101 (cte_bool -> TRUE .)
    INPUT           reduce using rule 101 (cte_bool -> TRUE .)
    RCURL           reduce using rule 101 (cte_bool -> TRUE .)
    RETURN          reduce using rule 101 (cte_bool -> TRUE .)
    CASE            reduce using rule 101 (cte_bool -> TRUE .)
    DEFAULT         reduce using rule 101 (cte_bool -> TRUE .)
    AND             reduce using rule 101 (cte_bool -> TRUE .)
    OR              reduce using rule 101 (cte_bool -> TRUE .)
    LESS            reduce using rule 101 (cte_bool -> TRUE .)
    GREATER         reduce using rule 101 (cte_bool -> TRUE .)
    DOUBLE_EQUAL    reduce using rule 101 (cte_bool -> TRUE .)
    DIFF            reduce using rule 101 (cte_bool -> TRUE .)
    RBRACKET        reduce using rule 101 (cte_bool -> TRUE .)
    COLON           reduce using rule 101 (cte_bool -> TRUE .)


state 107

    (57) factor1 -> MINUS . varcte
    (88) varcte -> . ID varcte1
    (89) varcte -> . CTE_INT tipoINT
    (90) varcte -> . CTE_FLOAT tipoFLOAT
    (91) varcte -> . CTE_STRING tipoSTRING
    (92) varcte -> . cte_bool
    (101) cte_bool -> . TRUE
    (102) cte_bool -> . FALSE

    ID              shift and go to state 123
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 118
    CTE_STRING      shift and go to state 102
    TRUE            shift and go to state 106
    FALSE           shift and go to state 116

    varcte                         shift and go to state 150
    cte_bool                       shift and go to state 103

state 108

    (58) factor1 -> varcte .

    TIMES           reduce using rule 58 (factor1 -> varcte .)
    DIVIDE          reduce using rule 58 (factor1 -> varcte .)
    PLUS            reduce using rule 58 (factor1 -> varcte .)
    MINUS           reduce using rule 58 (factor1 -> varcte .)
    ID              reduce using rule 58 (factor1 -> varcte .)
    IF              reduce using rule 58 (factor1 -> varcte .)
    SWITCH          reduce using rule 58 (factor1 -> varcte .)
    WHILE           reduce using rule 58 (factor1 -> varcte .)
    FOR             reduce using rule 58 (factor1 -> varcte .)
    PRINT           reduce using rule 58 (factor1 -> varcte .)
    INPUT           reduce using rule 58 (factor1 -> varcte .)
    RCURL           reduce using rule 58 (factor1 -> varcte .)
    RETURN          reduce using rule 58 (factor1 -> varcte .)
    CASE            reduce using rule 58 (factor1 -> varcte .)
    DEFAULT         reduce using rule 58 (factor1 -> varcte .)
    COMMA           reduce using rule 58 (factor1 -> varcte .)
    RPAREN          reduce using rule 58 (factor1 -> varcte .)
    AND             reduce using rule 58 (factor1 -> varcte .)
    OR              reduce using rule 58 (factor1 -> varcte .)
    LESS            reduce using rule 58 (factor1 -> varcte .)
    GREATER         reduce using rule 58 (factor1 -> varcte .)
    DOUBLE_EQUAL    reduce using rule 58 (factor1 -> varcte .)
    DIFF            reduce using rule 58 (factor1 -> varcte .)
    RBRACKET        reduce using rule 58 (factor1 -> varcte .)


state 109

    (67) asignacion1 -> llamada .

    ID              reduce using rule 67 (asignacion1 -> llamada .)
    IF              reduce using rule 67 (asignacion1 -> llamada .)
    SWITCH          reduce using rule 67 (asignacion1 -> llamada .)
    WHILE           reduce using rule 67 (asignacion1 -> llamada .)
    FOR             reduce using rule 67 (asignacion1 -> llamada .)
    PRINT           reduce using rule 67 (asignacion1 -> llamada .)
    INPUT           reduce using rule 67 (asignacion1 -> llamada .)
    RCURL           reduce using rule 67 (asignacion1 -> llamada .)
    RETURN          reduce using rule 67 (asignacion1 -> llamada .)
    CASE            reduce using rule 67 (asignacion1 -> llamada .)
    DEFAULT         reduce using rule 67 (asignacion1 -> llamada .)


state 110

    (56) factor1 -> PLUS . varcte
    (88) varcte -> . ID varcte1
    (89) varcte -> . CTE_INT tipoINT
    (90) varcte -> . CTE_FLOAT tipoFLOAT
    (91) varcte -> . CTE_STRING tipoSTRING
    (92) varcte -> . cte_bool
    (101) cte_bool -> . TRUE
    (102) cte_bool -> . FALSE

    ID              shift and go to state 123
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 118
    CTE_STRING      shift and go to state 102
    TRUE            shift and go to state 106
    FALSE           shift and go to state 116

    varcte                         shift and go to state 151
    cte_bool                       shift and go to state 103

state 111

    (35) termino -> factor . checkTERMPOper termino1
    (36) checkTERMPOper -> .

    TIMES           reduce using rule 36 (checkTERMPOper -> .)
    DIVIDE          reduce using rule 36 (checkTERMPOper -> .)
    PLUS            reduce using rule 36 (checkTERMPOper -> .)
    MINUS           reduce using rule 36 (checkTERMPOper -> .)
    ID              reduce using rule 36 (checkTERMPOper -> .)
    IF              reduce using rule 36 (checkTERMPOper -> .)
    SWITCH          reduce using rule 36 (checkTERMPOper -> .)
    WHILE           reduce using rule 36 (checkTERMPOper -> .)
    FOR             reduce using rule 36 (checkTERMPOper -> .)
    PRINT           reduce using rule 36 (checkTERMPOper -> .)
    INPUT           reduce using rule 36 (checkTERMPOper -> .)
    RCURL           reduce using rule 36 (checkTERMPOper -> .)
    RETURN          reduce using rule 36 (checkTERMPOper -> .)
    CASE            reduce using rule 36 (checkTERMPOper -> .)
    DEFAULT         reduce using rule 36 (checkTERMPOper -> .)
    COMMA           reduce using rule 36 (checkTERMPOper -> .)
    RPAREN          reduce using rule 36 (checkTERMPOper -> .)
    AND             reduce using rule 36 (checkTERMPOper -> .)
    OR              reduce using rule 36 (checkTERMPOper -> .)
    LESS            reduce using rule 36 (checkTERMPOper -> .)
    GREATER         reduce using rule 36 (checkTERMPOper -> .)
    DOUBLE_EQUAL    reduce using rule 36 (checkTERMPOper -> .)
    DIFF            reduce using rule 36 (checkTERMPOper -> .)
    RBRACKET        reduce using rule 36 (checkTERMPOper -> .)

    checkTERMPOper                 shift and go to state 152

state 112

    (68) asignacion1 -> asignacion_vector .

    ID              reduce using rule 68 (asignacion1 -> asignacion_vector .)
    IF              reduce using rule 68 (asignacion1 -> asignacion_vector .)
    SWITCH          reduce using rule 68 (asignacion1 -> asignacion_vector .)
    WHILE           reduce using rule 68 (asignacion1 -> asignacion_vector .)
    FOR             reduce using rule 68 (asignacion1 -> asignacion_vector .)
    PRINT           reduce using rule 68 (asignacion1 -> asignacion_vector .)
    INPUT           reduce using rule 68 (asignacion1 -> asignacion_vector .)
    RCURL           reduce using rule 68 (asignacion1 -> asignacion_vector .)
    RETURN          reduce using rule 68 (asignacion1 -> asignacion_vector .)
    CASE            reduce using rule 68 (asignacion1 -> asignacion_vector .)
    DEFAULT         reduce using rule 68 (asignacion1 -> asignacion_vector .)


state 113

    (53) factor -> LPAREN . factorAddFakeCover exp RPAREN
    (55) factorAddFakeCover -> .

    LPAREN          reduce using rule 55 (factorAddFakeCover -> .)
    PLUS            reduce using rule 55 (factorAddFakeCover -> .)
    MINUS           reduce using rule 55 (factorAddFakeCover -> .)
    ID              reduce using rule 55 (factorAddFakeCover -> .)
    CTE_INT         reduce using rule 55 (factorAddFakeCover -> .)
    CTE_FLOAT       reduce using rule 55 (factorAddFakeCover -> .)
    CTE_STRING      reduce using rule 55 (factorAddFakeCover -> .)
    TRUE            reduce using rule 55 (factorAddFakeCover -> .)
    FALSE           reduce using rule 55 (factorAddFakeCover -> .)

    factorAddFakeCover             shift and go to state 153

state 114

    (89) varcte -> CTE_INT . tipoINT
    (93) tipoINT -> .

    TIMES           reduce using rule 93 (tipoINT -> .)
    DIVIDE          reduce using rule 93 (tipoINT -> .)
    PLUS            reduce using rule 93 (tipoINT -> .)
    MINUS           reduce using rule 93 (tipoINT -> .)
    ID              reduce using rule 93 (tipoINT -> .)
    IF              reduce using rule 93 (tipoINT -> .)
    SWITCH          reduce using rule 93 (tipoINT -> .)
    WHILE           reduce using rule 93 (tipoINT -> .)
    FOR             reduce using rule 93 (tipoINT -> .)
    PRINT           reduce using rule 93 (tipoINT -> .)
    INPUT           reduce using rule 93 (tipoINT -> .)
    RCURL           reduce using rule 93 (tipoINT -> .)
    RETURN          reduce using rule 93 (tipoINT -> .)
    CASE            reduce using rule 93 (tipoINT -> .)
    DEFAULT         reduce using rule 93 (tipoINT -> .)
    COMMA           reduce using rule 93 (tipoINT -> .)
    RPAREN          reduce using rule 93 (tipoINT -> .)
    AND             reduce using rule 93 (tipoINT -> .)
    OR              reduce using rule 93 (tipoINT -> .)
    LESS            reduce using rule 93 (tipoINT -> .)
    GREATER         reduce using rule 93 (tipoINT -> .)
    DOUBLE_EQUAL    reduce using rule 93 (tipoINT -> .)
    DIFF            reduce using rule 93 (tipoINT -> .)
    RBRACKET        reduce using rule 93 (tipoINT -> .)
    COLON           reduce using rule 93 (tipoINT -> .)

    tipoINT                        shift and go to state 154

state 115

    (81) llamada -> ID . LPAREN llamada1 RPAREN
    (88) varcte -> ID . varcte1
    (96) varcte1 -> . epsilon
    (97) varcte1 -> . LPAREN exp varcte2 RPAREN
    (98) varcte1 -> . LBRACKET exp RBRACKET
    (144) epsilon -> .

    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 156
    TIMES           reduce using rule 144 (epsilon -> .)
    DIVIDE          reduce using rule 144 (epsilon -> .)
    PLUS            reduce using rule 144 (epsilon -> .)
    MINUS           reduce using rule 144 (epsilon -> .)
    ID              reduce using rule 144 (epsilon -> .)
    IF              reduce using rule 144 (epsilon -> .)
    SWITCH          reduce using rule 144 (epsilon -> .)
    WHILE           reduce using rule 144 (epsilon -> .)
    FOR             reduce using rule 144 (epsilon -> .)
    PRINT           reduce using rule 144 (epsilon -> .)
    INPUT           reduce using rule 144 (epsilon -> .)
    RCURL           reduce using rule 144 (epsilon -> .)
    RETURN          reduce using rule 144 (epsilon -> .)
    CASE            reduce using rule 144 (epsilon -> .)
    DEFAULT         reduce using rule 144 (epsilon -> .)

    epsilon                        shift and go to state 155
    varcte1                        shift and go to state 158

state 116

    (102) cte_bool -> FALSE .

    TIMES           reduce using rule 102 (cte_bool -> FALSE .)
    DIVIDE          reduce using rule 102 (cte_bool -> FALSE .)
    PLUS            reduce using rule 102 (cte_bool -> FALSE .)
    MINUS           reduce using rule 102 (cte_bool -> FALSE .)
    COMMA           reduce using rule 102 (cte_bool -> FALSE .)
    RPAREN          reduce using rule 102 (cte_bool -> FALSE .)
    ID              reduce using rule 102 (cte_bool -> FALSE .)
    IF              reduce using rule 102 (cte_bool -> FALSE .)
    SWITCH          reduce using rule 102 (cte_bool -> FALSE .)
    WHILE           reduce using rule 102 (cte_bool -> FALSE .)
    FOR             reduce using rule 102 (cte_bool -> FALSE .)
    PRINT           reduce using rule 102 (cte_bool -> FALSE .)
    INPUT           reduce using rule 102 (cte_bool -> FALSE .)
    RCURL           reduce using rule 102 (cte_bool -> FALSE .)
    RETURN          reduce using rule 102 (cte_bool -> FALSE .)
    CASE            reduce using rule 102 (cte_bool -> FALSE .)
    DEFAULT         reduce using rule 102 (cte_bool -> FALSE .)
    AND             reduce using rule 102 (cte_bool -> FALSE .)
    OR              reduce using rule 102 (cte_bool -> FALSE .)
    LESS            reduce using rule 102 (cte_bool -> FALSE .)
    GREATER         reduce using rule 102 (cte_bool -> FALSE .)
    DOUBLE_EQUAL    reduce using rule 102 (cte_bool -> FALSE .)
    DIFF            reduce using rule 102 (cte_bool -> FALSE .)
    RBRACKET        reduce using rule 102 (cte_bool -> FALSE .)
    COLON           reduce using rule 102 (cte_bool -> FALSE .)


state 117

    (54) factor -> factor1 .

    TIMES           reduce using rule 54 (factor -> factor1 .)
    DIVIDE          reduce using rule 54 (factor -> factor1 .)
    PLUS            reduce using rule 54 (factor -> factor1 .)
    MINUS           reduce using rule 54 (factor -> factor1 .)
    COMMA           reduce using rule 54 (factor -> factor1 .)
    RPAREN          reduce using rule 54 (factor -> factor1 .)
    ID              reduce using rule 54 (factor -> factor1 .)
    IF              reduce using rule 54 (factor -> factor1 .)
    SWITCH          reduce using rule 54 (factor -> factor1 .)
    WHILE           reduce using rule 54 (factor -> factor1 .)
    FOR             reduce using rule 54 (factor -> factor1 .)
    PRINT           reduce using rule 54 (factor -> factor1 .)
    INPUT           reduce using rule 54 (factor -> factor1 .)
    RCURL           reduce using rule 54 (factor -> factor1 .)
    RETURN          reduce using rule 54 (factor -> factor1 .)
    CASE            reduce using rule 54 (factor -> factor1 .)
    DEFAULT         reduce using rule 54 (factor -> factor1 .)
    RBRACKET        reduce using rule 54 (factor -> factor1 .)
    AND             reduce using rule 54 (factor -> factor1 .)
    OR              reduce using rule 54 (factor -> factor1 .)
    LESS            reduce using rule 54 (factor -> factor1 .)
    GREATER         reduce using rule 54 (factor -> factor1 .)
    DOUBLE_EQUAL    reduce using rule 54 (factor -> factor1 .)
    DIFF            reduce using rule 54 (factor -> factor1 .)


state 118

    (90) varcte -> CTE_FLOAT . tipoFLOAT
    (94) tipoFLOAT -> .

    TIMES           reduce using rule 94 (tipoFLOAT -> .)
    DIVIDE          reduce using rule 94 (tipoFLOAT -> .)
    PLUS            reduce using rule 94 (tipoFLOAT -> .)
    MINUS           reduce using rule 94 (tipoFLOAT -> .)
    ID              reduce using rule 94 (tipoFLOAT -> .)
    IF              reduce using rule 94 (tipoFLOAT -> .)
    SWITCH          reduce using rule 94 (tipoFLOAT -> .)
    WHILE           reduce using rule 94 (tipoFLOAT -> .)
    FOR             reduce using rule 94 (tipoFLOAT -> .)
    PRINT           reduce using rule 94 (tipoFLOAT -> .)
    INPUT           reduce using rule 94 (tipoFLOAT -> .)
    RCURL           reduce using rule 94 (tipoFLOAT -> .)
    RETURN          reduce using rule 94 (tipoFLOAT -> .)
    CASE            reduce using rule 94 (tipoFLOAT -> .)
    DEFAULT         reduce using rule 94 (tipoFLOAT -> .)
    COMMA           reduce using rule 94 (tipoFLOAT -> .)
    RPAREN          reduce using rule 94 (tipoFLOAT -> .)
    AND             reduce using rule 94 (tipoFLOAT -> .)
    OR              reduce using rule 94 (tipoFLOAT -> .)
    LESS            reduce using rule 94 (tipoFLOAT -> .)
    GREATER         reduce using rule 94 (tipoFLOAT -> .)
    DOUBLE_EQUAL    reduce using rule 94 (tipoFLOAT -> .)
    DIFF            reduce using rule 94 (tipoFLOAT -> .)
    RBRACKET        reduce using rule 94 (tipoFLOAT -> .)
    COLON           reduce using rule 94 (tipoFLOAT -> .)

    tipoFLOAT                      shift and go to state 159

state 119

    (66) asignacion1 -> exp .

    ID              reduce using rule 66 (asignacion1 -> exp .)
    IF              reduce using rule 66 (asignacion1 -> exp .)
    SWITCH          reduce using rule 66 (asignacion1 -> exp .)
    WHILE           reduce using rule 66 (asignacion1 -> exp .)
    FOR             reduce using rule 66 (asignacion1 -> exp .)
    PRINT           reduce using rule 66 (asignacion1 -> exp .)
    INPUT           reduce using rule 66 (asignacion1 -> exp .)
    RCURL           reduce using rule 66 (asignacion1 -> exp .)
    RETURN          reduce using rule 66 (asignacion1 -> exp .)
    CASE            reduce using rule 66 (asignacion1 -> exp .)
    DEFAULT         reduce using rule 66 (asignacion1 -> exp .)


state 120

    (65) asignacion -> ID EQUALS asignacion1 .

    ID              reduce using rule 65 (asignacion -> ID EQUALS asignacion1 .)
    IF              reduce using rule 65 (asignacion -> ID EQUALS asignacion1 .)
    SWITCH          reduce using rule 65 (asignacion -> ID EQUALS asignacion1 .)
    WHILE           reduce using rule 65 (asignacion -> ID EQUALS asignacion1 .)
    FOR             reduce using rule 65 (asignacion -> ID EQUALS asignacion1 .)
    PRINT           reduce using rule 65 (asignacion -> ID EQUALS asignacion1 .)
    INPUT           reduce using rule 65 (asignacion -> ID EQUALS asignacion1 .)
    RCURL           reduce using rule 65 (asignacion -> ID EQUALS asignacion1 .)
    RETURN          reduce using rule 65 (asignacion -> ID EQUALS asignacion1 .)
    CASE            reduce using rule 65 (asignacion -> ID EQUALS asignacion1 .)
    DEFAULT         reduce using rule 65 (asignacion -> ID EQUALS asignacion1 .)


state 121

    (81) llamada -> ID LPAREN llamada1 . RPAREN

    RPAREN          shift and go to state 160


state 122

    (84) llamada1 -> epsilon .

    RPAREN          reduce using rule 84 (llamada1 -> epsilon .)


state 123

    (88) varcte -> ID . varcte1
    (96) varcte1 -> . epsilon
    (97) varcte1 -> . LPAREN exp varcte2 RPAREN
    (98) varcte1 -> . LBRACKET exp RBRACKET
    (144) epsilon -> .

    LPAREN          shift and go to state 161
    LBRACKET        shift and go to state 156
    TIMES           reduce using rule 144 (epsilon -> .)
    DIVIDE          reduce using rule 144 (epsilon -> .)
    PLUS            reduce using rule 144 (epsilon -> .)
    MINUS           reduce using rule 144 (epsilon -> .)
    COMMA           reduce using rule 144 (epsilon -> .)
    RPAREN          reduce using rule 144 (epsilon -> .)
    AND             reduce using rule 144 (epsilon -> .)
    OR              reduce using rule 144 (epsilon -> .)
    LESS            reduce using rule 144 (epsilon -> .)
    GREATER         reduce using rule 144 (epsilon -> .)
    DOUBLE_EQUAL    reduce using rule 144 (epsilon -> .)
    DIFF            reduce using rule 144 (epsilon -> .)
    RBRACKET        reduce using rule 144 (epsilon -> .)
    ID              reduce using rule 144 (epsilon -> .)
    IF              reduce using rule 144 (epsilon -> .)
    SWITCH          reduce using rule 144 (epsilon -> .)
    WHILE           reduce using rule 144 (epsilon -> .)
    FOR             reduce using rule 144 (epsilon -> .)
    PRINT           reduce using rule 144 (epsilon -> .)
    INPUT           reduce using rule 144 (epsilon -> .)
    RCURL           reduce using rule 144 (epsilon -> .)
    RETURN          reduce using rule 144 (epsilon -> .)
    CASE            reduce using rule 144 (epsilon -> .)
    DEFAULT         reduce using rule 144 (epsilon -> .)
    COLON           reduce using rule 144 (epsilon -> .)

    epsilon                        shift and go to state 155
    varcte1                        shift and go to state 158

state 124

    (85) llamada1 -> exp . llamada2
    (86) llamada2 -> . epsilon
    (87) llamada2 -> . COMMA exp llamada2
    (144) epsilon -> .

    COMMA           shift and go to state 164
    RPAREN          reduce using rule 144 (epsilon -> .)

    llamada2                       shift and go to state 162
    epsilon                        shift and go to state 163

state 125

    (108) condicion -> IF LPAREN expresion_logica . RPAREN condicion1 condicion2 condicion3

    RPAREN          shift and go to state 165


state 126

    (77) expresion_logica -> exp . expresion_logica1 expresion
    (78) expresion_logica1 -> . AND exp
    (79) expresion_logica1 -> . epsilon
    (80) expresion_logica1 -> . OR exp
    (144) epsilon -> .

    AND             shift and go to state 166
    OR              shift and go to state 169
    LESS            reduce using rule 144 (epsilon -> .)
    GREATER         reduce using rule 144 (epsilon -> .)
    DOUBLE_EQUAL    reduce using rule 144 (epsilon -> .)
    DIFF            reduce using rule 144 (epsilon -> .)
    RPAREN          reduce using rule 144 (epsilon -> .)

    expresion_logica1              shift and go to state 168
    epsilon                        shift and go to state 167

state 127

    (16) parametros -> tipo parametros1 ID parametros2 .

    RPAREN          reduce using rule 16 (parametros -> tipo parametros1 ID parametros2 .)


state 128

    (20) parametros2 -> COMMA . parametros
    (16) parametros -> . tipo parametros1 ID parametros2
    (17) parametros -> . VECTOR tipo parametros1 ID parametros2
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    VECTOR          shift and go to state 45
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    parametros                     shift and go to state 170
    tipo                           shift and go to state 41

state 129

    (21) parametros2 -> epsilon .

    RPAREN          reduce using rule 21 (parametros2 -> epsilon .)


state 130

    (124) funcion1 -> epsilon .

    ID              reduce using rule 124 (funcion1 -> epsilon .)
    IF              reduce using rule 124 (funcion1 -> epsilon .)
    SWITCH          reduce using rule 124 (funcion1 -> epsilon .)
    WHILE           reduce using rule 124 (funcion1 -> epsilon .)
    FOR             reduce using rule 124 (funcion1 -> epsilon .)
    PRINT           reduce using rule 124 (funcion1 -> epsilon .)
    INPUT           reduce using rule 124 (funcion1 -> epsilon .)


state 131

    (125) funcion1 -> var_declaracion . funcion1
    (124) funcion1 -> . epsilon
    (125) funcion1 -> . var_declaracion funcion1
    (144) epsilon -> .
    (6) var_declaracion -> . tipo var_declaracion1
    (7) var_declaracion -> . VECTOR tipo var_declaracion2
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    ID              reduce using rule 144 (epsilon -> .)
    IF              reduce using rule 144 (epsilon -> .)
    SWITCH          reduce using rule 144 (epsilon -> .)
    WHILE           reduce using rule 144 (epsilon -> .)
    FOR             reduce using rule 144 (epsilon -> .)
    PRINT           reduce using rule 144 (epsilon -> .)
    INPUT           reduce using rule 144 (epsilon -> .)
    VECTOR          shift and go to state 8
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 5
    epsilon                        shift and go to state 130
    var_declaracion                shift and go to state 131
    funcion1                       shift and go to state 171

state 132

    (132) funcion5 -> ID declareFunc LPAREN funcion3 RPAREN LCURL funcion1 . estatuto funcion2 funcion6
    (59) estatuto -> . asignacion
    (60) estatuto -> . llamada
    (61) estatuto -> . condicion
    (62) estatuto -> . switch
    (63) estatuto -> . while
    (64) estatuto -> . for
    (65) asignacion -> . ID EQUALS asignacion1
    (81) llamada -> . ID LPAREN llamada1 RPAREN
    (82) llamada -> . print
    (83) llamada -> . input
    (108) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (136) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (52) while -> . WHILE LPAREN expresion RPAREN bloque
    (118) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (103) print -> . PRINT LPAREN print1 RPAREN
    (115) input -> . INPUT LPAREN input1 RPAREN

    ID              shift and go to state 57
    IF              shift and go to state 58
    SWITCH          shift and go to state 51
    WHILE           shift and go to state 46
    FOR             shift and go to state 55
    PRINT           shift and go to state 47
    INPUT           shift and go to state 56

    for                            shift and go to state 48
    estatuto                       shift and go to state 172
    while                          shift and go to state 61
    llamada                        shift and go to state 50
    condicion                      shift and go to state 52
    print                          shift and go to state 53
    input                          shift and go to state 54
    asignacion                     shift and go to state 59
    switch                         shift and go to state 60

state 133

    (17) parametros -> VECTOR tipo parametros1 ID . parametros2
    (20) parametros2 -> . COMMA parametros
    (21) parametros2 -> . epsilon
    (144) epsilon -> .

    COMMA           shift and go to state 128
    RPAREN          reduce using rule 144 (epsilon -> .)

    parametros2                    shift and go to state 173
    epsilon                        shift and go to state 129

state 134

    (52) while -> WHILE LPAREN expresion RPAREN . bloque
    (27) bloque -> . LCURL estatuto bloque1 RCURL

    LCURL           shift and go to state 175

    bloque                         shift and go to state 174

state 135

    (72) expresion1 -> expresion2 exp .

    RPAREN          reduce using rule 72 (expresion1 -> expresion2 exp .)


state 136

    (103) print -> PRINT LPAREN print1 RPAREN .

    ID              reduce using rule 103 (print -> PRINT LPAREN print1 RPAREN .)
    IF              reduce using rule 103 (print -> PRINT LPAREN print1 RPAREN .)
    SWITCH          reduce using rule 103 (print -> PRINT LPAREN print1 RPAREN .)
    WHILE           reduce using rule 103 (print -> PRINT LPAREN print1 RPAREN .)
    FOR             reduce using rule 103 (print -> PRINT LPAREN print1 RPAREN .)
    PRINT           reduce using rule 103 (print -> PRINT LPAREN print1 RPAREN .)
    INPUT           reduce using rule 103 (print -> PRINT LPAREN print1 RPAREN .)
    RCURL           reduce using rule 103 (print -> PRINT LPAREN print1 RPAREN .)
    RETURN          reduce using rule 103 (print -> PRINT LPAREN print1 RPAREN .)
    CASE            reduce using rule 103 (print -> PRINT LPAREN print1 RPAREN .)
    DEFAULT         reduce using rule 103 (print -> PRINT LPAREN print1 RPAREN .)


state 137

    (106) print2 -> epsilon .

    RPAREN          reduce using rule 106 (print2 -> epsilon .)


state 138

    (104) print1 -> CTE_STRING print2 .

    RPAREN          reduce using rule 104 (print1 -> CTE_STRING print2 .)


state 139

    (107) print2 -> PLUS . print1
    (104) print1 -> . CTE_STRING print2
    (105) print1 -> . ID print2

    CTE_STRING      shift and go to state 91
    ID              shift and go to state 92

    print1                         shift and go to state 176

state 140

    (105) print1 -> ID print2 .

    RPAREN          reduce using rule 105 (print1 -> ID print2 .)


state 141

    (136) switch -> SWITCH ID switch1 LCURL . switch2 switch3 RCURL
    (139) switch2 -> . epsilon
    (140) switch2 -> . CASE varcte COLON switch4 switch2
    (144) epsilon -> .

    CASE            shift and go to state 177
    DEFAULT         reduce using rule 144 (epsilon -> .)

    switch2                        shift and go to state 178
    epsilon                        shift and go to state 179

state 142

    (138) switch1 -> LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 180


state 143

    (118) for -> FOR CTE_INT TO CTE_INT . BY LPAREN for1 CTE_INT RPAREN bloque

    BY              shift and go to state 181


state 144

    (115) input -> INPUT LPAREN input1 RPAREN .

    ID              reduce using rule 115 (input -> INPUT LPAREN input1 RPAREN .)
    IF              reduce using rule 115 (input -> INPUT LPAREN input1 RPAREN .)
    SWITCH          reduce using rule 115 (input -> INPUT LPAREN input1 RPAREN .)
    WHILE           reduce using rule 115 (input -> INPUT LPAREN input1 RPAREN .)
    FOR             reduce using rule 115 (input -> INPUT LPAREN input1 RPAREN .)
    PRINT           reduce using rule 115 (input -> INPUT LPAREN input1 RPAREN .)
    INPUT           reduce using rule 115 (input -> INPUT LPAREN input1 RPAREN .)
    RCURL           reduce using rule 115 (input -> INPUT LPAREN input1 RPAREN .)
    RETURN          reduce using rule 115 (input -> INPUT LPAREN input1 RPAREN .)
    CASE            reduce using rule 115 (input -> INPUT LPAREN input1 RPAREN .)
    DEFAULT         reduce using rule 115 (input -> INPUT LPAREN input1 RPAREN .)


state 145

    (91) varcte -> CTE_STRING tipoSTRING .

    TIMES           reduce using rule 91 (varcte -> CTE_STRING tipoSTRING .)
    DIVIDE          reduce using rule 91 (varcte -> CTE_STRING tipoSTRING .)
    PLUS            reduce using rule 91 (varcte -> CTE_STRING tipoSTRING .)
    MINUS           reduce using rule 91 (varcte -> CTE_STRING tipoSTRING .)
    COMMA           reduce using rule 91 (varcte -> CTE_STRING tipoSTRING .)
    RPAREN          reduce using rule 91 (varcte -> CTE_STRING tipoSTRING .)
    ID              reduce using rule 91 (varcte -> CTE_STRING tipoSTRING .)
    IF              reduce using rule 91 (varcte -> CTE_STRING tipoSTRING .)
    SWITCH          reduce using rule 91 (varcte -> CTE_STRING tipoSTRING .)
    WHILE           reduce using rule 91 (varcte -> CTE_STRING tipoSTRING .)
    FOR             reduce using rule 91 (varcte -> CTE_STRING tipoSTRING .)
    PRINT           reduce using rule 91 (varcte -> CTE_STRING tipoSTRING .)
    INPUT           reduce using rule 91 (varcte -> CTE_STRING tipoSTRING .)
    RCURL           reduce using rule 91 (varcte -> CTE_STRING tipoSTRING .)
    RETURN          reduce using rule 91 (varcte -> CTE_STRING tipoSTRING .)
    CASE            reduce using rule 91 (varcte -> CTE_STRING tipoSTRING .)
    DEFAULT         reduce using rule 91 (varcte -> CTE_STRING tipoSTRING .)
    AND             reduce using rule 91 (varcte -> CTE_STRING tipoSTRING .)
    OR              reduce using rule 91 (varcte -> CTE_STRING tipoSTRING .)
    LESS            reduce using rule 91 (varcte -> CTE_STRING tipoSTRING .)
    GREATER         reduce using rule 91 (varcte -> CTE_STRING tipoSTRING .)
    DOUBLE_EQUAL    reduce using rule 91 (varcte -> CTE_STRING tipoSTRING .)
    DIFF            reduce using rule 91 (varcte -> CTE_STRING tipoSTRING .)
    RBRACKET        reduce using rule 91 (varcte -> CTE_STRING tipoSTRING .)
    COLON           reduce using rule 91 (varcte -> CTE_STRING tipoSTRING .)


state 146

    (42) inicializacion_vector1 -> varcte . inicializacion_vector2
    (44) inicializacion_vector2 -> . COMMA varcte inicializacion_vector2
    (45) inicializacion_vector2 -> . epsilon
    (144) epsilon -> .

    COMMA           shift and go to state 184
    RBRACKET        reduce using rule 144 (epsilon -> .)

    inicializacion_vector2         shift and go to state 182
    epsilon                        shift and go to state 183

state 147

    (43) inicializacion_vector1 -> epsilon .

    RBRACKET        reduce using rule 43 (inicializacion_vector1 -> epsilon .)


state 148

    (69) asignacion_vector -> LBRACKET inicializacion_vector1 . RBRACKET

    RBRACKET        shift and go to state 185


state 149

    (30) exp -> termino checkEXPPOper . exp1
    (32) exp1 -> . PLUS addOperator exp
    (33) exp1 -> . MINUS addOperator exp
    (34) exp1 -> . epsilon
    (144) epsilon -> .

    PLUS            shift and go to state 188
    MINUS           shift and go to state 189
    ID              reduce using rule 144 (epsilon -> .)
    IF              reduce using rule 144 (epsilon -> .)
    SWITCH          reduce using rule 144 (epsilon -> .)
    WHILE           reduce using rule 144 (epsilon -> .)
    FOR             reduce using rule 144 (epsilon -> .)
    PRINT           reduce using rule 144 (epsilon -> .)
    INPUT           reduce using rule 144 (epsilon -> .)
    RCURL           reduce using rule 144 (epsilon -> .)
    RETURN          reduce using rule 144 (epsilon -> .)
    CASE            reduce using rule 144 (epsilon -> .)
    DEFAULT         reduce using rule 144 (epsilon -> .)
    COMMA           reduce using rule 144 (epsilon -> .)
    RPAREN          reduce using rule 144 (epsilon -> .)
    AND             reduce using rule 144 (epsilon -> .)
    OR              reduce using rule 144 (epsilon -> .)
    LESS            reduce using rule 144 (epsilon -> .)
    GREATER         reduce using rule 144 (epsilon -> .)
    DOUBLE_EQUAL    reduce using rule 144 (epsilon -> .)
    DIFF            reduce using rule 144 (epsilon -> .)
    RBRACKET        reduce using rule 144 (epsilon -> .)

    epsilon                        shift and go to state 186
    exp1                           shift and go to state 187

state 150

    (57) factor1 -> MINUS varcte .

    TIMES           reduce using rule 57 (factor1 -> MINUS varcte .)
    DIVIDE          reduce using rule 57 (factor1 -> MINUS varcte .)
    PLUS            reduce using rule 57 (factor1 -> MINUS varcte .)
    MINUS           reduce using rule 57 (factor1 -> MINUS varcte .)
    ID              reduce using rule 57 (factor1 -> MINUS varcte .)
    IF              reduce using rule 57 (factor1 -> MINUS varcte .)
    SWITCH          reduce using rule 57 (factor1 -> MINUS varcte .)
    WHILE           reduce using rule 57 (factor1 -> MINUS varcte .)
    FOR             reduce using rule 57 (factor1 -> MINUS varcte .)
    PRINT           reduce using rule 57 (factor1 -> MINUS varcte .)
    INPUT           reduce using rule 57 (factor1 -> MINUS varcte .)
    RCURL           reduce using rule 57 (factor1 -> MINUS varcte .)
    RETURN          reduce using rule 57 (factor1 -> MINUS varcte .)
    CASE            reduce using rule 57 (factor1 -> MINUS varcte .)
    DEFAULT         reduce using rule 57 (factor1 -> MINUS varcte .)
    COMMA           reduce using rule 57 (factor1 -> MINUS varcte .)
    RPAREN          reduce using rule 57 (factor1 -> MINUS varcte .)
    AND             reduce using rule 57 (factor1 -> MINUS varcte .)
    OR              reduce using rule 57 (factor1 -> MINUS varcte .)
    LESS            reduce using rule 57 (factor1 -> MINUS varcte .)
    GREATER         reduce using rule 57 (factor1 -> MINUS varcte .)
    DOUBLE_EQUAL    reduce using rule 57 (factor1 -> MINUS varcte .)
    DIFF            reduce using rule 57 (factor1 -> MINUS varcte .)
    RBRACKET        reduce using rule 57 (factor1 -> MINUS varcte .)


state 151

    (56) factor1 -> PLUS varcte .

    TIMES           reduce using rule 56 (factor1 -> PLUS varcte .)
    DIVIDE          reduce using rule 56 (factor1 -> PLUS varcte .)
    PLUS            reduce using rule 56 (factor1 -> PLUS varcte .)
    MINUS           reduce using rule 56 (factor1 -> PLUS varcte .)
    ID              reduce using rule 56 (factor1 -> PLUS varcte .)
    IF              reduce using rule 56 (factor1 -> PLUS varcte .)
    SWITCH          reduce using rule 56 (factor1 -> PLUS varcte .)
    WHILE           reduce using rule 56 (factor1 -> PLUS varcte .)
    FOR             reduce using rule 56 (factor1 -> PLUS varcte .)
    PRINT           reduce using rule 56 (factor1 -> PLUS varcte .)
    INPUT           reduce using rule 56 (factor1 -> PLUS varcte .)
    RCURL           reduce using rule 56 (factor1 -> PLUS varcte .)
    RETURN          reduce using rule 56 (factor1 -> PLUS varcte .)
    CASE            reduce using rule 56 (factor1 -> PLUS varcte .)
    DEFAULT         reduce using rule 56 (factor1 -> PLUS varcte .)
    COMMA           reduce using rule 56 (factor1 -> PLUS varcte .)
    RPAREN          reduce using rule 56 (factor1 -> PLUS varcte .)
    AND             reduce using rule 56 (factor1 -> PLUS varcte .)
    OR              reduce using rule 56 (factor1 -> PLUS varcte .)
    LESS            reduce using rule 56 (factor1 -> PLUS varcte .)
    GREATER         reduce using rule 56 (factor1 -> PLUS varcte .)
    DOUBLE_EQUAL    reduce using rule 56 (factor1 -> PLUS varcte .)
    DIFF            reduce using rule 56 (factor1 -> PLUS varcte .)
    RBRACKET        reduce using rule 56 (factor1 -> PLUS varcte .)


state 152

    (35) termino -> factor checkTERMPOper . termino1
    (37) termino1 -> . TIMES addOperator termino
    (38) termino1 -> . DIVIDE addOperator termino
    (39) termino1 -> . epsilon
    (144) epsilon -> .

    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 190
    PLUS            reduce using rule 144 (epsilon -> .)
    MINUS           reduce using rule 144 (epsilon -> .)
    ID              reduce using rule 144 (epsilon -> .)
    IF              reduce using rule 144 (epsilon -> .)
    SWITCH          reduce using rule 144 (epsilon -> .)
    WHILE           reduce using rule 144 (epsilon -> .)
    FOR             reduce using rule 144 (epsilon -> .)
    PRINT           reduce using rule 144 (epsilon -> .)
    INPUT           reduce using rule 144 (epsilon -> .)
    RCURL           reduce using rule 144 (epsilon -> .)
    RETURN          reduce using rule 144 (epsilon -> .)
    CASE            reduce using rule 144 (epsilon -> .)
    DEFAULT         reduce using rule 144 (epsilon -> .)
    COMMA           reduce using rule 144 (epsilon -> .)
    RPAREN          reduce using rule 144 (epsilon -> .)
    AND             reduce using rule 144 (epsilon -> .)
    OR              reduce using rule 144 (epsilon -> .)
    LESS            reduce using rule 144 (epsilon -> .)
    GREATER         reduce using rule 144 (epsilon -> .)
    DOUBLE_EQUAL    reduce using rule 144 (epsilon -> .)
    DIFF            reduce using rule 144 (epsilon -> .)
    RBRACKET        reduce using rule 144 (epsilon -> .)

    epsilon                        shift and go to state 191
    termino1                       shift and go to state 192

state 153

    (53) factor -> LPAREN factorAddFakeCover . exp RPAREN
    (30) exp -> . termino checkEXPPOper exp1
    (35) termino -> . factor checkTERMPOper termino1
    (53) factor -> . LPAREN factorAddFakeCover exp RPAREN
    (54) factor -> . factor1
    (56) factor1 -> . PLUS varcte
    (57) factor1 -> . MINUS varcte
    (58) factor1 -> . varcte
    (88) varcte -> . ID varcte1
    (89) varcte -> . CTE_INT tipoINT
    (90) varcte -> . CTE_FLOAT tipoFLOAT
    (91) varcte -> . CTE_STRING tipoSTRING
    (92) varcte -> . cte_bool
    (101) cte_bool -> . TRUE
    (102) cte_bool -> . FALSE

    LPAREN          shift and go to state 113
    PLUS            shift and go to state 110
    MINUS           shift and go to state 107
    ID              shift and go to state 123
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 118
    CTE_STRING      shift and go to state 102
    TRUE            shift and go to state 106
    FALSE           shift and go to state 116

    factor1                        shift and go to state 117
    cte_bool                       shift and go to state 103
    termino                        shift and go to state 105
    exp                            shift and go to state 194
    factor                         shift and go to state 111
    varcte                         shift and go to state 108

state 154

    (89) varcte -> CTE_INT tipoINT .

    TIMES           reduce using rule 89 (varcte -> CTE_INT tipoINT .)
    DIVIDE          reduce using rule 89 (varcte -> CTE_INT tipoINT .)
    PLUS            reduce using rule 89 (varcte -> CTE_INT tipoINT .)
    MINUS           reduce using rule 89 (varcte -> CTE_INT tipoINT .)
    COMMA           reduce using rule 89 (varcte -> CTE_INT tipoINT .)
    RPAREN          reduce using rule 89 (varcte -> CTE_INT tipoINT .)
    ID              reduce using rule 89 (varcte -> CTE_INT tipoINT .)
    IF              reduce using rule 89 (varcte -> CTE_INT tipoINT .)
    SWITCH          reduce using rule 89 (varcte -> CTE_INT tipoINT .)
    WHILE           reduce using rule 89 (varcte -> CTE_INT tipoINT .)
    FOR             reduce using rule 89 (varcte -> CTE_INT tipoINT .)
    PRINT           reduce using rule 89 (varcte -> CTE_INT tipoINT .)
    INPUT           reduce using rule 89 (varcte -> CTE_INT tipoINT .)
    RCURL           reduce using rule 89 (varcte -> CTE_INT tipoINT .)
    RETURN          reduce using rule 89 (varcte -> CTE_INT tipoINT .)
    CASE            reduce using rule 89 (varcte -> CTE_INT tipoINT .)
    DEFAULT         reduce using rule 89 (varcte -> CTE_INT tipoINT .)
    AND             reduce using rule 89 (varcte -> CTE_INT tipoINT .)
    OR              reduce using rule 89 (varcte -> CTE_INT tipoINT .)
    LESS            reduce using rule 89 (varcte -> CTE_INT tipoINT .)
    GREATER         reduce using rule 89 (varcte -> CTE_INT tipoINT .)
    DOUBLE_EQUAL    reduce using rule 89 (varcte -> CTE_INT tipoINT .)
    DIFF            reduce using rule 89 (varcte -> CTE_INT tipoINT .)
    RBRACKET        reduce using rule 89 (varcte -> CTE_INT tipoINT .)
    COLON           reduce using rule 89 (varcte -> CTE_INT tipoINT .)


state 155

    (96) varcte1 -> epsilon .

    TIMES           reduce using rule 96 (varcte1 -> epsilon .)
    DIVIDE          reduce using rule 96 (varcte1 -> epsilon .)
    PLUS            reduce using rule 96 (varcte1 -> epsilon .)
    MINUS           reduce using rule 96 (varcte1 -> epsilon .)
    COMMA           reduce using rule 96 (varcte1 -> epsilon .)
    RPAREN          reduce using rule 96 (varcte1 -> epsilon .)
    AND             reduce using rule 96 (varcte1 -> epsilon .)
    OR              reduce using rule 96 (varcte1 -> epsilon .)
    LESS            reduce using rule 96 (varcte1 -> epsilon .)
    GREATER         reduce using rule 96 (varcte1 -> epsilon .)
    DOUBLE_EQUAL    reduce using rule 96 (varcte1 -> epsilon .)
    DIFF            reduce using rule 96 (varcte1 -> epsilon .)
    RBRACKET        reduce using rule 96 (varcte1 -> epsilon .)
    ID              reduce using rule 96 (varcte1 -> epsilon .)
    IF              reduce using rule 96 (varcte1 -> epsilon .)
    SWITCH          reduce using rule 96 (varcte1 -> epsilon .)
    WHILE           reduce using rule 96 (varcte1 -> epsilon .)
    FOR             reduce using rule 96 (varcte1 -> epsilon .)
    PRINT           reduce using rule 96 (varcte1 -> epsilon .)
    INPUT           reduce using rule 96 (varcte1 -> epsilon .)
    RCURL           reduce using rule 96 (varcte1 -> epsilon .)
    RETURN          reduce using rule 96 (varcte1 -> epsilon .)
    CASE            reduce using rule 96 (varcte1 -> epsilon .)
    DEFAULT         reduce using rule 96 (varcte1 -> epsilon .)
    COLON           reduce using rule 96 (varcte1 -> epsilon .)


state 156

    (98) varcte1 -> LBRACKET . exp RBRACKET
    (30) exp -> . termino checkEXPPOper exp1
    (35) termino -> . factor checkTERMPOper termino1
    (53) factor -> . LPAREN factorAddFakeCover exp RPAREN
    (54) factor -> . factor1
    (56) factor1 -> . PLUS varcte
    (57) factor1 -> . MINUS varcte
    (58) factor1 -> . varcte
    (88) varcte -> . ID varcte1
    (89) varcte -> . CTE_INT tipoINT
    (90) varcte -> . CTE_FLOAT tipoFLOAT
    (91) varcte -> . CTE_STRING tipoSTRING
    (92) varcte -> . cte_bool
    (101) cte_bool -> . TRUE
    (102) cte_bool -> . FALSE

    LPAREN          shift and go to state 113
    PLUS            shift and go to state 110
    MINUS           shift and go to state 107
    ID              shift and go to state 123
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 118
    CTE_STRING      shift and go to state 102
    TRUE            shift and go to state 106
    FALSE           shift and go to state 116

    factor1                        shift and go to state 117
    cte_bool                       shift and go to state 103
    termino                        shift and go to state 105
    exp                            shift and go to state 195
    factor                         shift and go to state 111
    varcte                         shift and go to state 108

state 157

    (81) llamada -> ID LPAREN . llamada1 RPAREN
    (97) varcte1 -> LPAREN . exp varcte2 RPAREN
    (84) llamada1 -> . epsilon
    (85) llamada1 -> . exp llamada2
    (30) exp -> . termino checkEXPPOper exp1
    (144) epsilon -> .
    (35) termino -> . factor checkTERMPOper termino1
    (53) factor -> . LPAREN factorAddFakeCover exp RPAREN
    (54) factor -> . factor1
    (56) factor1 -> . PLUS varcte
    (57) factor1 -> . MINUS varcte
    (58) factor1 -> . varcte
    (88) varcte -> . ID varcte1
    (89) varcte -> . CTE_INT tipoINT
    (90) varcte -> . CTE_FLOAT tipoFLOAT
    (91) varcte -> . CTE_STRING tipoSTRING
    (92) varcte -> . cte_bool
    (101) cte_bool -> . TRUE
    (102) cte_bool -> . FALSE

    RPAREN          reduce using rule 144 (epsilon -> .)
    LPAREN          shift and go to state 113
    PLUS            shift and go to state 110
    MINUS           shift and go to state 107
    ID              shift and go to state 123
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 118
    CTE_STRING      shift and go to state 102
    TRUE            shift and go to state 106
    FALSE           shift and go to state 116

    factor1                        shift and go to state 117
    epsilon                        shift and go to state 122
    cte_bool                       shift and go to state 103
    termino                        shift and go to state 105
    exp                            shift and go to state 196
    factor                         shift and go to state 111
    llamada1                       shift and go to state 121
    varcte                         shift and go to state 108

state 158

    (88) varcte -> ID varcte1 .

    TIMES           reduce using rule 88 (varcte -> ID varcte1 .)
    DIVIDE          reduce using rule 88 (varcte -> ID varcte1 .)
    PLUS            reduce using rule 88 (varcte -> ID varcte1 .)
    MINUS           reduce using rule 88 (varcte -> ID varcte1 .)
    COMMA           reduce using rule 88 (varcte -> ID varcte1 .)
    RPAREN          reduce using rule 88 (varcte -> ID varcte1 .)
    ID              reduce using rule 88 (varcte -> ID varcte1 .)
    IF              reduce using rule 88 (varcte -> ID varcte1 .)
    SWITCH          reduce using rule 88 (varcte -> ID varcte1 .)
    WHILE           reduce using rule 88 (varcte -> ID varcte1 .)
    FOR             reduce using rule 88 (varcte -> ID varcte1 .)
    PRINT           reduce using rule 88 (varcte -> ID varcte1 .)
    INPUT           reduce using rule 88 (varcte -> ID varcte1 .)
    RCURL           reduce using rule 88 (varcte -> ID varcte1 .)
    RETURN          reduce using rule 88 (varcte -> ID varcte1 .)
    CASE            reduce using rule 88 (varcte -> ID varcte1 .)
    DEFAULT         reduce using rule 88 (varcte -> ID varcte1 .)
    AND             reduce using rule 88 (varcte -> ID varcte1 .)
    OR              reduce using rule 88 (varcte -> ID varcte1 .)
    LESS            reduce using rule 88 (varcte -> ID varcte1 .)
    GREATER         reduce using rule 88 (varcte -> ID varcte1 .)
    DOUBLE_EQUAL    reduce using rule 88 (varcte -> ID varcte1 .)
    DIFF            reduce using rule 88 (varcte -> ID varcte1 .)
    RBRACKET        reduce using rule 88 (varcte -> ID varcte1 .)
    COLON           reduce using rule 88 (varcte -> ID varcte1 .)


state 159

    (90) varcte -> CTE_FLOAT tipoFLOAT .

    TIMES           reduce using rule 90 (varcte -> CTE_FLOAT tipoFLOAT .)
    DIVIDE          reduce using rule 90 (varcte -> CTE_FLOAT tipoFLOAT .)
    PLUS            reduce using rule 90 (varcte -> CTE_FLOAT tipoFLOAT .)
    MINUS           reduce using rule 90 (varcte -> CTE_FLOAT tipoFLOAT .)
    COMMA           reduce using rule 90 (varcte -> CTE_FLOAT tipoFLOAT .)
    RPAREN          reduce using rule 90 (varcte -> CTE_FLOAT tipoFLOAT .)
    ID              reduce using rule 90 (varcte -> CTE_FLOAT tipoFLOAT .)
    IF              reduce using rule 90 (varcte -> CTE_FLOAT tipoFLOAT .)
    SWITCH          reduce using rule 90 (varcte -> CTE_FLOAT tipoFLOAT .)
    WHILE           reduce using rule 90 (varcte -> CTE_FLOAT tipoFLOAT .)
    FOR             reduce using rule 90 (varcte -> CTE_FLOAT tipoFLOAT .)
    PRINT           reduce using rule 90 (varcte -> CTE_FLOAT tipoFLOAT .)
    INPUT           reduce using rule 90 (varcte -> CTE_FLOAT tipoFLOAT .)
    RCURL           reduce using rule 90 (varcte -> CTE_FLOAT tipoFLOAT .)
    RETURN          reduce using rule 90 (varcte -> CTE_FLOAT tipoFLOAT .)
    CASE            reduce using rule 90 (varcte -> CTE_FLOAT tipoFLOAT .)
    DEFAULT         reduce using rule 90 (varcte -> CTE_FLOAT tipoFLOAT .)
    AND             reduce using rule 90 (varcte -> CTE_FLOAT tipoFLOAT .)
    OR              reduce using rule 90 (varcte -> CTE_FLOAT tipoFLOAT .)
    LESS            reduce using rule 90 (varcte -> CTE_FLOAT tipoFLOAT .)
    GREATER         reduce using rule 90 (varcte -> CTE_FLOAT tipoFLOAT .)
    DOUBLE_EQUAL    reduce using rule 90 (varcte -> CTE_FLOAT tipoFLOAT .)
    DIFF            reduce using rule 90 (varcte -> CTE_FLOAT tipoFLOAT .)
    RBRACKET        reduce using rule 90 (varcte -> CTE_FLOAT tipoFLOAT .)
    COLON           reduce using rule 90 (varcte -> CTE_FLOAT tipoFLOAT .)


state 160

    (81) llamada -> ID LPAREN llamada1 RPAREN .

    ID              reduce using rule 81 (llamada -> ID LPAREN llamada1 RPAREN .)
    IF              reduce using rule 81 (llamada -> ID LPAREN llamada1 RPAREN .)
    SWITCH          reduce using rule 81 (llamada -> ID LPAREN llamada1 RPAREN .)
    WHILE           reduce using rule 81 (llamada -> ID LPAREN llamada1 RPAREN .)
    FOR             reduce using rule 81 (llamada -> ID LPAREN llamada1 RPAREN .)
    PRINT           reduce using rule 81 (llamada -> ID LPAREN llamada1 RPAREN .)
    INPUT           reduce using rule 81 (llamada -> ID LPAREN llamada1 RPAREN .)
    RCURL           reduce using rule 81 (llamada -> ID LPAREN llamada1 RPAREN .)
    RETURN          reduce using rule 81 (llamada -> ID LPAREN llamada1 RPAREN .)
    CASE            reduce using rule 81 (llamada -> ID LPAREN llamada1 RPAREN .)
    DEFAULT         reduce using rule 81 (llamada -> ID LPAREN llamada1 RPAREN .)


state 161

    (97) varcte1 -> LPAREN . exp varcte2 RPAREN
    (30) exp -> . termino checkEXPPOper exp1
    (35) termino -> . factor checkTERMPOper termino1
    (53) factor -> . LPAREN factorAddFakeCover exp RPAREN
    (54) factor -> . factor1
    (56) factor1 -> . PLUS varcte
    (57) factor1 -> . MINUS varcte
    (58) factor1 -> . varcte
    (88) varcte -> . ID varcte1
    (89) varcte -> . CTE_INT tipoINT
    (90) varcte -> . CTE_FLOAT tipoFLOAT
    (91) varcte -> . CTE_STRING tipoSTRING
    (92) varcte -> . cte_bool
    (101) cte_bool -> . TRUE
    (102) cte_bool -> . FALSE

    LPAREN          shift and go to state 113
    PLUS            shift and go to state 110
    MINUS           shift and go to state 107
    ID              shift and go to state 123
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 118
    CTE_STRING      shift and go to state 102
    TRUE            shift and go to state 106
    FALSE           shift and go to state 116

    factor1                        shift and go to state 117
    cte_bool                       shift and go to state 103
    termino                        shift and go to state 105
    exp                            shift and go to state 197
    factor                         shift and go to state 111
    varcte                         shift and go to state 108

state 162

    (85) llamada1 -> exp llamada2 .

    RPAREN          reduce using rule 85 (llamada1 -> exp llamada2 .)


state 163

    (86) llamada2 -> epsilon .

    RPAREN          reduce using rule 86 (llamada2 -> epsilon .)


state 164

    (87) llamada2 -> COMMA . exp llamada2
    (30) exp -> . termino checkEXPPOper exp1
    (35) termino -> . factor checkTERMPOper termino1
    (53) factor -> . LPAREN factorAddFakeCover exp RPAREN
    (54) factor -> . factor1
    (56) factor1 -> . PLUS varcte
    (57) factor1 -> . MINUS varcte
    (58) factor1 -> . varcte
    (88) varcte -> . ID varcte1
    (89) varcte -> . CTE_INT tipoINT
    (90) varcte -> . CTE_FLOAT tipoFLOAT
    (91) varcte -> . CTE_STRING tipoSTRING
    (92) varcte -> . cte_bool
    (101) cte_bool -> . TRUE
    (102) cte_bool -> . FALSE

    LPAREN          shift and go to state 113
    PLUS            shift and go to state 110
    MINUS           shift and go to state 107
    ID              shift and go to state 123
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 118
    CTE_STRING      shift and go to state 102
    TRUE            shift and go to state 106
    FALSE           shift and go to state 116

    factor1                        shift and go to state 117
    cte_bool                       shift and go to state 103
    termino                        shift and go to state 105
    exp                            shift and go to state 198
    factor                         shift and go to state 111
    varcte                         shift and go to state 108

state 165

    (108) condicion -> IF LPAREN expresion_logica RPAREN . condicion1 condicion2 condicion3
    (109) condicion1 -> . bloque
    (110) condicion1 -> . LCURL bloque RCURL
    (27) bloque -> . LCURL estatuto bloque1 RCURL

    LCURL           shift and go to state 201

    condicion1                     shift and go to state 199
    bloque                         shift and go to state 200

state 166

    (78) expresion_logica1 -> AND . exp
    (30) exp -> . termino checkEXPPOper exp1
    (35) termino -> . factor checkTERMPOper termino1
    (53) factor -> . LPAREN factorAddFakeCover exp RPAREN
    (54) factor -> . factor1
    (56) factor1 -> . PLUS varcte
    (57) factor1 -> . MINUS varcte
    (58) factor1 -> . varcte
    (88) varcte -> . ID varcte1
    (89) varcte -> . CTE_INT tipoINT
    (90) varcte -> . CTE_FLOAT tipoFLOAT
    (91) varcte -> . CTE_STRING tipoSTRING
    (92) varcte -> . cte_bool
    (101) cte_bool -> . TRUE
    (102) cte_bool -> . FALSE

    LPAREN          shift and go to state 113
    PLUS            shift and go to state 110
    MINUS           shift and go to state 107
    ID              shift and go to state 123
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 118
    CTE_STRING      shift and go to state 102
    TRUE            shift and go to state 106
    FALSE           shift and go to state 116

    factor1                        shift and go to state 117
    cte_bool                       shift and go to state 103
    termino                        shift and go to state 105
    exp                            shift and go to state 202
    factor                         shift and go to state 111
    varcte                         shift and go to state 108

state 167

    (79) expresion_logica1 -> epsilon .

    LESS            reduce using rule 79 (expresion_logica1 -> epsilon .)
    GREATER         reduce using rule 79 (expresion_logica1 -> epsilon .)
    DOUBLE_EQUAL    reduce using rule 79 (expresion_logica1 -> epsilon .)
    DIFF            reduce using rule 79 (expresion_logica1 -> epsilon .)
    RPAREN          reduce using rule 79 (expresion_logica1 -> epsilon .)


state 168

    (77) expresion_logica -> exp expresion_logica1 . expresion
    (70) expresion -> . expresion1
    (71) expresion1 -> . epsilon
    (72) expresion1 -> . expresion2 exp
    (144) epsilon -> .
    (73) expresion2 -> . LESS
    (74) expresion2 -> . GREATER
    (75) expresion2 -> . DOUBLE_EQUAL
    (76) expresion2 -> . DIFF

    RPAREN          reduce using rule 144 (epsilon -> .)
    LESS            shift and go to state 85
    GREATER         shift and go to state 89
    DOUBLE_EQUAL    shift and go to state 87
    DIFF            shift and go to state 88

    expresion                      shift and go to state 203
    expresion1                     shift and go to state 83
    expresion2                     shift and go to state 84
    epsilon                        shift and go to state 86

state 169

    (80) expresion_logica1 -> OR . exp
    (30) exp -> . termino checkEXPPOper exp1
    (35) termino -> . factor checkTERMPOper termino1
    (53) factor -> . LPAREN factorAddFakeCover exp RPAREN
    (54) factor -> . factor1
    (56) factor1 -> . PLUS varcte
    (57) factor1 -> . MINUS varcte
    (58) factor1 -> . varcte
    (88) varcte -> . ID varcte1
    (89) varcte -> . CTE_INT tipoINT
    (90) varcte -> . CTE_FLOAT tipoFLOAT
    (91) varcte -> . CTE_STRING tipoSTRING
    (92) varcte -> . cte_bool
    (101) cte_bool -> . TRUE
    (102) cte_bool -> . FALSE

    LPAREN          shift and go to state 113
    PLUS            shift and go to state 110
    MINUS           shift and go to state 107
    ID              shift and go to state 123
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 118
    CTE_STRING      shift and go to state 102
    TRUE            shift and go to state 106
    FALSE           shift and go to state 116

    factor1                        shift and go to state 117
    cte_bool                       shift and go to state 103
    termino                        shift and go to state 105
    exp                            shift and go to state 204
    factor                         shift and go to state 111
    varcte                         shift and go to state 108

state 170

    (20) parametros2 -> COMMA parametros .

    RPAREN          reduce using rule 20 (parametros2 -> COMMA parametros .)


state 171

    (125) funcion1 -> var_declaracion funcion1 .

    ID              reduce using rule 125 (funcion1 -> var_declaracion funcion1 .)
    IF              reduce using rule 125 (funcion1 -> var_declaracion funcion1 .)
    SWITCH          reduce using rule 125 (funcion1 -> var_declaracion funcion1 .)
    WHILE           reduce using rule 125 (funcion1 -> var_declaracion funcion1 .)
    FOR             reduce using rule 125 (funcion1 -> var_declaracion funcion1 .)
    PRINT           reduce using rule 125 (funcion1 -> var_declaracion funcion1 .)
    INPUT           reduce using rule 125 (funcion1 -> var_declaracion funcion1 .)


state 172

    (132) funcion5 -> ID declareFunc LPAREN funcion3 RPAREN LCURL funcion1 estatuto . funcion2 funcion6
    (126) funcion2 -> . epsilon
    (127) funcion2 -> . estatuto funcion2
    (144) epsilon -> .
    (59) estatuto -> . asignacion
    (60) estatuto -> . llamada
    (61) estatuto -> . condicion
    (62) estatuto -> . switch
    (63) estatuto -> . while
    (64) estatuto -> . for
    (65) asignacion -> . ID EQUALS asignacion1
    (81) llamada -> . ID LPAREN llamada1 RPAREN
    (82) llamada -> . print
    (83) llamada -> . input
    (108) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (136) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (52) while -> . WHILE LPAREN expresion RPAREN bloque
    (118) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (103) print -> . PRINT LPAREN print1 RPAREN
    (115) input -> . INPUT LPAREN input1 RPAREN

    RCURL           reduce using rule 144 (epsilon -> .)
    RETURN          reduce using rule 144 (epsilon -> .)
    ID              shift and go to state 57
    IF              shift and go to state 58
    SWITCH          shift and go to state 51
    WHILE           shift and go to state 46
    FOR             shift and go to state 55
    PRINT           shift and go to state 47
    INPUT           shift and go to state 56

    funcion2                       shift and go to state 205
    for                            shift and go to state 48
    estatuto                       shift and go to state 206
    while                          shift and go to state 61
    llamada                        shift and go to state 50
    condicion                      shift and go to state 52
    print                          shift and go to state 53
    input                          shift and go to state 54
    epsilon                        shift and go to state 207
    asignacion                     shift and go to state 59
    switch                         shift and go to state 60

state 173

    (17) parametros -> VECTOR tipo parametros1 ID parametros2 .

    RPAREN          reduce using rule 17 (parametros -> VECTOR tipo parametros1 ID parametros2 .)


state 174

    (52) while -> WHILE LPAREN expresion RPAREN bloque .

    ID              reduce using rule 52 (while -> WHILE LPAREN expresion RPAREN bloque .)
    IF              reduce using rule 52 (while -> WHILE LPAREN expresion RPAREN bloque .)
    SWITCH          reduce using rule 52 (while -> WHILE LPAREN expresion RPAREN bloque .)
    WHILE           reduce using rule 52 (while -> WHILE LPAREN expresion RPAREN bloque .)
    FOR             reduce using rule 52 (while -> WHILE LPAREN expresion RPAREN bloque .)
    PRINT           reduce using rule 52 (while -> WHILE LPAREN expresion RPAREN bloque .)
    INPUT           reduce using rule 52 (while -> WHILE LPAREN expresion RPAREN bloque .)
    RCURL           reduce using rule 52 (while -> WHILE LPAREN expresion RPAREN bloque .)
    RETURN          reduce using rule 52 (while -> WHILE LPAREN expresion RPAREN bloque .)
    CASE            reduce using rule 52 (while -> WHILE LPAREN expresion RPAREN bloque .)
    DEFAULT         reduce using rule 52 (while -> WHILE LPAREN expresion RPAREN bloque .)


state 175

    (27) bloque -> LCURL . estatuto bloque1 RCURL
    (59) estatuto -> . asignacion
    (60) estatuto -> . llamada
    (61) estatuto -> . condicion
    (62) estatuto -> . switch
    (63) estatuto -> . while
    (64) estatuto -> . for
    (65) asignacion -> . ID EQUALS asignacion1
    (81) llamada -> . ID LPAREN llamada1 RPAREN
    (82) llamada -> . print
    (83) llamada -> . input
    (108) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (136) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (52) while -> . WHILE LPAREN expresion RPAREN bloque
    (118) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (103) print -> . PRINT LPAREN print1 RPAREN
    (115) input -> . INPUT LPAREN input1 RPAREN

    ID              shift and go to state 57
    IF              shift and go to state 58
    SWITCH          shift and go to state 51
    WHILE           shift and go to state 46
    FOR             shift and go to state 55
    PRINT           shift and go to state 47
    INPUT           shift and go to state 56

    for                            shift and go to state 48
    estatuto                       shift and go to state 208
    switch                         shift and go to state 60
    llamada                        shift and go to state 50
    condicion                      shift and go to state 52
    print                          shift and go to state 53
    input                          shift and go to state 54
    asignacion                     shift and go to state 59
    while                          shift and go to state 61

state 176

    (107) print2 -> PLUS print1 .

    RPAREN          reduce using rule 107 (print2 -> PLUS print1 .)


state 177

    (140) switch2 -> CASE . varcte COLON switch4 switch2
    (88) varcte -> . ID varcte1
    (89) varcte -> . CTE_INT tipoINT
    (90) varcte -> . CTE_FLOAT tipoFLOAT
    (91) varcte -> . CTE_STRING tipoSTRING
    (92) varcte -> . cte_bool
    (101) cte_bool -> . TRUE
    (102) cte_bool -> . FALSE

    ID              shift and go to state 123
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 118
    CTE_STRING      shift and go to state 102
    TRUE            shift and go to state 106
    FALSE           shift and go to state 116

    varcte                         shift and go to state 209
    cte_bool                       shift and go to state 103

state 178

    (136) switch -> SWITCH ID switch1 LCURL switch2 . switch3 RCURL
    (141) switch3 -> . DEFAULT COLON switch4

    DEFAULT         shift and go to state 211

    switch3                        shift and go to state 210

state 179

    (139) switch2 -> epsilon .

    DEFAULT         reduce using rule 139 (switch2 -> epsilon .)


state 180

    (138) switch1 -> LBRACKET exp RBRACKET .

    LCURL           reduce using rule 138 (switch1 -> LBRACKET exp RBRACKET .)


state 181

    (118) for -> FOR CTE_INT TO CTE_INT BY . LPAREN for1 CTE_INT RPAREN bloque

    LPAREN          shift and go to state 212


state 182

    (42) inicializacion_vector1 -> varcte inicializacion_vector2 .

    RBRACKET        reduce using rule 42 (inicializacion_vector1 -> varcte inicializacion_vector2 .)


state 183

    (45) inicializacion_vector2 -> epsilon .

    RBRACKET        reduce using rule 45 (inicializacion_vector2 -> epsilon .)


state 184

    (44) inicializacion_vector2 -> COMMA . varcte inicializacion_vector2
    (88) varcte -> . ID varcte1
    (89) varcte -> . CTE_INT tipoINT
    (90) varcte -> . CTE_FLOAT tipoFLOAT
    (91) varcte -> . CTE_STRING tipoSTRING
    (92) varcte -> . cte_bool
    (101) cte_bool -> . TRUE
    (102) cte_bool -> . FALSE

    ID              shift and go to state 123
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 118
    CTE_STRING      shift and go to state 102
    TRUE            shift and go to state 106
    FALSE           shift and go to state 116

    varcte                         shift and go to state 213
    cte_bool                       shift and go to state 103

state 185

    (69) asignacion_vector -> LBRACKET inicializacion_vector1 RBRACKET .

    ID              reduce using rule 69 (asignacion_vector -> LBRACKET inicializacion_vector1 RBRACKET .)
    IF              reduce using rule 69 (asignacion_vector -> LBRACKET inicializacion_vector1 RBRACKET .)
    SWITCH          reduce using rule 69 (asignacion_vector -> LBRACKET inicializacion_vector1 RBRACKET .)
    WHILE           reduce using rule 69 (asignacion_vector -> LBRACKET inicializacion_vector1 RBRACKET .)
    FOR             reduce using rule 69 (asignacion_vector -> LBRACKET inicializacion_vector1 RBRACKET .)
    PRINT           reduce using rule 69 (asignacion_vector -> LBRACKET inicializacion_vector1 RBRACKET .)
    INPUT           reduce using rule 69 (asignacion_vector -> LBRACKET inicializacion_vector1 RBRACKET .)
    RCURL           reduce using rule 69 (asignacion_vector -> LBRACKET inicializacion_vector1 RBRACKET .)
    RETURN          reduce using rule 69 (asignacion_vector -> LBRACKET inicializacion_vector1 RBRACKET .)
    CASE            reduce using rule 69 (asignacion_vector -> LBRACKET inicializacion_vector1 RBRACKET .)
    DEFAULT         reduce using rule 69 (asignacion_vector -> LBRACKET inicializacion_vector1 RBRACKET .)


state 186

    (34) exp1 -> epsilon .

    ID              reduce using rule 34 (exp1 -> epsilon .)
    IF              reduce using rule 34 (exp1 -> epsilon .)
    SWITCH          reduce using rule 34 (exp1 -> epsilon .)
    WHILE           reduce using rule 34 (exp1 -> epsilon .)
    FOR             reduce using rule 34 (exp1 -> epsilon .)
    PRINT           reduce using rule 34 (exp1 -> epsilon .)
    INPUT           reduce using rule 34 (exp1 -> epsilon .)
    RCURL           reduce using rule 34 (exp1 -> epsilon .)
    RETURN          reduce using rule 34 (exp1 -> epsilon .)
    CASE            reduce using rule 34 (exp1 -> epsilon .)
    DEFAULT         reduce using rule 34 (exp1 -> epsilon .)
    COMMA           reduce using rule 34 (exp1 -> epsilon .)
    RPAREN          reduce using rule 34 (exp1 -> epsilon .)
    AND             reduce using rule 34 (exp1 -> epsilon .)
    OR              reduce using rule 34 (exp1 -> epsilon .)
    LESS            reduce using rule 34 (exp1 -> epsilon .)
    GREATER         reduce using rule 34 (exp1 -> epsilon .)
    DOUBLE_EQUAL    reduce using rule 34 (exp1 -> epsilon .)
    DIFF            reduce using rule 34 (exp1 -> epsilon .)
    RBRACKET        reduce using rule 34 (exp1 -> epsilon .)


state 187

    (30) exp -> termino checkEXPPOper exp1 .

    LESS            reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    GREATER         reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    DOUBLE_EQUAL    reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    DIFF            reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    RPAREN          reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    RBRACKET        reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    ID              reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    IF              reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    SWITCH          reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    WHILE           reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    FOR             reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    PRINT           reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    INPUT           reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    RCURL           reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    RETURN          reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    CASE            reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    DEFAULT         reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    COMMA           reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    AND             reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)
    OR              reduce using rule 30 (exp -> termino checkEXPPOper exp1 .)


state 188

    (32) exp1 -> PLUS . addOperator exp
    (40) addOperator -> .

    LPAREN          reduce using rule 40 (addOperator -> .)
    PLUS            reduce using rule 40 (addOperator -> .)
    MINUS           reduce using rule 40 (addOperator -> .)
    ID              reduce using rule 40 (addOperator -> .)
    CTE_INT         reduce using rule 40 (addOperator -> .)
    CTE_FLOAT       reduce using rule 40 (addOperator -> .)
    CTE_STRING      reduce using rule 40 (addOperator -> .)
    TRUE            reduce using rule 40 (addOperator -> .)
    FALSE           reduce using rule 40 (addOperator -> .)

    addOperator                    shift and go to state 214

state 189

    (33) exp1 -> MINUS . addOperator exp
    (40) addOperator -> .

    LPAREN          reduce using rule 40 (addOperator -> .)
    PLUS            reduce using rule 40 (addOperator -> .)
    MINUS           reduce using rule 40 (addOperator -> .)
    ID              reduce using rule 40 (addOperator -> .)
    CTE_INT         reduce using rule 40 (addOperator -> .)
    CTE_FLOAT       reduce using rule 40 (addOperator -> .)
    CTE_STRING      reduce using rule 40 (addOperator -> .)
    TRUE            reduce using rule 40 (addOperator -> .)
    FALSE           reduce using rule 40 (addOperator -> .)

    addOperator                    shift and go to state 215

state 190

    (38) termino1 -> DIVIDE . addOperator termino
    (40) addOperator -> .

    LPAREN          reduce using rule 40 (addOperator -> .)
    PLUS            reduce using rule 40 (addOperator -> .)
    MINUS           reduce using rule 40 (addOperator -> .)
    ID              reduce using rule 40 (addOperator -> .)
    CTE_INT         reduce using rule 40 (addOperator -> .)
    CTE_FLOAT       reduce using rule 40 (addOperator -> .)
    CTE_STRING      reduce using rule 40 (addOperator -> .)
    TRUE            reduce using rule 40 (addOperator -> .)
    FALSE           reduce using rule 40 (addOperator -> .)

    addOperator                    shift and go to state 216

state 191

    (39) termino1 -> epsilon .

    PLUS            reduce using rule 39 (termino1 -> epsilon .)
    MINUS           reduce using rule 39 (termino1 -> epsilon .)
    ID              reduce using rule 39 (termino1 -> epsilon .)
    IF              reduce using rule 39 (termino1 -> epsilon .)
    SWITCH          reduce using rule 39 (termino1 -> epsilon .)
    WHILE           reduce using rule 39 (termino1 -> epsilon .)
    FOR             reduce using rule 39 (termino1 -> epsilon .)
    PRINT           reduce using rule 39 (termino1 -> epsilon .)
    INPUT           reduce using rule 39 (termino1 -> epsilon .)
    RCURL           reduce using rule 39 (termino1 -> epsilon .)
    RETURN          reduce using rule 39 (termino1 -> epsilon .)
    CASE            reduce using rule 39 (termino1 -> epsilon .)
    DEFAULT         reduce using rule 39 (termino1 -> epsilon .)
    COMMA           reduce using rule 39 (termino1 -> epsilon .)
    RPAREN          reduce using rule 39 (termino1 -> epsilon .)
    AND             reduce using rule 39 (termino1 -> epsilon .)
    OR              reduce using rule 39 (termino1 -> epsilon .)
    LESS            reduce using rule 39 (termino1 -> epsilon .)
    GREATER         reduce using rule 39 (termino1 -> epsilon .)
    DOUBLE_EQUAL    reduce using rule 39 (termino1 -> epsilon .)
    DIFF            reduce using rule 39 (termino1 -> epsilon .)
    RBRACKET        reduce using rule 39 (termino1 -> epsilon .)


state 192

    (35) termino -> factor checkTERMPOper termino1 .

    PLUS            reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    MINUS           reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    COMMA           reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    RPAREN          reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    AND             reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    OR              reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    LESS            reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    GREATER         reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    DOUBLE_EQUAL    reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    DIFF            reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    ID              reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    IF              reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    SWITCH          reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    WHILE           reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    FOR             reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    PRINT           reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    INPUT           reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    RCURL           reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    RETURN          reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    CASE            reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    DEFAULT         reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)
    RBRACKET        reduce using rule 35 (termino -> factor checkTERMPOper termino1 .)


state 193

    (37) termino1 -> TIMES . addOperator termino
    (40) addOperator -> .

    LPAREN          reduce using rule 40 (addOperator -> .)
    PLUS            reduce using rule 40 (addOperator -> .)
    MINUS           reduce using rule 40 (addOperator -> .)
    ID              reduce using rule 40 (addOperator -> .)
    CTE_INT         reduce using rule 40 (addOperator -> .)
    CTE_FLOAT       reduce using rule 40 (addOperator -> .)
    CTE_STRING      reduce using rule 40 (addOperator -> .)
    TRUE            reduce using rule 40 (addOperator -> .)
    FALSE           reduce using rule 40 (addOperator -> .)

    addOperator                    shift and go to state 217

state 194

    (53) factor -> LPAREN factorAddFakeCover exp . RPAREN

    RPAREN          shift and go to state 218


state 195

    (98) varcte1 -> LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 219


state 196

    (97) varcte1 -> LPAREN exp . varcte2 RPAREN
    (85) llamada1 -> exp . llamada2
    (99) varcte2 -> . epsilon
    (100) varcte2 -> . COMMA exp varcte2
    (86) llamada2 -> . epsilon
    (87) llamada2 -> . COMMA exp llamada2
    (144) epsilon -> .

    COMMA           shift and go to state 221
    RPAREN          reduce using rule 144 (epsilon -> .)

    llamada2                       shift and go to state 162
    epsilon                        shift and go to state 220
    varcte2                        shift and go to state 222

state 197

    (97) varcte1 -> LPAREN exp . varcte2 RPAREN
    (99) varcte2 -> . epsilon
    (100) varcte2 -> . COMMA exp varcte2
    (144) epsilon -> .

    COMMA           shift and go to state 224
    RPAREN          reduce using rule 144 (epsilon -> .)

    epsilon                        shift and go to state 223
    varcte2                        shift and go to state 222

state 198

    (87) llamada2 -> COMMA exp . llamada2
    (86) llamada2 -> . epsilon
    (87) llamada2 -> . COMMA exp llamada2
    (144) epsilon -> .

    COMMA           shift and go to state 164
    RPAREN          reduce using rule 144 (epsilon -> .)

    llamada2                       shift and go to state 225
    epsilon                        shift and go to state 163

state 199

    (108) condicion -> IF LPAREN expresion_logica RPAREN condicion1 . condicion2 condicion3
    (111) condicion2 -> . ELSEIF condicion1 condicion2
    (112) condicion2 -> . epsilon
    (144) epsilon -> .

    ELSEIF          shift and go to state 228
    ELSE            reduce using rule 144 (epsilon -> .)
    ID              reduce using rule 144 (epsilon -> .)
    IF              reduce using rule 144 (epsilon -> .)
    SWITCH          reduce using rule 144 (epsilon -> .)
    WHILE           reduce using rule 144 (epsilon -> .)
    FOR             reduce using rule 144 (epsilon -> .)
    PRINT           reduce using rule 144 (epsilon -> .)
    INPUT           reduce using rule 144 (epsilon -> .)
    RCURL           reduce using rule 144 (epsilon -> .)
    RETURN          reduce using rule 144 (epsilon -> .)
    CASE            reduce using rule 144 (epsilon -> .)
    DEFAULT         reduce using rule 144 (epsilon -> .)

    epsilon                        shift and go to state 226
    condicion2                     shift and go to state 227

state 200

    (109) condicion1 -> bloque .

    ELSEIF          reduce using rule 109 (condicion1 -> bloque .)
    ELSE            reduce using rule 109 (condicion1 -> bloque .)
    ID              reduce using rule 109 (condicion1 -> bloque .)
    IF              reduce using rule 109 (condicion1 -> bloque .)
    SWITCH          reduce using rule 109 (condicion1 -> bloque .)
    WHILE           reduce using rule 109 (condicion1 -> bloque .)
    FOR             reduce using rule 109 (condicion1 -> bloque .)
    PRINT           reduce using rule 109 (condicion1 -> bloque .)
    INPUT           reduce using rule 109 (condicion1 -> bloque .)
    RCURL           reduce using rule 109 (condicion1 -> bloque .)
    RETURN          reduce using rule 109 (condicion1 -> bloque .)
    CASE            reduce using rule 109 (condicion1 -> bloque .)
    DEFAULT         reduce using rule 109 (condicion1 -> bloque .)


state 201

    (110) condicion1 -> LCURL . bloque RCURL
    (27) bloque -> LCURL . estatuto bloque1 RCURL
    (27) bloque -> . LCURL estatuto bloque1 RCURL
    (59) estatuto -> . asignacion
    (60) estatuto -> . llamada
    (61) estatuto -> . condicion
    (62) estatuto -> . switch
    (63) estatuto -> . while
    (64) estatuto -> . for
    (65) asignacion -> . ID EQUALS asignacion1
    (81) llamada -> . ID LPAREN llamada1 RPAREN
    (82) llamada -> . print
    (83) llamada -> . input
    (108) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (136) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (52) while -> . WHILE LPAREN expresion RPAREN bloque
    (118) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (103) print -> . PRINT LPAREN print1 RPAREN
    (115) input -> . INPUT LPAREN input1 RPAREN

    LCURL           shift and go to state 175
    ID              shift and go to state 57
    IF              shift and go to state 58
    SWITCH          shift and go to state 51
    WHILE           shift and go to state 46
    FOR             shift and go to state 55
    PRINT           shift and go to state 47
    INPUT           shift and go to state 56

    bloque                         shift and go to state 229
    for                            shift and go to state 48
    estatuto                       shift and go to state 208
    switch                         shift and go to state 60
    llamada                        shift and go to state 50
    condicion                      shift and go to state 52
    print                          shift and go to state 53
    input                          shift and go to state 54
    asignacion                     shift and go to state 59
    while                          shift and go to state 61

state 202

    (78) expresion_logica1 -> AND exp .

    LESS            reduce using rule 78 (expresion_logica1 -> AND exp .)
    GREATER         reduce using rule 78 (expresion_logica1 -> AND exp .)
    DOUBLE_EQUAL    reduce using rule 78 (expresion_logica1 -> AND exp .)
    DIFF            reduce using rule 78 (expresion_logica1 -> AND exp .)
    RPAREN          reduce using rule 78 (expresion_logica1 -> AND exp .)


state 203

    (77) expresion_logica -> exp expresion_logica1 expresion .

    RPAREN          reduce using rule 77 (expresion_logica -> exp expresion_logica1 expresion .)


state 204

    (80) expresion_logica1 -> OR exp .

    LESS            reduce using rule 80 (expresion_logica1 -> OR exp .)
    GREATER         reduce using rule 80 (expresion_logica1 -> OR exp .)
    DOUBLE_EQUAL    reduce using rule 80 (expresion_logica1 -> OR exp .)
    DIFF            reduce using rule 80 (expresion_logica1 -> OR exp .)
    RPAREN          reduce using rule 80 (expresion_logica1 -> OR exp .)


state 205

    (132) funcion5 -> ID declareFunc LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 . funcion6
    (134) funcion6 -> . RCURL
    (135) funcion6 -> . RETURN ID RCURL

    RCURL           shift and go to state 231
    RETURN          shift and go to state 232

    funcion6                       shift and go to state 230

state 206

    (127) funcion2 -> estatuto . funcion2
    (126) funcion2 -> . epsilon
    (127) funcion2 -> . estatuto funcion2
    (144) epsilon -> .
    (59) estatuto -> . asignacion
    (60) estatuto -> . llamada
    (61) estatuto -> . condicion
    (62) estatuto -> . switch
    (63) estatuto -> . while
    (64) estatuto -> . for
    (65) asignacion -> . ID EQUALS asignacion1
    (81) llamada -> . ID LPAREN llamada1 RPAREN
    (82) llamada -> . print
    (83) llamada -> . input
    (108) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (136) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (52) while -> . WHILE LPAREN expresion RPAREN bloque
    (118) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (103) print -> . PRINT LPAREN print1 RPAREN
    (115) input -> . INPUT LPAREN input1 RPAREN

    RCURL           reduce using rule 144 (epsilon -> .)
    RETURN          reduce using rule 144 (epsilon -> .)
    ID              shift and go to state 57
    IF              shift and go to state 58
    SWITCH          shift and go to state 51
    WHILE           shift and go to state 46
    FOR             shift and go to state 55
    PRINT           shift and go to state 47
    INPUT           shift and go to state 56

    funcion2                       shift and go to state 233
    for                            shift and go to state 48
    estatuto                       shift and go to state 206
    while                          shift and go to state 61
    llamada                        shift and go to state 50
    condicion                      shift and go to state 52
    print                          shift and go to state 53
    input                          shift and go to state 54
    epsilon                        shift and go to state 207
    asignacion                     shift and go to state 59
    switch                         shift and go to state 60

state 207

    (126) funcion2 -> epsilon .

    RCURL           reduce using rule 126 (funcion2 -> epsilon .)
    RETURN          reduce using rule 126 (funcion2 -> epsilon .)


state 208

    (27) bloque -> LCURL estatuto . bloque1 RCURL
    (28) bloque1 -> . estatuto bloque1
    (29) bloque1 -> . epsilon
    (59) estatuto -> . asignacion
    (60) estatuto -> . llamada
    (61) estatuto -> . condicion
    (62) estatuto -> . switch
    (63) estatuto -> . while
    (64) estatuto -> . for
    (144) epsilon -> .
    (65) asignacion -> . ID EQUALS asignacion1
    (81) llamada -> . ID LPAREN llamada1 RPAREN
    (82) llamada -> . print
    (83) llamada -> . input
    (108) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (136) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (52) while -> . WHILE LPAREN expresion RPAREN bloque
    (118) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (103) print -> . PRINT LPAREN print1 RPAREN
    (115) input -> . INPUT LPAREN input1 RPAREN

    RCURL           reduce using rule 144 (epsilon -> .)
    ID              shift and go to state 57
    IF              shift and go to state 58
    SWITCH          shift and go to state 51
    WHILE           shift and go to state 46
    FOR             shift and go to state 55
    PRINT           shift and go to state 47
    INPUT           shift and go to state 56

    for                            shift and go to state 48
    estatuto                       shift and go to state 234
    switch                         shift and go to state 60
    llamada                        shift and go to state 50
    condicion                      shift and go to state 52
    print                          shift and go to state 53
    input                          shift and go to state 54
    epsilon                        shift and go to state 235
    bloque1                        shift and go to state 236
    asignacion                     shift and go to state 59
    while                          shift and go to state 61

state 209

    (140) switch2 -> CASE varcte . COLON switch4 switch2

    COLON           shift and go to state 237


state 210

    (136) switch -> SWITCH ID switch1 LCURL switch2 switch3 . RCURL

    RCURL           shift and go to state 238


state 211

    (141) switch3 -> DEFAULT . COLON switch4

    COLON           shift and go to state 239


state 212

    (118) for -> FOR CTE_INT TO CTE_INT BY LPAREN . for1 CTE_INT RPAREN bloque
    (119) for1 -> . PLUS
    (120) for1 -> . TIMES
    (121) for1 -> . DIVIDE
    (122) for1 -> . MINUS

    PLUS            shift and go to state 242
    TIMES           shift and go to state 241
    DIVIDE          shift and go to state 240
    MINUS           shift and go to state 244

    for1                           shift and go to state 243

state 213

    (44) inicializacion_vector2 -> COMMA varcte . inicializacion_vector2
    (44) inicializacion_vector2 -> . COMMA varcte inicializacion_vector2
    (45) inicializacion_vector2 -> . epsilon
    (144) epsilon -> .

    COMMA           shift and go to state 184
    RBRACKET        reduce using rule 144 (epsilon -> .)

    inicializacion_vector2         shift and go to state 245
    epsilon                        shift and go to state 183

state 214

    (32) exp1 -> PLUS addOperator . exp
    (30) exp -> . termino checkEXPPOper exp1
    (35) termino -> . factor checkTERMPOper termino1
    (53) factor -> . LPAREN factorAddFakeCover exp RPAREN
    (54) factor -> . factor1
    (56) factor1 -> . PLUS varcte
    (57) factor1 -> . MINUS varcte
    (58) factor1 -> . varcte
    (88) varcte -> . ID varcte1
    (89) varcte -> . CTE_INT tipoINT
    (90) varcte -> . CTE_FLOAT tipoFLOAT
    (91) varcte -> . CTE_STRING tipoSTRING
    (92) varcte -> . cte_bool
    (101) cte_bool -> . TRUE
    (102) cte_bool -> . FALSE

    LPAREN          shift and go to state 113
    PLUS            shift and go to state 110
    MINUS           shift and go to state 107
    ID              shift and go to state 123
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 118
    CTE_STRING      shift and go to state 102
    TRUE            shift and go to state 106
    FALSE           shift and go to state 116

    factor1                        shift and go to state 117
    cte_bool                       shift and go to state 103
    termino                        shift and go to state 105
    exp                            shift and go to state 246
    factor                         shift and go to state 111
    varcte                         shift and go to state 108

state 215

    (33) exp1 -> MINUS addOperator . exp
    (30) exp -> . termino checkEXPPOper exp1
    (35) termino -> . factor checkTERMPOper termino1
    (53) factor -> . LPAREN factorAddFakeCover exp RPAREN
    (54) factor -> . factor1
    (56) factor1 -> . PLUS varcte
    (57) factor1 -> . MINUS varcte
    (58) factor1 -> . varcte
    (88) varcte -> . ID varcte1
    (89) varcte -> . CTE_INT tipoINT
    (90) varcte -> . CTE_FLOAT tipoFLOAT
    (91) varcte -> . CTE_STRING tipoSTRING
    (92) varcte -> . cte_bool
    (101) cte_bool -> . TRUE
    (102) cte_bool -> . FALSE

    LPAREN          shift and go to state 113
    PLUS            shift and go to state 110
    MINUS           shift and go to state 107
    ID              shift and go to state 123
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 118
    CTE_STRING      shift and go to state 102
    TRUE            shift and go to state 106
    FALSE           shift and go to state 116

    factor1                        shift and go to state 117
    cte_bool                       shift and go to state 103
    termino                        shift and go to state 105
    exp                            shift and go to state 247
    factor                         shift and go to state 111
    varcte                         shift and go to state 108

state 216

    (38) termino1 -> DIVIDE addOperator . termino
    (35) termino -> . factor checkTERMPOper termino1
    (53) factor -> . LPAREN factorAddFakeCover exp RPAREN
    (54) factor -> . factor1
    (56) factor1 -> . PLUS varcte
    (57) factor1 -> . MINUS varcte
    (58) factor1 -> . varcte
    (88) varcte -> . ID varcte1
    (89) varcte -> . CTE_INT tipoINT
    (90) varcte -> . CTE_FLOAT tipoFLOAT
    (91) varcte -> . CTE_STRING tipoSTRING
    (92) varcte -> . cte_bool
    (101) cte_bool -> . TRUE
    (102) cte_bool -> . FALSE

    LPAREN          shift and go to state 113
    PLUS            shift and go to state 110
    MINUS           shift and go to state 107
    ID              shift and go to state 123
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 118
    CTE_STRING      shift and go to state 102
    TRUE            shift and go to state 106
    FALSE           shift and go to state 116

    factor1                        shift and go to state 117
    cte_bool                       shift and go to state 103
    termino                        shift and go to state 248
    factor                         shift and go to state 111
    varcte                         shift and go to state 108

state 217

    (37) termino1 -> TIMES addOperator . termino
    (35) termino -> . factor checkTERMPOper termino1
    (53) factor -> . LPAREN factorAddFakeCover exp RPAREN
    (54) factor -> . factor1
    (56) factor1 -> . PLUS varcte
    (57) factor1 -> . MINUS varcte
    (58) factor1 -> . varcte
    (88) varcte -> . ID varcte1
    (89) varcte -> . CTE_INT tipoINT
    (90) varcte -> . CTE_FLOAT tipoFLOAT
    (91) varcte -> . CTE_STRING tipoSTRING
    (92) varcte -> . cte_bool
    (101) cte_bool -> . TRUE
    (102) cte_bool -> . FALSE

    LPAREN          shift and go to state 113
    PLUS            shift and go to state 110
    MINUS           shift and go to state 107
    ID              shift and go to state 123
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 118
    CTE_STRING      shift and go to state 102
    TRUE            shift and go to state 106
    FALSE           shift and go to state 116

    factor1                        shift and go to state 117
    cte_bool                       shift and go to state 103
    termino                        shift and go to state 249
    factor                         shift and go to state 111
    varcte                         shift and go to state 108

state 218

    (53) factor -> LPAREN factorAddFakeCover exp RPAREN .

    TIMES           reduce using rule 53 (factor -> LPAREN factorAddFakeCover exp RPAREN .)
    DIVIDE          reduce using rule 53 (factor -> LPAREN factorAddFakeCover exp RPAREN .)
    PLUS            reduce using rule 53 (factor -> LPAREN factorAddFakeCover exp RPAREN .)
    MINUS           reduce using rule 53 (factor -> LPAREN factorAddFakeCover exp RPAREN .)
    COMMA           reduce using rule 53 (factor -> LPAREN factorAddFakeCover exp RPAREN .)
    RPAREN          reduce using rule 53 (factor -> LPAREN factorAddFakeCover exp RPAREN .)
    ID              reduce using rule 53 (factor -> LPAREN factorAddFakeCover exp RPAREN .)
    IF              reduce using rule 53 (factor -> LPAREN factorAddFakeCover exp RPAREN .)
    SWITCH          reduce using rule 53 (factor -> LPAREN factorAddFakeCover exp RPAREN .)
    WHILE           reduce using rule 53 (factor -> LPAREN factorAddFakeCover exp RPAREN .)
    FOR             reduce using rule 53 (factor -> LPAREN factorAddFakeCover exp RPAREN .)
    PRINT           reduce using rule 53 (factor -> LPAREN factorAddFakeCover exp RPAREN .)
    INPUT           reduce using rule 53 (factor -> LPAREN factorAddFakeCover exp RPAREN .)
    RCURL           reduce using rule 53 (factor -> LPAREN factorAddFakeCover exp RPAREN .)
    RETURN          reduce using rule 53 (factor -> LPAREN factorAddFakeCover exp RPAREN .)
    CASE            reduce using rule 53 (factor -> LPAREN factorAddFakeCover exp RPAREN .)
    DEFAULT         reduce using rule 53 (factor -> LPAREN factorAddFakeCover exp RPAREN .)
    RBRACKET        reduce using rule 53 (factor -> LPAREN factorAddFakeCover exp RPAREN .)
    AND             reduce using rule 53 (factor -> LPAREN factorAddFakeCover exp RPAREN .)
    OR              reduce using rule 53 (factor -> LPAREN factorAddFakeCover exp RPAREN .)
    LESS            reduce using rule 53 (factor -> LPAREN factorAddFakeCover exp RPAREN .)
    GREATER         reduce using rule 53 (factor -> LPAREN factorAddFakeCover exp RPAREN .)
    DOUBLE_EQUAL    reduce using rule 53 (factor -> LPAREN factorAddFakeCover exp RPAREN .)
    DIFF            reduce using rule 53 (factor -> LPAREN factorAddFakeCover exp RPAREN .)


state 219

    (98) varcte1 -> LBRACKET exp RBRACKET .

    TIMES           reduce using rule 98 (varcte1 -> LBRACKET exp RBRACKET .)
    DIVIDE          reduce using rule 98 (varcte1 -> LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 98 (varcte1 -> LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 98 (varcte1 -> LBRACKET exp RBRACKET .)
    COMMA           reduce using rule 98 (varcte1 -> LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 98 (varcte1 -> LBRACKET exp RBRACKET .)
    AND             reduce using rule 98 (varcte1 -> LBRACKET exp RBRACKET .)
    OR              reduce using rule 98 (varcte1 -> LBRACKET exp RBRACKET .)
    LESS            reduce using rule 98 (varcte1 -> LBRACKET exp RBRACKET .)
    GREATER         reduce using rule 98 (varcte1 -> LBRACKET exp RBRACKET .)
    DOUBLE_EQUAL    reduce using rule 98 (varcte1 -> LBRACKET exp RBRACKET .)
    DIFF            reduce using rule 98 (varcte1 -> LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 98 (varcte1 -> LBRACKET exp RBRACKET .)
    ID              reduce using rule 98 (varcte1 -> LBRACKET exp RBRACKET .)
    IF              reduce using rule 98 (varcte1 -> LBRACKET exp RBRACKET .)
    SWITCH          reduce using rule 98 (varcte1 -> LBRACKET exp RBRACKET .)
    WHILE           reduce using rule 98 (varcte1 -> LBRACKET exp RBRACKET .)
    FOR             reduce using rule 98 (varcte1 -> LBRACKET exp RBRACKET .)
    PRINT           reduce using rule 98 (varcte1 -> LBRACKET exp RBRACKET .)
    INPUT           reduce using rule 98 (varcte1 -> LBRACKET exp RBRACKET .)
    RCURL           reduce using rule 98 (varcte1 -> LBRACKET exp RBRACKET .)
    RETURN          reduce using rule 98 (varcte1 -> LBRACKET exp RBRACKET .)
    CASE            reduce using rule 98 (varcte1 -> LBRACKET exp RBRACKET .)
    DEFAULT         reduce using rule 98 (varcte1 -> LBRACKET exp RBRACKET .)
    COLON           reduce using rule 98 (varcte1 -> LBRACKET exp RBRACKET .)


state 220

    (99) varcte2 -> epsilon .
    (86) llamada2 -> epsilon .

  ! reduce/reduce conflict for RPAREN resolved using rule 86 (llamada2 -> epsilon .)
    RPAREN          reduce using rule 86 (llamada2 -> epsilon .)

  ! RPAREN          [ reduce using rule 99 (varcte2 -> epsilon .) ]


state 221

    (100) varcte2 -> COMMA . exp varcte2
    (87) llamada2 -> COMMA . exp llamada2
    (30) exp -> . termino checkEXPPOper exp1
    (35) termino -> . factor checkTERMPOper termino1
    (53) factor -> . LPAREN factorAddFakeCover exp RPAREN
    (54) factor -> . factor1
    (56) factor1 -> . PLUS varcte
    (57) factor1 -> . MINUS varcte
    (58) factor1 -> . varcte
    (88) varcte -> . ID varcte1
    (89) varcte -> . CTE_INT tipoINT
    (90) varcte -> . CTE_FLOAT tipoFLOAT
    (91) varcte -> . CTE_STRING tipoSTRING
    (92) varcte -> . cte_bool
    (101) cte_bool -> . TRUE
    (102) cte_bool -> . FALSE

    LPAREN          shift and go to state 113
    PLUS            shift and go to state 110
    MINUS           shift and go to state 107
    ID              shift and go to state 123
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 118
    CTE_STRING      shift and go to state 102
    TRUE            shift and go to state 106
    FALSE           shift and go to state 116

    factor1                        shift and go to state 117
    cte_bool                       shift and go to state 103
    termino                        shift and go to state 105
    exp                            shift and go to state 250
    factor                         shift and go to state 111
    varcte                         shift and go to state 108

state 222

    (97) varcte1 -> LPAREN exp varcte2 . RPAREN

    RPAREN          shift and go to state 251


state 223

    (99) varcte2 -> epsilon .

    RPAREN          reduce using rule 99 (varcte2 -> epsilon .)


state 224

    (100) varcte2 -> COMMA . exp varcte2
    (30) exp -> . termino checkEXPPOper exp1
    (35) termino -> . factor checkTERMPOper termino1
    (53) factor -> . LPAREN factorAddFakeCover exp RPAREN
    (54) factor -> . factor1
    (56) factor1 -> . PLUS varcte
    (57) factor1 -> . MINUS varcte
    (58) factor1 -> . varcte
    (88) varcte -> . ID varcte1
    (89) varcte -> . CTE_INT tipoINT
    (90) varcte -> . CTE_FLOAT tipoFLOAT
    (91) varcte -> . CTE_STRING tipoSTRING
    (92) varcte -> . cte_bool
    (101) cte_bool -> . TRUE
    (102) cte_bool -> . FALSE

    LPAREN          shift and go to state 113
    PLUS            shift and go to state 110
    MINUS           shift and go to state 107
    ID              shift and go to state 123
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 118
    CTE_STRING      shift and go to state 102
    TRUE            shift and go to state 106
    FALSE           shift and go to state 116

    factor1                        shift and go to state 117
    cte_bool                       shift and go to state 103
    termino                        shift and go to state 105
    exp                            shift and go to state 252
    factor                         shift and go to state 111
    varcte                         shift and go to state 108

state 225

    (87) llamada2 -> COMMA exp llamada2 .

    RPAREN          reduce using rule 87 (llamada2 -> COMMA exp llamada2 .)


state 226

    (112) condicion2 -> epsilon .

    ELSE            reduce using rule 112 (condicion2 -> epsilon .)
    ID              reduce using rule 112 (condicion2 -> epsilon .)
    IF              reduce using rule 112 (condicion2 -> epsilon .)
    SWITCH          reduce using rule 112 (condicion2 -> epsilon .)
    WHILE           reduce using rule 112 (condicion2 -> epsilon .)
    FOR             reduce using rule 112 (condicion2 -> epsilon .)
    PRINT           reduce using rule 112 (condicion2 -> epsilon .)
    INPUT           reduce using rule 112 (condicion2 -> epsilon .)
    RCURL           reduce using rule 112 (condicion2 -> epsilon .)
    RETURN          reduce using rule 112 (condicion2 -> epsilon .)
    CASE            reduce using rule 112 (condicion2 -> epsilon .)
    DEFAULT         reduce using rule 112 (condicion2 -> epsilon .)


state 227

    (108) condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 . condicion3
    (113) condicion3 -> . ELSE condicion1
    (114) condicion3 -> . epsilon
    (144) epsilon -> .

    ELSE            shift and go to state 254
    ID              reduce using rule 144 (epsilon -> .)
    IF              reduce using rule 144 (epsilon -> .)
    SWITCH          reduce using rule 144 (epsilon -> .)
    WHILE           reduce using rule 144 (epsilon -> .)
    FOR             reduce using rule 144 (epsilon -> .)
    PRINT           reduce using rule 144 (epsilon -> .)
    INPUT           reduce using rule 144 (epsilon -> .)
    RCURL           reduce using rule 144 (epsilon -> .)
    RETURN          reduce using rule 144 (epsilon -> .)
    CASE            reduce using rule 144 (epsilon -> .)
    DEFAULT         reduce using rule 144 (epsilon -> .)

    epsilon                        shift and go to state 253
    condicion3                     shift and go to state 255

state 228

    (111) condicion2 -> ELSEIF . condicion1 condicion2
    (109) condicion1 -> . bloque
    (110) condicion1 -> . LCURL bloque RCURL
    (27) bloque -> . LCURL estatuto bloque1 RCURL

    LCURL           shift and go to state 201

    bloque                         shift and go to state 200
    condicion1                     shift and go to state 256

state 229

    (110) condicion1 -> LCURL bloque . RCURL

    RCURL           shift and go to state 257


state 230

    (132) funcion5 -> ID declareFunc LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 funcion6 .

    FUNCTION        reduce using rule 132 (funcion5 -> ID declareFunc LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 funcion6 .)
    MAIN            reduce using rule 132 (funcion5 -> ID declareFunc LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 funcion6 .)


state 231

    (134) funcion6 -> RCURL .

    FUNCTION        reduce using rule 134 (funcion6 -> RCURL .)
    MAIN            reduce using rule 134 (funcion6 -> RCURL .)


state 232

    (135) funcion6 -> RETURN . ID RCURL

    ID              shift and go to state 258


state 233

    (127) funcion2 -> estatuto funcion2 .

    RCURL           reduce using rule 127 (funcion2 -> estatuto funcion2 .)
    RETURN          reduce using rule 127 (funcion2 -> estatuto funcion2 .)


state 234

    (28) bloque1 -> estatuto . bloque1
    (28) bloque1 -> . estatuto bloque1
    (29) bloque1 -> . epsilon
    (59) estatuto -> . asignacion
    (60) estatuto -> . llamada
    (61) estatuto -> . condicion
    (62) estatuto -> . switch
    (63) estatuto -> . while
    (64) estatuto -> . for
    (144) epsilon -> .
    (65) asignacion -> . ID EQUALS asignacion1
    (81) llamada -> . ID LPAREN llamada1 RPAREN
    (82) llamada -> . print
    (83) llamada -> . input
    (108) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (136) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (52) while -> . WHILE LPAREN expresion RPAREN bloque
    (118) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (103) print -> . PRINT LPAREN print1 RPAREN
    (115) input -> . INPUT LPAREN input1 RPAREN

    RCURL           reduce using rule 144 (epsilon -> .)
    ID              shift and go to state 57
    IF              shift and go to state 58
    SWITCH          shift and go to state 51
    WHILE           shift and go to state 46
    FOR             shift and go to state 55
    PRINT           shift and go to state 47
    INPUT           shift and go to state 56

    for                            shift and go to state 48
    estatuto                       shift and go to state 234
    switch                         shift and go to state 60
    llamada                        shift and go to state 50
    condicion                      shift and go to state 52
    print                          shift and go to state 53
    input                          shift and go to state 54
    epsilon                        shift and go to state 235
    bloque1                        shift and go to state 259
    asignacion                     shift and go to state 59
    while                          shift and go to state 61

state 235

    (29) bloque1 -> epsilon .

    RCURL           reduce using rule 29 (bloque1 -> epsilon .)


state 236

    (27) bloque -> LCURL estatuto bloque1 . RCURL

    RCURL           shift and go to state 260


state 237

    (140) switch2 -> CASE varcte COLON . switch4 switch2
    (142) switch4 -> . LCURL PASS RCURL
    (143) switch4 -> . estatuto
    (59) estatuto -> . asignacion
    (60) estatuto -> . llamada
    (61) estatuto -> . condicion
    (62) estatuto -> . switch
    (63) estatuto -> . while
    (64) estatuto -> . for
    (65) asignacion -> . ID EQUALS asignacion1
    (81) llamada -> . ID LPAREN llamada1 RPAREN
    (82) llamada -> . print
    (83) llamada -> . input
    (108) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (136) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (52) while -> . WHILE LPAREN expresion RPAREN bloque
    (118) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (103) print -> . PRINT LPAREN print1 RPAREN
    (115) input -> . INPUT LPAREN input1 RPAREN

    LCURL           shift and go to state 261
    ID              shift and go to state 57
    IF              shift and go to state 58
    SWITCH          shift and go to state 51
    WHILE           shift and go to state 46
    FOR             shift and go to state 55
    PRINT           shift and go to state 47
    INPUT           shift and go to state 56

    for                            shift and go to state 48
    estatuto                       shift and go to state 262
    switch                         shift and go to state 60
    llamada                        shift and go to state 50
    condicion                      shift and go to state 52
    print                          shift and go to state 53
    input                          shift and go to state 54
    asignacion                     shift and go to state 59
    switch4                        shift and go to state 263
    while                          shift and go to state 61

state 238

    (136) switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .

    ID              reduce using rule 136 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    IF              reduce using rule 136 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    SWITCH          reduce using rule 136 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    WHILE           reduce using rule 136 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    FOR             reduce using rule 136 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    PRINT           reduce using rule 136 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    INPUT           reduce using rule 136 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    RCURL           reduce using rule 136 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    RETURN          reduce using rule 136 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    CASE            reduce using rule 136 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    DEFAULT         reduce using rule 136 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)


state 239

    (141) switch3 -> DEFAULT COLON . switch4
    (142) switch4 -> . LCURL PASS RCURL
    (143) switch4 -> . estatuto
    (59) estatuto -> . asignacion
    (60) estatuto -> . llamada
    (61) estatuto -> . condicion
    (62) estatuto -> . switch
    (63) estatuto -> . while
    (64) estatuto -> . for
    (65) asignacion -> . ID EQUALS asignacion1
    (81) llamada -> . ID LPAREN llamada1 RPAREN
    (82) llamada -> . print
    (83) llamada -> . input
    (108) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (136) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (52) while -> . WHILE LPAREN expresion RPAREN bloque
    (118) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (103) print -> . PRINT LPAREN print1 RPAREN
    (115) input -> . INPUT LPAREN input1 RPAREN

    LCURL           shift and go to state 261
    ID              shift and go to state 57
    IF              shift and go to state 58
    SWITCH          shift and go to state 51
    WHILE           shift and go to state 46
    FOR             shift and go to state 55
    PRINT           shift and go to state 47
    INPUT           shift and go to state 56

    for                            shift and go to state 48
    estatuto                       shift and go to state 262
    switch                         shift and go to state 60
    llamada                        shift and go to state 50
    condicion                      shift and go to state 52
    print                          shift and go to state 53
    input                          shift and go to state 54
    asignacion                     shift and go to state 59
    switch4                        shift and go to state 264
    while                          shift and go to state 61

state 240

    (121) for1 -> DIVIDE .

    CTE_INT         reduce using rule 121 (for1 -> DIVIDE .)


state 241

    (120) for1 -> TIMES .

    CTE_INT         reduce using rule 120 (for1 -> TIMES .)


state 242

    (119) for1 -> PLUS .

    CTE_INT         reduce using rule 119 (for1 -> PLUS .)


state 243

    (118) for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 . CTE_INT RPAREN bloque

    CTE_INT         shift and go to state 265


state 244

    (122) for1 -> MINUS .

    CTE_INT         reduce using rule 122 (for1 -> MINUS .)


state 245

    (44) inicializacion_vector2 -> COMMA varcte inicializacion_vector2 .

    RBRACKET        reduce using rule 44 (inicializacion_vector2 -> COMMA varcte inicializacion_vector2 .)


state 246

    (32) exp1 -> PLUS addOperator exp .

    ID              reduce using rule 32 (exp1 -> PLUS addOperator exp .)
    IF              reduce using rule 32 (exp1 -> PLUS addOperator exp .)
    SWITCH          reduce using rule 32 (exp1 -> PLUS addOperator exp .)
    WHILE           reduce using rule 32 (exp1 -> PLUS addOperator exp .)
    FOR             reduce using rule 32 (exp1 -> PLUS addOperator exp .)
    PRINT           reduce using rule 32 (exp1 -> PLUS addOperator exp .)
    INPUT           reduce using rule 32 (exp1 -> PLUS addOperator exp .)
    RCURL           reduce using rule 32 (exp1 -> PLUS addOperator exp .)
    RETURN          reduce using rule 32 (exp1 -> PLUS addOperator exp .)
    CASE            reduce using rule 32 (exp1 -> PLUS addOperator exp .)
    DEFAULT         reduce using rule 32 (exp1 -> PLUS addOperator exp .)
    COMMA           reduce using rule 32 (exp1 -> PLUS addOperator exp .)
    RPAREN          reduce using rule 32 (exp1 -> PLUS addOperator exp .)
    AND             reduce using rule 32 (exp1 -> PLUS addOperator exp .)
    OR              reduce using rule 32 (exp1 -> PLUS addOperator exp .)
    LESS            reduce using rule 32 (exp1 -> PLUS addOperator exp .)
    GREATER         reduce using rule 32 (exp1 -> PLUS addOperator exp .)
    DOUBLE_EQUAL    reduce using rule 32 (exp1 -> PLUS addOperator exp .)
    DIFF            reduce using rule 32 (exp1 -> PLUS addOperator exp .)
    RBRACKET        reduce using rule 32 (exp1 -> PLUS addOperator exp .)


state 247

    (33) exp1 -> MINUS addOperator exp .

    ID              reduce using rule 33 (exp1 -> MINUS addOperator exp .)
    IF              reduce using rule 33 (exp1 -> MINUS addOperator exp .)
    SWITCH          reduce using rule 33 (exp1 -> MINUS addOperator exp .)
    WHILE           reduce using rule 33 (exp1 -> MINUS addOperator exp .)
    FOR             reduce using rule 33 (exp1 -> MINUS addOperator exp .)
    PRINT           reduce using rule 33 (exp1 -> MINUS addOperator exp .)
    INPUT           reduce using rule 33 (exp1 -> MINUS addOperator exp .)
    RCURL           reduce using rule 33 (exp1 -> MINUS addOperator exp .)
    RETURN          reduce using rule 33 (exp1 -> MINUS addOperator exp .)
    CASE            reduce using rule 33 (exp1 -> MINUS addOperator exp .)
    DEFAULT         reduce using rule 33 (exp1 -> MINUS addOperator exp .)
    COMMA           reduce using rule 33 (exp1 -> MINUS addOperator exp .)
    RPAREN          reduce using rule 33 (exp1 -> MINUS addOperator exp .)
    AND             reduce using rule 33 (exp1 -> MINUS addOperator exp .)
    OR              reduce using rule 33 (exp1 -> MINUS addOperator exp .)
    LESS            reduce using rule 33 (exp1 -> MINUS addOperator exp .)
    GREATER         reduce using rule 33 (exp1 -> MINUS addOperator exp .)
    DOUBLE_EQUAL    reduce using rule 33 (exp1 -> MINUS addOperator exp .)
    DIFF            reduce using rule 33 (exp1 -> MINUS addOperator exp .)
    RBRACKET        reduce using rule 33 (exp1 -> MINUS addOperator exp .)


state 248

    (38) termino1 -> DIVIDE addOperator termino .

    PLUS            reduce using rule 38 (termino1 -> DIVIDE addOperator termino .)
    MINUS           reduce using rule 38 (termino1 -> DIVIDE addOperator termino .)
    ID              reduce using rule 38 (termino1 -> DIVIDE addOperator termino .)
    IF              reduce using rule 38 (termino1 -> DIVIDE addOperator termino .)
    SWITCH          reduce using rule 38 (termino1 -> DIVIDE addOperator termino .)
    WHILE           reduce using rule 38 (termino1 -> DIVIDE addOperator termino .)
    FOR             reduce using rule 38 (termino1 -> DIVIDE addOperator termino .)
    PRINT           reduce using rule 38 (termino1 -> DIVIDE addOperator termino .)
    INPUT           reduce using rule 38 (termino1 -> DIVIDE addOperator termino .)
    RCURL           reduce using rule 38 (termino1 -> DIVIDE addOperator termino .)
    RETURN          reduce using rule 38 (termino1 -> DIVIDE addOperator termino .)
    CASE            reduce using rule 38 (termino1 -> DIVIDE addOperator termino .)
    DEFAULT         reduce using rule 38 (termino1 -> DIVIDE addOperator termino .)
    COMMA           reduce using rule 38 (termino1 -> DIVIDE addOperator termino .)
    RPAREN          reduce using rule 38 (termino1 -> DIVIDE addOperator termino .)
    AND             reduce using rule 38 (termino1 -> DIVIDE addOperator termino .)
    OR              reduce using rule 38 (termino1 -> DIVIDE addOperator termino .)
    LESS            reduce using rule 38 (termino1 -> DIVIDE addOperator termino .)
    GREATER         reduce using rule 38 (termino1 -> DIVIDE addOperator termino .)
    DOUBLE_EQUAL    reduce using rule 38 (termino1 -> DIVIDE addOperator termino .)
    DIFF            reduce using rule 38 (termino1 -> DIVIDE addOperator termino .)
    RBRACKET        reduce using rule 38 (termino1 -> DIVIDE addOperator termino .)


state 249

    (37) termino1 -> TIMES addOperator termino .

    PLUS            reduce using rule 37 (termino1 -> TIMES addOperator termino .)
    MINUS           reduce using rule 37 (termino1 -> TIMES addOperator termino .)
    ID              reduce using rule 37 (termino1 -> TIMES addOperator termino .)
    IF              reduce using rule 37 (termino1 -> TIMES addOperator termino .)
    SWITCH          reduce using rule 37 (termino1 -> TIMES addOperator termino .)
    WHILE           reduce using rule 37 (termino1 -> TIMES addOperator termino .)
    FOR             reduce using rule 37 (termino1 -> TIMES addOperator termino .)
    PRINT           reduce using rule 37 (termino1 -> TIMES addOperator termino .)
    INPUT           reduce using rule 37 (termino1 -> TIMES addOperator termino .)
    RCURL           reduce using rule 37 (termino1 -> TIMES addOperator termino .)
    RETURN          reduce using rule 37 (termino1 -> TIMES addOperator termino .)
    CASE            reduce using rule 37 (termino1 -> TIMES addOperator termino .)
    DEFAULT         reduce using rule 37 (termino1 -> TIMES addOperator termino .)
    COMMA           reduce using rule 37 (termino1 -> TIMES addOperator termino .)
    RPAREN          reduce using rule 37 (termino1 -> TIMES addOperator termino .)
    AND             reduce using rule 37 (termino1 -> TIMES addOperator termino .)
    OR              reduce using rule 37 (termino1 -> TIMES addOperator termino .)
    LESS            reduce using rule 37 (termino1 -> TIMES addOperator termino .)
    GREATER         reduce using rule 37 (termino1 -> TIMES addOperator termino .)
    DOUBLE_EQUAL    reduce using rule 37 (termino1 -> TIMES addOperator termino .)
    DIFF            reduce using rule 37 (termino1 -> TIMES addOperator termino .)
    RBRACKET        reduce using rule 37 (termino1 -> TIMES addOperator termino .)


state 250

    (100) varcte2 -> COMMA exp . varcte2
    (87) llamada2 -> COMMA exp . llamada2
    (99) varcte2 -> . epsilon
    (100) varcte2 -> . COMMA exp varcte2
    (86) llamada2 -> . epsilon
    (87) llamada2 -> . COMMA exp llamada2
    (144) epsilon -> .

    COMMA           shift and go to state 221
    RPAREN          reduce using rule 144 (epsilon -> .)

    llamada2                       shift and go to state 225
    epsilon                        shift and go to state 220
    varcte2                        shift and go to state 266

state 251

    (97) varcte1 -> LPAREN exp varcte2 RPAREN .

    TIMES           reduce using rule 97 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    DIVIDE          reduce using rule 97 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    PLUS            reduce using rule 97 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    MINUS           reduce using rule 97 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    COMMA           reduce using rule 97 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    RPAREN          reduce using rule 97 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    AND             reduce using rule 97 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    OR              reduce using rule 97 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    LESS            reduce using rule 97 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    GREATER         reduce using rule 97 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    DOUBLE_EQUAL    reduce using rule 97 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    DIFF            reduce using rule 97 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    RBRACKET        reduce using rule 97 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    ID              reduce using rule 97 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    IF              reduce using rule 97 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    SWITCH          reduce using rule 97 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    WHILE           reduce using rule 97 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    FOR             reduce using rule 97 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    PRINT           reduce using rule 97 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    INPUT           reduce using rule 97 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    RCURL           reduce using rule 97 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    RETURN          reduce using rule 97 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    CASE            reduce using rule 97 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    DEFAULT         reduce using rule 97 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    COLON           reduce using rule 97 (varcte1 -> LPAREN exp varcte2 RPAREN .)


state 252

    (100) varcte2 -> COMMA exp . varcte2
    (99) varcte2 -> . epsilon
    (100) varcte2 -> . COMMA exp varcte2
    (144) epsilon -> .

    COMMA           shift and go to state 224
    RPAREN          reduce using rule 144 (epsilon -> .)

    epsilon                        shift and go to state 223
    varcte2                        shift and go to state 266

state 253

    (114) condicion3 -> epsilon .

    ID              reduce using rule 114 (condicion3 -> epsilon .)
    IF              reduce using rule 114 (condicion3 -> epsilon .)
    SWITCH          reduce using rule 114 (condicion3 -> epsilon .)
    WHILE           reduce using rule 114 (condicion3 -> epsilon .)
    FOR             reduce using rule 114 (condicion3 -> epsilon .)
    PRINT           reduce using rule 114 (condicion3 -> epsilon .)
    INPUT           reduce using rule 114 (condicion3 -> epsilon .)
    RCURL           reduce using rule 114 (condicion3 -> epsilon .)
    RETURN          reduce using rule 114 (condicion3 -> epsilon .)
    CASE            reduce using rule 114 (condicion3 -> epsilon .)
    DEFAULT         reduce using rule 114 (condicion3 -> epsilon .)


state 254

    (113) condicion3 -> ELSE . condicion1
    (109) condicion1 -> . bloque
    (110) condicion1 -> . LCURL bloque RCURL
    (27) bloque -> . LCURL estatuto bloque1 RCURL

    LCURL           shift and go to state 201

    bloque                         shift and go to state 200
    condicion1                     shift and go to state 267

state 255

    (108) condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .

    ID              reduce using rule 108 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    IF              reduce using rule 108 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    SWITCH          reduce using rule 108 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    WHILE           reduce using rule 108 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    FOR             reduce using rule 108 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    PRINT           reduce using rule 108 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    INPUT           reduce using rule 108 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    RCURL           reduce using rule 108 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    RETURN          reduce using rule 108 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    CASE            reduce using rule 108 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    DEFAULT         reduce using rule 108 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)


state 256

    (111) condicion2 -> ELSEIF condicion1 . condicion2
    (111) condicion2 -> . ELSEIF condicion1 condicion2
    (112) condicion2 -> . epsilon
    (144) epsilon -> .

    ELSEIF          shift and go to state 228
    ELSE            reduce using rule 144 (epsilon -> .)
    ID              reduce using rule 144 (epsilon -> .)
    IF              reduce using rule 144 (epsilon -> .)
    SWITCH          reduce using rule 144 (epsilon -> .)
    WHILE           reduce using rule 144 (epsilon -> .)
    FOR             reduce using rule 144 (epsilon -> .)
    PRINT           reduce using rule 144 (epsilon -> .)
    INPUT           reduce using rule 144 (epsilon -> .)
    RCURL           reduce using rule 144 (epsilon -> .)
    RETURN          reduce using rule 144 (epsilon -> .)
    CASE            reduce using rule 144 (epsilon -> .)
    DEFAULT         reduce using rule 144 (epsilon -> .)

    epsilon                        shift and go to state 226
    condicion2                     shift and go to state 268

state 257

    (110) condicion1 -> LCURL bloque RCURL .

    ELSEIF          reduce using rule 110 (condicion1 -> LCURL bloque RCURL .)
    ELSE            reduce using rule 110 (condicion1 -> LCURL bloque RCURL .)
    ID              reduce using rule 110 (condicion1 -> LCURL bloque RCURL .)
    IF              reduce using rule 110 (condicion1 -> LCURL bloque RCURL .)
    SWITCH          reduce using rule 110 (condicion1 -> LCURL bloque RCURL .)
    WHILE           reduce using rule 110 (condicion1 -> LCURL bloque RCURL .)
    FOR             reduce using rule 110 (condicion1 -> LCURL bloque RCURL .)
    PRINT           reduce using rule 110 (condicion1 -> LCURL bloque RCURL .)
    INPUT           reduce using rule 110 (condicion1 -> LCURL bloque RCURL .)
    RCURL           reduce using rule 110 (condicion1 -> LCURL bloque RCURL .)
    RETURN          reduce using rule 110 (condicion1 -> LCURL bloque RCURL .)
    CASE            reduce using rule 110 (condicion1 -> LCURL bloque RCURL .)
    DEFAULT         reduce using rule 110 (condicion1 -> LCURL bloque RCURL .)


state 258

    (135) funcion6 -> RETURN ID . RCURL

    RCURL           shift and go to state 269


state 259

    (28) bloque1 -> estatuto bloque1 .

    RCURL           reduce using rule 28 (bloque1 -> estatuto bloque1 .)


state 260

    (27) bloque -> LCURL estatuto bloque1 RCURL .

    RCURL           reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    ID              reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    IF              reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    SWITCH          reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    WHILE           reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    FOR             reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    PRINT           reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    INPUT           reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    RETURN          reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    CASE            reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    DEFAULT         reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    ELSEIF          reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    ELSE            reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)


state 261

    (142) switch4 -> LCURL . PASS RCURL

    PASS            shift and go to state 270


state 262

    (143) switch4 -> estatuto .

    CASE            reduce using rule 143 (switch4 -> estatuto .)
    DEFAULT         reduce using rule 143 (switch4 -> estatuto .)
    RCURL           reduce using rule 143 (switch4 -> estatuto .)


state 263

    (140) switch2 -> CASE varcte COLON switch4 . switch2
    (139) switch2 -> . epsilon
    (140) switch2 -> . CASE varcte COLON switch4 switch2
    (144) epsilon -> .

    CASE            shift and go to state 177
    DEFAULT         reduce using rule 144 (epsilon -> .)

    switch2                        shift and go to state 271
    epsilon                        shift and go to state 179

state 264

    (141) switch3 -> DEFAULT COLON switch4 .

    RCURL           reduce using rule 141 (switch3 -> DEFAULT COLON switch4 .)


state 265

    (118) for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT . RPAREN bloque

    RPAREN          shift and go to state 272


state 266

    (100) varcte2 -> COMMA exp varcte2 .

    RPAREN          reduce using rule 100 (varcte2 -> COMMA exp varcte2 .)


state 267

    (113) condicion3 -> ELSE condicion1 .

    ID              reduce using rule 113 (condicion3 -> ELSE condicion1 .)
    IF              reduce using rule 113 (condicion3 -> ELSE condicion1 .)
    SWITCH          reduce using rule 113 (condicion3 -> ELSE condicion1 .)
    WHILE           reduce using rule 113 (condicion3 -> ELSE condicion1 .)
    FOR             reduce using rule 113 (condicion3 -> ELSE condicion1 .)
    PRINT           reduce using rule 113 (condicion3 -> ELSE condicion1 .)
    INPUT           reduce using rule 113 (condicion3 -> ELSE condicion1 .)
    RCURL           reduce using rule 113 (condicion3 -> ELSE condicion1 .)
    RETURN          reduce using rule 113 (condicion3 -> ELSE condicion1 .)
    CASE            reduce using rule 113 (condicion3 -> ELSE condicion1 .)
    DEFAULT         reduce using rule 113 (condicion3 -> ELSE condicion1 .)


state 268

    (111) condicion2 -> ELSEIF condicion1 condicion2 .

    ELSE            reduce using rule 111 (condicion2 -> ELSEIF condicion1 condicion2 .)
    ID              reduce using rule 111 (condicion2 -> ELSEIF condicion1 condicion2 .)
    IF              reduce using rule 111 (condicion2 -> ELSEIF condicion1 condicion2 .)
    SWITCH          reduce using rule 111 (condicion2 -> ELSEIF condicion1 condicion2 .)
    WHILE           reduce using rule 111 (condicion2 -> ELSEIF condicion1 condicion2 .)
    FOR             reduce using rule 111 (condicion2 -> ELSEIF condicion1 condicion2 .)
    PRINT           reduce using rule 111 (condicion2 -> ELSEIF condicion1 condicion2 .)
    INPUT           reduce using rule 111 (condicion2 -> ELSEIF condicion1 condicion2 .)
    RCURL           reduce using rule 111 (condicion2 -> ELSEIF condicion1 condicion2 .)
    RETURN          reduce using rule 111 (condicion2 -> ELSEIF condicion1 condicion2 .)
    CASE            reduce using rule 111 (condicion2 -> ELSEIF condicion1 condicion2 .)
    DEFAULT         reduce using rule 111 (condicion2 -> ELSEIF condicion1 condicion2 .)


state 269

    (135) funcion6 -> RETURN ID RCURL .

    FUNCTION        reduce using rule 135 (funcion6 -> RETURN ID RCURL .)
    MAIN            reduce using rule 135 (funcion6 -> RETURN ID RCURL .)


state 270

    (142) switch4 -> LCURL PASS . RCURL

    RCURL           shift and go to state 273


state 271

    (140) switch2 -> CASE varcte COLON switch4 switch2 .

    DEFAULT         reduce using rule 140 (switch2 -> CASE varcte COLON switch4 switch2 .)


state 272

    (118) for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN . bloque
    (27) bloque -> . LCURL estatuto bloque1 RCURL

    LCURL           shift and go to state 175

    bloque                         shift and go to state 274

state 273

    (142) switch4 -> LCURL PASS RCURL .

    CASE            reduce using rule 142 (switch4 -> LCURL PASS RCURL .)
    DEFAULT         reduce using rule 142 (switch4 -> LCURL PASS RCURL .)
    RCURL           reduce using rule 142 (switch4 -> LCURL PASS RCURL .)


state 274

    (118) for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .

    ID              reduce using rule 118 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    IF              reduce using rule 118 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    SWITCH          reduce using rule 118 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    WHILE           reduce using rule 118 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    FOR             reduce using rule 118 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    PRINT           reduce using rule 118 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    INPUT           reduce using rule 118 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    RCURL           reduce using rule 118 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    RETURN          reduce using rule 118 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    CASE            reduce using rule 118 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    DEFAULT         reduce using rule 118 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 220 resolved using rule (llamada2 -> epsilon)
WARNING: rejected rule (varcte2 -> epsilon) in state 220
