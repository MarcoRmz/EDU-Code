Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> START programa1 programa2 main END
Rule 2     programa1 -> var_declaracion programa1
Rule 3     programa1 -> epsilon
Rule 4     programa2 -> funcion programa2
Rule 5     programa2 -> epsilon
Rule 6     var_declaracion -> tipo var_declaracion1
Rule 7     var_declaracion -> VECTOR tipo var_declaracion2
Rule 8     var_declaracion1 -> ID declareVar var_declaracion3
Rule 9     var_declaracion2 -> ID declareVar2 var_declaracion4
Rule 10    var_declaracion3 -> epsilon
Rule 11    var_declaracion3 -> inicializacion
Rule 12    var_declaracion4 -> epsilon
Rule 13    var_declaracion4 -> inicializacion_vector
Rule 14    declareVar -> <empty>
Rule 15    declareVar2 -> <empty>
Rule 16    parametros -> tipo parametros1 ID parametros2
Rule 17    parametros -> VECTOR tipo parametros1 ID parametros2
Rule 18    parametros1 -> AMPERSON
Rule 19    parametros1 -> epsilon
Rule 20    parametros2 -> COMMA parametros
Rule 21    parametros2 -> epsilon
Rule 22    inicializacion -> EQUALS exp
Rule 23    tipo -> INT
Rule 24    tipo -> FLOAT
Rule 25    tipo -> BOOL
Rule 26    tipo -> STRING
Rule 27    bloque -> LCURL estatuto bloque1 RCURL
Rule 28    bloque1 -> estatuto bloque1
Rule 29    bloque1 -> epsilon
Rule 30    exp -> termino exp1
Rule 31    exp1 -> PLUS exp
Rule 32    exp1 -> MINUS exp
Rule 33    exp1 -> epsilon
Rule 34    termino -> factor termino1
Rule 35    termino1 -> TIMES termino
Rule 36    termino1 -> DIVIDE termino
Rule 37    termino1 -> epsilon
Rule 38    inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET
Rule 39    inicializacion_vector1 -> varcte inicializacion_vector2
Rule 40    inicializacion_vector1 -> epsilon
Rule 41    inicializacion_vector2 -> COMMA varcte inicializacion_vector2
Rule 42    inicializacion_vector2 -> epsilon
Rule 43    main -> MAIN declareMain LCURL main1 estatuto main2 RCURL
Rule 44    declareMain -> <empty>
Rule 45    main1 -> var_declaracion main1
Rule 46    main1 -> epsilon
Rule 47    main2 -> estatuto main2
Rule 48    main2 -> epsilon
Rule 49    while -> WHILE LPAREN expresion RPAREN bloque
Rule 50    factor -> LPAREN expresion RPAREN
Rule 51    factor -> factor1
Rule 52    factor1 -> PLUS varcte
Rule 53    factor1 -> MINUS varcte
Rule 54    factor1 -> varcte
Rule 55    estatuto -> asignacion
Rule 56    estatuto -> llamada
Rule 57    estatuto -> condicion
Rule 58    estatuto -> switch
Rule 59    estatuto -> while
Rule 60    estatuto -> for
Rule 61    asignacion -> ID EQUALS asignacion1
Rule 62    asignacion1 -> exp
Rule 63    asignacion1 -> llamada
Rule 64    expresion -> expresion1
Rule 65    expresion1 -> epsilon
Rule 66    expresion1 -> expresion2 exp
Rule 67    expresion2 -> LESS
Rule 68    expresion2 -> GREATER
Rule 69    expresion2 -> DOUBLE_EQUAL
Rule 70    expresion2 -> DIFF
Rule 71    expresion_logica -> exp expresion_logica1 expresion
Rule 72    expresion_logica1 -> AND exp
Rule 73    expresion_logica1 -> epsilon
Rule 74    expresion_logica1 -> OR exp
Rule 75    llamada -> ID LPAREN llamada1 RPAREN
Rule 76    llamada -> print
Rule 77    llamada -> input
Rule 78    llamada1 -> epsilon
Rule 79    llamada1 -> exp llamada2
Rule 80    llamada2 -> epsilon
Rule 81    llamada2 -> COMMA exp llamada2
Rule 82    varcte -> ID varcte1
Rule 83    varcte -> CTE_INT
Rule 84    varcte -> CTE_FLOAT
Rule 85    varcte -> CTE_STRING
Rule 86    varcte -> cte_bool
Rule 87    varcte1 -> epsilon
Rule 88    varcte1 -> LPAREN exp varcte2 RPAREN
Rule 89    varcte1 -> LBRACKET exp RBRACKET
Rule 90    varcte2 -> epsilon
Rule 91    varcte2 -> COMMA exp varcte2
Rule 92    cte_bool -> TRUE
Rule 93    cte_bool -> FALSE
Rule 94    print -> PRINT LPAREN print1 RPAREN
Rule 95    print1 -> CTE_STRING print2
Rule 96    print1 -> ID print2
Rule 97    print2 -> epsilon
Rule 98    print2 -> PLUS print1
Rule 99    condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
Rule 100   condicion1 -> bloque
Rule 101   condicion1 -> LCURL bloque RCURL
Rule 102   condicion2 -> ELSEIF condicion1 condicion2
Rule 103   condicion2 -> epsilon
Rule 104   condicion3 -> ELSE condicion1
Rule 105   condicion3 -> epsilon
Rule 106   input -> INPUT LPAREN input1 RPAREN
Rule 107   input1 -> CTE_STRING
Rule 108   input1 -> epsilon
Rule 109   for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
Rule 110   for1 -> PLUS
Rule 111   for1 -> TIMES
Rule 112   for1 -> DIVIDE
Rule 113   for1 -> MINUS
Rule 114   funcion -> FUNCTION funcion4
Rule 115   funcion1 -> epsilon
Rule 116   funcion1 -> var_declaracion funcion1
Rule 117   funcion2 -> epsilon
Rule 118   funcion2 -> estatuto funcion2
Rule 119   funcion3 -> parametros
Rule 120   funcion3 -> epsilon
Rule 121   funcion4 -> VOID funcion5
Rule 122   funcion4 -> tipo funcion5
Rule 123   funcion5 -> ID declareFunc LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 funcion6
Rule 124   declareFunc -> <empty>
Rule 125   funcion6 -> RCURL
Rule 126   funcion6 -> RETURN ID RCURL
Rule 127   switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL
Rule 128   switch1 -> epsilon
Rule 129   switch1 -> LBRACKET exp RBRACKET
Rule 130   switch2 -> epsilon
Rule 131   switch2 -> CASE varcte COLON switch4 switch2
Rule 132   switch3 -> DEFAULT COLON switch4
Rule 133   switch4 -> LCURL PASS RCURL
Rule 134   switch4 -> estatuto
Rule 135   epsilon -> <empty>

Terminals, with rules where they appear

AMPERSON             : 18
AND                  : 72
BOOL                 : 25
BY                   : 109
CASE                 : 131
COLON                : 131 132
COMMA                : 20 41 81 91
CTE_FLOAT            : 84
CTE_INT              : 83 109 109 109
CTE_STRING           : 85 95 107
DEFAULT              : 132
DIFF                 : 70
DIVIDE               : 36 112
DOUBLE_EQUAL         : 69
ELSE                 : 104
ELSEIF               : 102
END                  : 1
EQUALS               : 22 38 61
FALSE                : 93
FLOAT                : 24
FOR                  : 109
FUNCTION             : 114
GREATER              : 68
ID                   : 8 9 16 17 61 75 82 96 123 126 127
IF                   : 99
INPUT                : 106
INT                  : 23
LBRACKET             : 38 89 129
LCURL                : 27 43 101 123 127 133
LESS                 : 67
LPAREN               : 49 50 75 88 94 99 106 109 123
MAIN                 : 43
MINUS                : 32 53 113
OR                   : 74
PASS                 : 133
PLUS                 : 31 52 98 110
PRINT                : 94
RBRACKET             : 38 89 129
RCURL                : 27 43 101 125 126 127 133
RETURN               : 126
RPAREN               : 49 50 75 88 94 99 106 109 123
START                : 1
STRING               : 26
SWITCH               : 127
TIMES                : 35 111
TO                   : 109
TRUE                 : 92
VECTOR               : 7 17
VOID                 : 121
WHILE                : 49
error                : 

Nonterminals, with rules where they appear

asignacion           : 55
asignacion1          : 61
bloque               : 49 100 101 109
bloque1              : 27 28
condicion            : 57
condicion1           : 99 102 104
condicion2           : 99 102
condicion3           : 99
cte_bool             : 86
declareFunc          : 123
declareMain          : 43
declareVar           : 8
declareVar2          : 9
epsilon              : 3 5 10 12 19 21 29 33 37 40 42 46 48 65 73 78 80 87 90 97 103 105 108 115 117 120 128 130
estatuto             : 27 28 43 47 118 123 134
exp                  : 22 31 32 62 66 71 72 74 79 81 88 89 91 129
exp1                 : 30
expresion            : 49 50 71
expresion1           : 64
expresion2           : 66
expresion_logica     : 99
expresion_logica1    : 71
factor               : 34
factor1              : 51
for                  : 60
for1                 : 109
funcion              : 4
funcion1             : 116 123
funcion2             : 118 123
funcion3             : 123
funcion4             : 114
funcion5             : 121 122
funcion6             : 123
inicializacion       : 11
inicializacion_vector : 13
inicializacion_vector1 : 38
inicializacion_vector2 : 39 41
input                : 77
input1               : 106
llamada              : 56 63
llamada1             : 75
llamada2             : 79 81
main                 : 1
main1                : 43 45
main2                : 43 47
parametros           : 20 119
parametros1          : 16 17
parametros2          : 16 17
print                : 76
print1               : 94 98
print2               : 95 96
programa             : 0
programa1            : 1 2
programa2            : 1 4
switch               : 58
switch1              : 127
switch2              : 127 131
switch3              : 127
switch4              : 131 132
termino              : 30 35 36
termino1             : 34
tipo                 : 6 7 16 17 122
var_declaracion      : 2 45 116
var_declaracion1     : 6
var_declaracion2     : 7
var_declaracion3     : 8
var_declaracion4     : 9
varcte               : 39 41 52 53 54 131
varcte1              : 82
varcte2              : 88 91
while                : 59

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . START programa1 programa2 main END

    START           shift and go to state 1

    programa                       shift and go to state 2

state 1

    (1) programa -> START . programa1 programa2 main END
    (2) programa1 -> . var_declaracion programa1
    (3) programa1 -> . epsilon
    (6) var_declaracion -> . tipo var_declaracion1
    (7) var_declaracion -> . VECTOR tipo var_declaracion2
    (135) epsilon -> .
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    VECTOR          shift and go to state 8
    FUNCTION        reduce using rule 135 (epsilon -> .)
    MAIN            reduce using rule 135 (epsilon -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 5
    var_declaracion                shift and go to state 6
    programa1                      shift and go to state 7
    epsilon                        shift and go to state 10

state 2

    (0) S' -> programa .



state 3

    (24) tipo -> FLOAT .

    AMPERSON        reduce using rule 24 (tipo -> FLOAT .)
    ID              reduce using rule 24 (tipo -> FLOAT .)


state 4

    (26) tipo -> STRING .

    AMPERSON        reduce using rule 26 (tipo -> STRING .)
    ID              reduce using rule 26 (tipo -> STRING .)


state 5

    (6) var_declaracion -> tipo . var_declaracion1
    (8) var_declaracion1 -> . ID declareVar var_declaracion3

    ID              shift and go to state 13

    var_declaracion1               shift and go to state 12

state 6

    (2) programa1 -> var_declaracion . programa1
    (2) programa1 -> . var_declaracion programa1
    (3) programa1 -> . epsilon
    (6) var_declaracion -> . tipo var_declaracion1
    (7) var_declaracion -> . VECTOR tipo var_declaracion2
    (135) epsilon -> .
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    VECTOR          shift and go to state 8
    FUNCTION        reduce using rule 135 (epsilon -> .)
    MAIN            reduce using rule 135 (epsilon -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 5
    epsilon                        shift and go to state 10
    var_declaracion                shift and go to state 6
    programa1                      shift and go to state 14

state 7

    (1) programa -> START programa1 . programa2 main END
    (4) programa2 -> . funcion programa2
    (5) programa2 -> . epsilon
    (114) funcion -> . FUNCTION funcion4
    (135) epsilon -> .

    FUNCTION        shift and go to state 15
    MAIN            reduce using rule 135 (epsilon -> .)

    epsilon                        shift and go to state 16
    programa2                      shift and go to state 17
    funcion                        shift and go to state 18

state 8

    (7) var_declaracion -> VECTOR . tipo var_declaracion2
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 19

state 9

    (25) tipo -> BOOL .

    AMPERSON        reduce using rule 25 (tipo -> BOOL .)
    ID              reduce using rule 25 (tipo -> BOOL .)


state 10

    (3) programa1 -> epsilon .

    FUNCTION        reduce using rule 3 (programa1 -> epsilon .)
    MAIN            reduce using rule 3 (programa1 -> epsilon .)


state 11

    (23) tipo -> INT .

    AMPERSON        reduce using rule 23 (tipo -> INT .)
    ID              reduce using rule 23 (tipo -> INT .)


state 12

    (6) var_declaracion -> tipo var_declaracion1 .

    VECTOR          reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    INT             reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    FLOAT           reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    BOOL            reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    STRING          reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    ID              reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    IF              reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    SWITCH          reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    WHILE           reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    FOR             reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    PRINT           reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    INPUT           reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    FUNCTION        reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)
    MAIN            reduce using rule 6 (var_declaracion -> tipo var_declaracion1 .)


state 13

    (8) var_declaracion1 -> ID . declareVar var_declaracion3
    (14) declareVar -> .

    EQUALS          reduce using rule 14 (declareVar -> .)
    VECTOR          reduce using rule 14 (declareVar -> .)
    INT             reduce using rule 14 (declareVar -> .)
    FLOAT           reduce using rule 14 (declareVar -> .)
    BOOL            reduce using rule 14 (declareVar -> .)
    STRING          reduce using rule 14 (declareVar -> .)
    FUNCTION        reduce using rule 14 (declareVar -> .)
    MAIN            reduce using rule 14 (declareVar -> .)
    ID              reduce using rule 14 (declareVar -> .)
    IF              reduce using rule 14 (declareVar -> .)
    SWITCH          reduce using rule 14 (declareVar -> .)
    WHILE           reduce using rule 14 (declareVar -> .)
    FOR             reduce using rule 14 (declareVar -> .)
    PRINT           reduce using rule 14 (declareVar -> .)
    INPUT           reduce using rule 14 (declareVar -> .)

    declareVar                     shift and go to state 20

state 14

    (2) programa1 -> var_declaracion programa1 .

    FUNCTION        reduce using rule 2 (programa1 -> var_declaracion programa1 .)
    MAIN            reduce using rule 2 (programa1 -> var_declaracion programa1 .)


state 15

    (114) funcion -> FUNCTION . funcion4
    (121) funcion4 -> . VOID funcion5
    (122) funcion4 -> . tipo funcion5
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    VOID            shift and go to state 22
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    funcion4                       shift and go to state 23
    tipo                           shift and go to state 21

state 16

    (5) programa2 -> epsilon .

    MAIN            reduce using rule 5 (programa2 -> epsilon .)


state 17

    (1) programa -> START programa1 programa2 . main END
    (43) main -> . MAIN declareMain LCURL main1 estatuto main2 RCURL

    MAIN            shift and go to state 25

    main                           shift and go to state 24

state 18

    (4) programa2 -> funcion . programa2
    (4) programa2 -> . funcion programa2
    (5) programa2 -> . epsilon
    (114) funcion -> . FUNCTION funcion4
    (135) epsilon -> .

    FUNCTION        shift and go to state 15
    MAIN            reduce using rule 135 (epsilon -> .)

    epsilon                        shift and go to state 16
    programa2                      shift and go to state 26
    funcion                        shift and go to state 18

state 19

    (7) var_declaracion -> VECTOR tipo . var_declaracion2
    (9) var_declaracion2 -> . ID declareVar2 var_declaracion4

    ID              shift and go to state 28

    var_declaracion2               shift and go to state 27

state 20

    (8) var_declaracion1 -> ID declareVar . var_declaracion3
    (10) var_declaracion3 -> . epsilon
    (11) var_declaracion3 -> . inicializacion
    (135) epsilon -> .
    (22) inicializacion -> . EQUALS exp

    VECTOR          reduce using rule 135 (epsilon -> .)
    INT             reduce using rule 135 (epsilon -> .)
    FLOAT           reduce using rule 135 (epsilon -> .)
    BOOL            reduce using rule 135 (epsilon -> .)
    STRING          reduce using rule 135 (epsilon -> .)
    FUNCTION        reduce using rule 135 (epsilon -> .)
    MAIN            reduce using rule 135 (epsilon -> .)
    ID              reduce using rule 135 (epsilon -> .)
    IF              reduce using rule 135 (epsilon -> .)
    SWITCH          reduce using rule 135 (epsilon -> .)
    WHILE           reduce using rule 135 (epsilon -> .)
    FOR             reduce using rule 135 (epsilon -> .)
    PRINT           reduce using rule 135 (epsilon -> .)
    INPUT           reduce using rule 135 (epsilon -> .)
    EQUALS          shift and go to state 31

    inicializacion                 shift and go to state 32
    epsilon                        shift and go to state 29
    var_declaracion3               shift and go to state 30

state 21

    (122) funcion4 -> tipo . funcion5
    (123) funcion5 -> . ID declareFunc LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 funcion6

    ID              shift and go to state 33

    funcion5                       shift and go to state 34

state 22

    (121) funcion4 -> VOID . funcion5
    (123) funcion5 -> . ID declareFunc LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 funcion6

    ID              shift and go to state 33

    funcion5                       shift and go to state 35

state 23

    (114) funcion -> FUNCTION funcion4 .

    FUNCTION        reduce using rule 114 (funcion -> FUNCTION funcion4 .)
    MAIN            reduce using rule 114 (funcion -> FUNCTION funcion4 .)


state 24

    (1) programa -> START programa1 programa2 main . END

    END             shift and go to state 36


state 25

    (43) main -> MAIN . declareMain LCURL main1 estatuto main2 RCURL
    (44) declareMain -> .

    LCURL           reduce using rule 44 (declareMain -> .)

    declareMain                    shift and go to state 37

state 26

    (4) programa2 -> funcion programa2 .

    MAIN            reduce using rule 4 (programa2 -> funcion programa2 .)


state 27

    (7) var_declaracion -> VECTOR tipo var_declaracion2 .

    VECTOR          reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    INT             reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    FLOAT           reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    BOOL            reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    STRING          reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    ID              reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    IF              reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    SWITCH          reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    WHILE           reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    FOR             reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    PRINT           reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    INPUT           reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    FUNCTION        reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)
    MAIN            reduce using rule 7 (var_declaracion -> VECTOR tipo var_declaracion2 .)


state 28

    (9) var_declaracion2 -> ID . declareVar2 var_declaracion4
    (15) declareVar2 -> .

    EQUALS          reduce using rule 15 (declareVar2 -> .)
    VECTOR          reduce using rule 15 (declareVar2 -> .)
    INT             reduce using rule 15 (declareVar2 -> .)
    FLOAT           reduce using rule 15 (declareVar2 -> .)
    BOOL            reduce using rule 15 (declareVar2 -> .)
    STRING          reduce using rule 15 (declareVar2 -> .)
    FUNCTION        reduce using rule 15 (declareVar2 -> .)
    MAIN            reduce using rule 15 (declareVar2 -> .)
    ID              reduce using rule 15 (declareVar2 -> .)
    IF              reduce using rule 15 (declareVar2 -> .)
    SWITCH          reduce using rule 15 (declareVar2 -> .)
    WHILE           reduce using rule 15 (declareVar2 -> .)
    FOR             reduce using rule 15 (declareVar2 -> .)
    PRINT           reduce using rule 15 (declareVar2 -> .)
    INPUT           reduce using rule 15 (declareVar2 -> .)

    declareVar2                    shift and go to state 38

state 29

    (10) var_declaracion3 -> epsilon .

    VECTOR          reduce using rule 10 (var_declaracion3 -> epsilon .)
    INT             reduce using rule 10 (var_declaracion3 -> epsilon .)
    FLOAT           reduce using rule 10 (var_declaracion3 -> epsilon .)
    BOOL            reduce using rule 10 (var_declaracion3 -> epsilon .)
    STRING          reduce using rule 10 (var_declaracion3 -> epsilon .)
    FUNCTION        reduce using rule 10 (var_declaracion3 -> epsilon .)
    MAIN            reduce using rule 10 (var_declaracion3 -> epsilon .)
    ID              reduce using rule 10 (var_declaracion3 -> epsilon .)
    IF              reduce using rule 10 (var_declaracion3 -> epsilon .)
    SWITCH          reduce using rule 10 (var_declaracion3 -> epsilon .)
    WHILE           reduce using rule 10 (var_declaracion3 -> epsilon .)
    FOR             reduce using rule 10 (var_declaracion3 -> epsilon .)
    PRINT           reduce using rule 10 (var_declaracion3 -> epsilon .)
    INPUT           reduce using rule 10 (var_declaracion3 -> epsilon .)


state 30

    (8) var_declaracion1 -> ID declareVar var_declaracion3 .

    VECTOR          reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    INT             reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    FLOAT           reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    BOOL            reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    STRING          reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    FUNCTION        reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    MAIN            reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    ID              reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    IF              reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    SWITCH          reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    WHILE           reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    FOR             reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    PRINT           reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)
    INPUT           reduce using rule 8 (var_declaracion1 -> ID declareVar var_declaracion3 .)


state 31

    (22) inicializacion -> EQUALS . exp
    (30) exp -> . termino exp1
    (34) termino -> . factor termino1
    (50) factor -> . LPAREN expresion RPAREN
    (51) factor -> . factor1
    (52) factor1 -> . PLUS varcte
    (53) factor1 -> . MINUS varcte
    (54) factor1 -> . varcte
    (82) varcte -> . ID varcte1
    (83) varcte -> . CTE_INT
    (84) varcte -> . CTE_FLOAT
    (85) varcte -> . CTE_STRING
    (86) varcte -> . cte_bool
    (92) cte_bool -> . TRUE
    (93) cte_bool -> . FALSE

    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    factor1                        shift and go to state 53
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 46
    exp                            shift and go to state 47
    factor                         shift and go to state 48
    varcte                         shift and go to state 39

state 32

    (11) var_declaracion3 -> inicializacion .

    VECTOR          reduce using rule 11 (var_declaracion3 -> inicializacion .)
    INT             reduce using rule 11 (var_declaracion3 -> inicializacion .)
    FLOAT           reduce using rule 11 (var_declaracion3 -> inicializacion .)
    BOOL            reduce using rule 11 (var_declaracion3 -> inicializacion .)
    STRING          reduce using rule 11 (var_declaracion3 -> inicializacion .)
    FUNCTION        reduce using rule 11 (var_declaracion3 -> inicializacion .)
    MAIN            reduce using rule 11 (var_declaracion3 -> inicializacion .)
    ID              reduce using rule 11 (var_declaracion3 -> inicializacion .)
    IF              reduce using rule 11 (var_declaracion3 -> inicializacion .)
    SWITCH          reduce using rule 11 (var_declaracion3 -> inicializacion .)
    WHILE           reduce using rule 11 (var_declaracion3 -> inicializacion .)
    FOR             reduce using rule 11 (var_declaracion3 -> inicializacion .)
    PRINT           reduce using rule 11 (var_declaracion3 -> inicializacion .)
    INPUT           reduce using rule 11 (var_declaracion3 -> inicializacion .)


state 33

    (123) funcion5 -> ID . declareFunc LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 funcion6
    (124) declareFunc -> .

    LPAREN          reduce using rule 124 (declareFunc -> .)

    declareFunc                    shift and go to state 54

state 34

    (122) funcion4 -> tipo funcion5 .

    FUNCTION        reduce using rule 122 (funcion4 -> tipo funcion5 .)
    MAIN            reduce using rule 122 (funcion4 -> tipo funcion5 .)


state 35

    (121) funcion4 -> VOID funcion5 .

    FUNCTION        reduce using rule 121 (funcion4 -> VOID funcion5 .)
    MAIN            reduce using rule 121 (funcion4 -> VOID funcion5 .)


state 36

    (1) programa -> START programa1 programa2 main END .

    $end            reduce using rule 1 (programa -> START programa1 programa2 main END .)


state 37

    (43) main -> MAIN declareMain . LCURL main1 estatuto main2 RCURL

    LCURL           shift and go to state 55


state 38

    (9) var_declaracion2 -> ID declareVar2 . var_declaracion4
    (12) var_declaracion4 -> . epsilon
    (13) var_declaracion4 -> . inicializacion_vector
    (135) epsilon -> .
    (38) inicializacion_vector -> . EQUALS LBRACKET inicializacion_vector1 RBRACKET

    VECTOR          reduce using rule 135 (epsilon -> .)
    INT             reduce using rule 135 (epsilon -> .)
    FLOAT           reduce using rule 135 (epsilon -> .)
    BOOL            reduce using rule 135 (epsilon -> .)
    STRING          reduce using rule 135 (epsilon -> .)
    FUNCTION        reduce using rule 135 (epsilon -> .)
    MAIN            reduce using rule 135 (epsilon -> .)
    ID              reduce using rule 135 (epsilon -> .)
    IF              reduce using rule 135 (epsilon -> .)
    SWITCH          reduce using rule 135 (epsilon -> .)
    WHILE           reduce using rule 135 (epsilon -> .)
    FOR             reduce using rule 135 (epsilon -> .)
    PRINT           reduce using rule 135 (epsilon -> .)
    INPUT           reduce using rule 135 (epsilon -> .)
    EQUALS          shift and go to state 58

    epsilon                        shift and go to state 57
    var_declaracion4               shift and go to state 59
    inicializacion_vector          shift and go to state 56

state 39

    (54) factor1 -> varcte .

    TIMES           reduce using rule 54 (factor1 -> varcte .)
    DIVIDE          reduce using rule 54 (factor1 -> varcte .)
    PLUS            reduce using rule 54 (factor1 -> varcte .)
    MINUS           reduce using rule 54 (factor1 -> varcte .)
    VECTOR          reduce using rule 54 (factor1 -> varcte .)
    INT             reduce using rule 54 (factor1 -> varcte .)
    FLOAT           reduce using rule 54 (factor1 -> varcte .)
    BOOL            reduce using rule 54 (factor1 -> varcte .)
    STRING          reduce using rule 54 (factor1 -> varcte .)
    FUNCTION        reduce using rule 54 (factor1 -> varcte .)
    MAIN            reduce using rule 54 (factor1 -> varcte .)
    ID              reduce using rule 54 (factor1 -> varcte .)
    IF              reduce using rule 54 (factor1 -> varcte .)
    SWITCH          reduce using rule 54 (factor1 -> varcte .)
    WHILE           reduce using rule 54 (factor1 -> varcte .)
    FOR             reduce using rule 54 (factor1 -> varcte .)
    PRINT           reduce using rule 54 (factor1 -> varcte .)
    INPUT           reduce using rule 54 (factor1 -> varcte .)
    RPAREN          reduce using rule 54 (factor1 -> varcte .)
    COMMA           reduce using rule 54 (factor1 -> varcte .)
    RBRACKET        reduce using rule 54 (factor1 -> varcte .)
    RCURL           reduce using rule 54 (factor1 -> varcte .)
    RETURN          reduce using rule 54 (factor1 -> varcte .)
    CASE            reduce using rule 54 (factor1 -> varcte .)
    DEFAULT         reduce using rule 54 (factor1 -> varcte .)
    AND             reduce using rule 54 (factor1 -> varcte .)
    OR              reduce using rule 54 (factor1 -> varcte .)
    LESS            reduce using rule 54 (factor1 -> varcte .)
    GREATER         reduce using rule 54 (factor1 -> varcte .)
    DOUBLE_EQUAL    reduce using rule 54 (factor1 -> varcte .)
    DIFF            reduce using rule 54 (factor1 -> varcte .)


state 40

    (83) varcte -> CTE_INT .

    TIMES           reduce using rule 83 (varcte -> CTE_INT .)
    DIVIDE          reduce using rule 83 (varcte -> CTE_INT .)
    PLUS            reduce using rule 83 (varcte -> CTE_INT .)
    MINUS           reduce using rule 83 (varcte -> CTE_INT .)
    VECTOR          reduce using rule 83 (varcte -> CTE_INT .)
    INT             reduce using rule 83 (varcte -> CTE_INT .)
    FLOAT           reduce using rule 83 (varcte -> CTE_INT .)
    BOOL            reduce using rule 83 (varcte -> CTE_INT .)
    STRING          reduce using rule 83 (varcte -> CTE_INT .)
    FUNCTION        reduce using rule 83 (varcte -> CTE_INT .)
    MAIN            reduce using rule 83 (varcte -> CTE_INT .)
    ID              reduce using rule 83 (varcte -> CTE_INT .)
    IF              reduce using rule 83 (varcte -> CTE_INT .)
    SWITCH          reduce using rule 83 (varcte -> CTE_INT .)
    WHILE           reduce using rule 83 (varcte -> CTE_INT .)
    FOR             reduce using rule 83 (varcte -> CTE_INT .)
    PRINT           reduce using rule 83 (varcte -> CTE_INT .)
    INPUT           reduce using rule 83 (varcte -> CTE_INT .)
    COMMA           reduce using rule 83 (varcte -> CTE_INT .)
    RPAREN          reduce using rule 83 (varcte -> CTE_INT .)
    RBRACKET        reduce using rule 83 (varcte -> CTE_INT .)
    LESS            reduce using rule 83 (varcte -> CTE_INT .)
    GREATER         reduce using rule 83 (varcte -> CTE_INT .)
    DOUBLE_EQUAL    reduce using rule 83 (varcte -> CTE_INT .)
    DIFF            reduce using rule 83 (varcte -> CTE_INT .)
    RCURL           reduce using rule 83 (varcte -> CTE_INT .)
    RETURN          reduce using rule 83 (varcte -> CTE_INT .)
    CASE            reduce using rule 83 (varcte -> CTE_INT .)
    DEFAULT         reduce using rule 83 (varcte -> CTE_INT .)
    AND             reduce using rule 83 (varcte -> CTE_INT .)
    OR              reduce using rule 83 (varcte -> CTE_INT .)
    COLON           reduce using rule 83 (varcte -> CTE_INT .)


state 41

    (50) factor -> LPAREN . expresion RPAREN
    (64) expresion -> . expresion1
    (65) expresion1 -> . epsilon
    (66) expresion1 -> . expresion2 exp
    (135) epsilon -> .
    (67) expresion2 -> . LESS
    (68) expresion2 -> . GREATER
    (69) expresion2 -> . DOUBLE_EQUAL
    (70) expresion2 -> . DIFF

    RPAREN          reduce using rule 135 (epsilon -> .)
    LESS            shift and go to state 63
    GREATER         shift and go to state 67
    DOUBLE_EQUAL    shift and go to state 65
    DIFF            shift and go to state 66

    expresion                      shift and go to state 60
    expresion1                     shift and go to state 61
    expresion2                     shift and go to state 62
    epsilon                        shift and go to state 64

state 42

    (92) cte_bool -> TRUE .

    TIMES           reduce using rule 92 (cte_bool -> TRUE .)
    DIVIDE          reduce using rule 92 (cte_bool -> TRUE .)
    PLUS            reduce using rule 92 (cte_bool -> TRUE .)
    MINUS           reduce using rule 92 (cte_bool -> TRUE .)
    ID              reduce using rule 92 (cte_bool -> TRUE .)
    IF              reduce using rule 92 (cte_bool -> TRUE .)
    SWITCH          reduce using rule 92 (cte_bool -> TRUE .)
    WHILE           reduce using rule 92 (cte_bool -> TRUE .)
    FOR             reduce using rule 92 (cte_bool -> TRUE .)
    PRINT           reduce using rule 92 (cte_bool -> TRUE .)
    INPUT           reduce using rule 92 (cte_bool -> TRUE .)
    RCURL           reduce using rule 92 (cte_bool -> TRUE .)
    RETURN          reduce using rule 92 (cte_bool -> TRUE .)
    CASE            reduce using rule 92 (cte_bool -> TRUE .)
    DEFAULT         reduce using rule 92 (cte_bool -> TRUE .)
    COMMA           reduce using rule 92 (cte_bool -> TRUE .)
    RPAREN          reduce using rule 92 (cte_bool -> TRUE .)
    VECTOR          reduce using rule 92 (cte_bool -> TRUE .)
    INT             reduce using rule 92 (cte_bool -> TRUE .)
    FLOAT           reduce using rule 92 (cte_bool -> TRUE .)
    BOOL            reduce using rule 92 (cte_bool -> TRUE .)
    STRING          reduce using rule 92 (cte_bool -> TRUE .)
    FUNCTION        reduce using rule 92 (cte_bool -> TRUE .)
    MAIN            reduce using rule 92 (cte_bool -> TRUE .)
    RBRACKET        reduce using rule 92 (cte_bool -> TRUE .)
    AND             reduce using rule 92 (cte_bool -> TRUE .)
    OR              reduce using rule 92 (cte_bool -> TRUE .)
    LESS            reduce using rule 92 (cte_bool -> TRUE .)
    GREATER         reduce using rule 92 (cte_bool -> TRUE .)
    DOUBLE_EQUAL    reduce using rule 92 (cte_bool -> TRUE .)
    DIFF            reduce using rule 92 (cte_bool -> TRUE .)
    COLON           reduce using rule 92 (cte_bool -> TRUE .)


state 43

    (84) varcte -> CTE_FLOAT .

    TIMES           reduce using rule 84 (varcte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 84 (varcte -> CTE_FLOAT .)
    PLUS            reduce using rule 84 (varcte -> CTE_FLOAT .)
    MINUS           reduce using rule 84 (varcte -> CTE_FLOAT .)
    VECTOR          reduce using rule 84 (varcte -> CTE_FLOAT .)
    INT             reduce using rule 84 (varcte -> CTE_FLOAT .)
    FLOAT           reduce using rule 84 (varcte -> CTE_FLOAT .)
    BOOL            reduce using rule 84 (varcte -> CTE_FLOAT .)
    STRING          reduce using rule 84 (varcte -> CTE_FLOAT .)
    FUNCTION        reduce using rule 84 (varcte -> CTE_FLOAT .)
    MAIN            reduce using rule 84 (varcte -> CTE_FLOAT .)
    ID              reduce using rule 84 (varcte -> CTE_FLOAT .)
    IF              reduce using rule 84 (varcte -> CTE_FLOAT .)
    SWITCH          reduce using rule 84 (varcte -> CTE_FLOAT .)
    WHILE           reduce using rule 84 (varcte -> CTE_FLOAT .)
    FOR             reduce using rule 84 (varcte -> CTE_FLOAT .)
    PRINT           reduce using rule 84 (varcte -> CTE_FLOAT .)
    INPUT           reduce using rule 84 (varcte -> CTE_FLOAT .)
    COMMA           reduce using rule 84 (varcte -> CTE_FLOAT .)
    RPAREN          reduce using rule 84 (varcte -> CTE_FLOAT .)
    RBRACKET        reduce using rule 84 (varcte -> CTE_FLOAT .)
    LESS            reduce using rule 84 (varcte -> CTE_FLOAT .)
    GREATER         reduce using rule 84 (varcte -> CTE_FLOAT .)
    DOUBLE_EQUAL    reduce using rule 84 (varcte -> CTE_FLOAT .)
    DIFF            reduce using rule 84 (varcte -> CTE_FLOAT .)
    RCURL           reduce using rule 84 (varcte -> CTE_FLOAT .)
    RETURN          reduce using rule 84 (varcte -> CTE_FLOAT .)
    CASE            reduce using rule 84 (varcte -> CTE_FLOAT .)
    DEFAULT         reduce using rule 84 (varcte -> CTE_FLOAT .)
    AND             reduce using rule 84 (varcte -> CTE_FLOAT .)
    OR              reduce using rule 84 (varcte -> CTE_FLOAT .)
    COLON           reduce using rule 84 (varcte -> CTE_FLOAT .)


state 44

    (85) varcte -> CTE_STRING .

    TIMES           reduce using rule 85 (varcte -> CTE_STRING .)
    DIVIDE          reduce using rule 85 (varcte -> CTE_STRING .)
    PLUS            reduce using rule 85 (varcte -> CTE_STRING .)
    MINUS           reduce using rule 85 (varcte -> CTE_STRING .)
    VECTOR          reduce using rule 85 (varcte -> CTE_STRING .)
    INT             reduce using rule 85 (varcte -> CTE_STRING .)
    FLOAT           reduce using rule 85 (varcte -> CTE_STRING .)
    BOOL            reduce using rule 85 (varcte -> CTE_STRING .)
    STRING          reduce using rule 85 (varcte -> CTE_STRING .)
    FUNCTION        reduce using rule 85 (varcte -> CTE_STRING .)
    MAIN            reduce using rule 85 (varcte -> CTE_STRING .)
    ID              reduce using rule 85 (varcte -> CTE_STRING .)
    IF              reduce using rule 85 (varcte -> CTE_STRING .)
    SWITCH          reduce using rule 85 (varcte -> CTE_STRING .)
    WHILE           reduce using rule 85 (varcte -> CTE_STRING .)
    FOR             reduce using rule 85 (varcte -> CTE_STRING .)
    PRINT           reduce using rule 85 (varcte -> CTE_STRING .)
    INPUT           reduce using rule 85 (varcte -> CTE_STRING .)
    COMMA           reduce using rule 85 (varcte -> CTE_STRING .)
    RPAREN          reduce using rule 85 (varcte -> CTE_STRING .)
    RBRACKET        reduce using rule 85 (varcte -> CTE_STRING .)
    LESS            reduce using rule 85 (varcte -> CTE_STRING .)
    GREATER         reduce using rule 85 (varcte -> CTE_STRING .)
    DOUBLE_EQUAL    reduce using rule 85 (varcte -> CTE_STRING .)
    DIFF            reduce using rule 85 (varcte -> CTE_STRING .)
    RCURL           reduce using rule 85 (varcte -> CTE_STRING .)
    RETURN          reduce using rule 85 (varcte -> CTE_STRING .)
    CASE            reduce using rule 85 (varcte -> CTE_STRING .)
    DEFAULT         reduce using rule 85 (varcte -> CTE_STRING .)
    AND             reduce using rule 85 (varcte -> CTE_STRING .)
    OR              reduce using rule 85 (varcte -> CTE_STRING .)
    COLON           reduce using rule 85 (varcte -> CTE_STRING .)


state 45

    (52) factor1 -> PLUS . varcte
    (82) varcte -> . ID varcte1
    (83) varcte -> . CTE_INT
    (84) varcte -> . CTE_FLOAT
    (85) varcte -> . CTE_STRING
    (86) varcte -> . cte_bool
    (92) cte_bool -> . TRUE
    (93) cte_bool -> . FALSE

    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    cte_bool                       shift and go to state 51
    varcte                         shift and go to state 68

state 46

    (30) exp -> termino . exp1
    (31) exp1 -> . PLUS exp
    (32) exp1 -> . MINUS exp
    (33) exp1 -> . epsilon
    (135) epsilon -> .

    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    VECTOR          reduce using rule 135 (epsilon -> .)
    INT             reduce using rule 135 (epsilon -> .)
    FLOAT           reduce using rule 135 (epsilon -> .)
    BOOL            reduce using rule 135 (epsilon -> .)
    STRING          reduce using rule 135 (epsilon -> .)
    FUNCTION        reduce using rule 135 (epsilon -> .)
    MAIN            reduce using rule 135 (epsilon -> .)
    ID              reduce using rule 135 (epsilon -> .)
    IF              reduce using rule 135 (epsilon -> .)
    SWITCH          reduce using rule 135 (epsilon -> .)
    WHILE           reduce using rule 135 (epsilon -> .)
    FOR             reduce using rule 135 (epsilon -> .)
    PRINT           reduce using rule 135 (epsilon -> .)
    INPUT           reduce using rule 135 (epsilon -> .)
    RPAREN          reduce using rule 135 (epsilon -> .)
    COMMA           reduce using rule 135 (epsilon -> .)
    RBRACKET        reduce using rule 135 (epsilon -> .)
    RCURL           reduce using rule 135 (epsilon -> .)
    RETURN          reduce using rule 135 (epsilon -> .)
    CASE            reduce using rule 135 (epsilon -> .)
    DEFAULT         reduce using rule 135 (epsilon -> .)
    AND             reduce using rule 135 (epsilon -> .)
    OR              reduce using rule 135 (epsilon -> .)
    LESS            reduce using rule 135 (epsilon -> .)
    GREATER         reduce using rule 135 (epsilon -> .)
    DOUBLE_EQUAL    reduce using rule 135 (epsilon -> .)
    DIFF            reduce using rule 135 (epsilon -> .)

    epsilon                        shift and go to state 69
    exp1                           shift and go to state 70

state 47

    (22) inicializacion -> EQUALS exp .

    VECTOR          reduce using rule 22 (inicializacion -> EQUALS exp .)
    INT             reduce using rule 22 (inicializacion -> EQUALS exp .)
    FLOAT           reduce using rule 22 (inicializacion -> EQUALS exp .)
    BOOL            reduce using rule 22 (inicializacion -> EQUALS exp .)
    STRING          reduce using rule 22 (inicializacion -> EQUALS exp .)
    FUNCTION        reduce using rule 22 (inicializacion -> EQUALS exp .)
    MAIN            reduce using rule 22 (inicializacion -> EQUALS exp .)
    ID              reduce using rule 22 (inicializacion -> EQUALS exp .)
    IF              reduce using rule 22 (inicializacion -> EQUALS exp .)
    SWITCH          reduce using rule 22 (inicializacion -> EQUALS exp .)
    WHILE           reduce using rule 22 (inicializacion -> EQUALS exp .)
    FOR             reduce using rule 22 (inicializacion -> EQUALS exp .)
    PRINT           reduce using rule 22 (inicializacion -> EQUALS exp .)
    INPUT           reduce using rule 22 (inicializacion -> EQUALS exp .)


state 48

    (34) termino -> factor . termino1
    (35) termino1 -> . TIMES termino
    (36) termino1 -> . DIVIDE termino
    (37) termino1 -> . epsilon
    (135) epsilon -> .

    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 73
    PLUS            reduce using rule 135 (epsilon -> .)
    MINUS           reduce using rule 135 (epsilon -> .)
    VECTOR          reduce using rule 135 (epsilon -> .)
    INT             reduce using rule 135 (epsilon -> .)
    FLOAT           reduce using rule 135 (epsilon -> .)
    BOOL            reduce using rule 135 (epsilon -> .)
    STRING          reduce using rule 135 (epsilon -> .)
    FUNCTION        reduce using rule 135 (epsilon -> .)
    MAIN            reduce using rule 135 (epsilon -> .)
    ID              reduce using rule 135 (epsilon -> .)
    IF              reduce using rule 135 (epsilon -> .)
    SWITCH          reduce using rule 135 (epsilon -> .)
    WHILE           reduce using rule 135 (epsilon -> .)
    FOR             reduce using rule 135 (epsilon -> .)
    PRINT           reduce using rule 135 (epsilon -> .)
    INPUT           reduce using rule 135 (epsilon -> .)
    RPAREN          reduce using rule 135 (epsilon -> .)
    COMMA           reduce using rule 135 (epsilon -> .)
    RBRACKET        reduce using rule 135 (epsilon -> .)
    RCURL           reduce using rule 135 (epsilon -> .)
    RETURN          reduce using rule 135 (epsilon -> .)
    CASE            reduce using rule 135 (epsilon -> .)
    DEFAULT         reduce using rule 135 (epsilon -> .)
    AND             reduce using rule 135 (epsilon -> .)
    OR              reduce using rule 135 (epsilon -> .)
    LESS            reduce using rule 135 (epsilon -> .)
    GREATER         reduce using rule 135 (epsilon -> .)
    DOUBLE_EQUAL    reduce using rule 135 (epsilon -> .)
    DIFF            reduce using rule 135 (epsilon -> .)

    epsilon                        shift and go to state 74
    termino1                       shift and go to state 75

state 49

    (93) cte_bool -> FALSE .

    TIMES           reduce using rule 93 (cte_bool -> FALSE .)
    DIVIDE          reduce using rule 93 (cte_bool -> FALSE .)
    PLUS            reduce using rule 93 (cte_bool -> FALSE .)
    MINUS           reduce using rule 93 (cte_bool -> FALSE .)
    ID              reduce using rule 93 (cte_bool -> FALSE .)
    IF              reduce using rule 93 (cte_bool -> FALSE .)
    SWITCH          reduce using rule 93 (cte_bool -> FALSE .)
    WHILE           reduce using rule 93 (cte_bool -> FALSE .)
    FOR             reduce using rule 93 (cte_bool -> FALSE .)
    PRINT           reduce using rule 93 (cte_bool -> FALSE .)
    INPUT           reduce using rule 93 (cte_bool -> FALSE .)
    RCURL           reduce using rule 93 (cte_bool -> FALSE .)
    RETURN          reduce using rule 93 (cte_bool -> FALSE .)
    CASE            reduce using rule 93 (cte_bool -> FALSE .)
    DEFAULT         reduce using rule 93 (cte_bool -> FALSE .)
    COMMA           reduce using rule 93 (cte_bool -> FALSE .)
    RPAREN          reduce using rule 93 (cte_bool -> FALSE .)
    VECTOR          reduce using rule 93 (cte_bool -> FALSE .)
    INT             reduce using rule 93 (cte_bool -> FALSE .)
    FLOAT           reduce using rule 93 (cte_bool -> FALSE .)
    BOOL            reduce using rule 93 (cte_bool -> FALSE .)
    STRING          reduce using rule 93 (cte_bool -> FALSE .)
    FUNCTION        reduce using rule 93 (cte_bool -> FALSE .)
    MAIN            reduce using rule 93 (cte_bool -> FALSE .)
    RBRACKET        reduce using rule 93 (cte_bool -> FALSE .)
    AND             reduce using rule 93 (cte_bool -> FALSE .)
    OR              reduce using rule 93 (cte_bool -> FALSE .)
    LESS            reduce using rule 93 (cte_bool -> FALSE .)
    GREATER         reduce using rule 93 (cte_bool -> FALSE .)
    DOUBLE_EQUAL    reduce using rule 93 (cte_bool -> FALSE .)
    DIFF            reduce using rule 93 (cte_bool -> FALSE .)
    COLON           reduce using rule 93 (cte_bool -> FALSE .)


state 50

    (82) varcte -> ID . varcte1
    (87) varcte1 -> . epsilon
    (88) varcte1 -> . LPAREN exp varcte2 RPAREN
    (89) varcte1 -> . LBRACKET exp RBRACKET
    (135) epsilon -> .

    LPAREN          shift and go to state 77
    LBRACKET        shift and go to state 79
    TIMES           reduce using rule 135 (epsilon -> .)
    DIVIDE          reduce using rule 135 (epsilon -> .)
    PLUS            reduce using rule 135 (epsilon -> .)
    MINUS           reduce using rule 135 (epsilon -> .)
    VECTOR          reduce using rule 135 (epsilon -> .)
    INT             reduce using rule 135 (epsilon -> .)
    FLOAT           reduce using rule 135 (epsilon -> .)
    BOOL            reduce using rule 135 (epsilon -> .)
    STRING          reduce using rule 135 (epsilon -> .)
    FUNCTION        reduce using rule 135 (epsilon -> .)
    MAIN            reduce using rule 135 (epsilon -> .)
    ID              reduce using rule 135 (epsilon -> .)
    IF              reduce using rule 135 (epsilon -> .)
    SWITCH          reduce using rule 135 (epsilon -> .)
    WHILE           reduce using rule 135 (epsilon -> .)
    FOR             reduce using rule 135 (epsilon -> .)
    PRINT           reduce using rule 135 (epsilon -> .)
    INPUT           reduce using rule 135 (epsilon -> .)
    RPAREN          reduce using rule 135 (epsilon -> .)
    COMMA           reduce using rule 135 (epsilon -> .)
    RBRACKET        reduce using rule 135 (epsilon -> .)
    RCURL           reduce using rule 135 (epsilon -> .)
    RETURN          reduce using rule 135 (epsilon -> .)
    CASE            reduce using rule 135 (epsilon -> .)
    DEFAULT         reduce using rule 135 (epsilon -> .)
    AND             reduce using rule 135 (epsilon -> .)
    OR              reduce using rule 135 (epsilon -> .)
    LESS            reduce using rule 135 (epsilon -> .)
    GREATER         reduce using rule 135 (epsilon -> .)
    DOUBLE_EQUAL    reduce using rule 135 (epsilon -> .)
    DIFF            reduce using rule 135 (epsilon -> .)
    COLON           reduce using rule 135 (epsilon -> .)

    epsilon                        shift and go to state 78
    varcte1                        shift and go to state 80

state 51

    (86) varcte -> cte_bool .

    TIMES           reduce using rule 86 (varcte -> cte_bool .)
    DIVIDE          reduce using rule 86 (varcte -> cte_bool .)
    PLUS            reduce using rule 86 (varcte -> cte_bool .)
    MINUS           reduce using rule 86 (varcte -> cte_bool .)
    VECTOR          reduce using rule 86 (varcte -> cte_bool .)
    INT             reduce using rule 86 (varcte -> cte_bool .)
    FLOAT           reduce using rule 86 (varcte -> cte_bool .)
    BOOL            reduce using rule 86 (varcte -> cte_bool .)
    STRING          reduce using rule 86 (varcte -> cte_bool .)
    FUNCTION        reduce using rule 86 (varcte -> cte_bool .)
    MAIN            reduce using rule 86 (varcte -> cte_bool .)
    ID              reduce using rule 86 (varcte -> cte_bool .)
    IF              reduce using rule 86 (varcte -> cte_bool .)
    SWITCH          reduce using rule 86 (varcte -> cte_bool .)
    WHILE           reduce using rule 86 (varcte -> cte_bool .)
    FOR             reduce using rule 86 (varcte -> cte_bool .)
    PRINT           reduce using rule 86 (varcte -> cte_bool .)
    INPUT           reduce using rule 86 (varcte -> cte_bool .)
    COMMA           reduce using rule 86 (varcte -> cte_bool .)
    RPAREN          reduce using rule 86 (varcte -> cte_bool .)
    RBRACKET        reduce using rule 86 (varcte -> cte_bool .)
    LESS            reduce using rule 86 (varcte -> cte_bool .)
    GREATER         reduce using rule 86 (varcte -> cte_bool .)
    DOUBLE_EQUAL    reduce using rule 86 (varcte -> cte_bool .)
    DIFF            reduce using rule 86 (varcte -> cte_bool .)
    RCURL           reduce using rule 86 (varcte -> cte_bool .)
    RETURN          reduce using rule 86 (varcte -> cte_bool .)
    CASE            reduce using rule 86 (varcte -> cte_bool .)
    DEFAULT         reduce using rule 86 (varcte -> cte_bool .)
    AND             reduce using rule 86 (varcte -> cte_bool .)
    OR              reduce using rule 86 (varcte -> cte_bool .)
    COLON           reduce using rule 86 (varcte -> cte_bool .)


state 52

    (53) factor1 -> MINUS . varcte
    (82) varcte -> . ID varcte1
    (83) varcte -> . CTE_INT
    (84) varcte -> . CTE_FLOAT
    (85) varcte -> . CTE_STRING
    (86) varcte -> . cte_bool
    (92) cte_bool -> . TRUE
    (93) cte_bool -> . FALSE

    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    cte_bool                       shift and go to state 51
    varcte                         shift and go to state 81

state 53

    (51) factor -> factor1 .

    TIMES           reduce using rule 51 (factor -> factor1 .)
    DIVIDE          reduce using rule 51 (factor -> factor1 .)
    PLUS            reduce using rule 51 (factor -> factor1 .)
    MINUS           reduce using rule 51 (factor -> factor1 .)
    COMMA           reduce using rule 51 (factor -> factor1 .)
    RPAREN          reduce using rule 51 (factor -> factor1 .)
    VECTOR          reduce using rule 51 (factor -> factor1 .)
    INT             reduce using rule 51 (factor -> factor1 .)
    FLOAT           reduce using rule 51 (factor -> factor1 .)
    BOOL            reduce using rule 51 (factor -> factor1 .)
    STRING          reduce using rule 51 (factor -> factor1 .)
    FUNCTION        reduce using rule 51 (factor -> factor1 .)
    MAIN            reduce using rule 51 (factor -> factor1 .)
    ID              reduce using rule 51 (factor -> factor1 .)
    IF              reduce using rule 51 (factor -> factor1 .)
    SWITCH          reduce using rule 51 (factor -> factor1 .)
    WHILE           reduce using rule 51 (factor -> factor1 .)
    FOR             reduce using rule 51 (factor -> factor1 .)
    PRINT           reduce using rule 51 (factor -> factor1 .)
    INPUT           reduce using rule 51 (factor -> factor1 .)
    RBRACKET        reduce using rule 51 (factor -> factor1 .)
    RCURL           reduce using rule 51 (factor -> factor1 .)
    RETURN          reduce using rule 51 (factor -> factor1 .)
    CASE            reduce using rule 51 (factor -> factor1 .)
    DEFAULT         reduce using rule 51 (factor -> factor1 .)
    AND             reduce using rule 51 (factor -> factor1 .)
    OR              reduce using rule 51 (factor -> factor1 .)
    LESS            reduce using rule 51 (factor -> factor1 .)
    GREATER         reduce using rule 51 (factor -> factor1 .)
    DOUBLE_EQUAL    reduce using rule 51 (factor -> factor1 .)
    DIFF            reduce using rule 51 (factor -> factor1 .)


state 54

    (123) funcion5 -> ID declareFunc . LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 funcion6

    LPAREN          shift and go to state 82


state 55

    (43) main -> MAIN declareMain LCURL . main1 estatuto main2 RCURL
    (45) main1 -> . var_declaracion main1
    (46) main1 -> . epsilon
    (6) var_declaracion -> . tipo var_declaracion1
    (7) var_declaracion -> . VECTOR tipo var_declaracion2
    (135) epsilon -> .
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    VECTOR          shift and go to state 8
    ID              reduce using rule 135 (epsilon -> .)
    IF              reduce using rule 135 (epsilon -> .)
    SWITCH          reduce using rule 135 (epsilon -> .)
    WHILE           reduce using rule 135 (epsilon -> .)
    FOR             reduce using rule 135 (epsilon -> .)
    PRINT           reduce using rule 135 (epsilon -> .)
    INPUT           reduce using rule 135 (epsilon -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 5
    main1                          shift and go to state 83
    var_declaracion                shift and go to state 84
    epsilon                        shift and go to state 85

state 56

    (13) var_declaracion4 -> inicializacion_vector .

    VECTOR          reduce using rule 13 (var_declaracion4 -> inicializacion_vector .)
    INT             reduce using rule 13 (var_declaracion4 -> inicializacion_vector .)
    FLOAT           reduce using rule 13 (var_declaracion4 -> inicializacion_vector .)
    BOOL            reduce using rule 13 (var_declaracion4 -> inicializacion_vector .)
    STRING          reduce using rule 13 (var_declaracion4 -> inicializacion_vector .)
    FUNCTION        reduce using rule 13 (var_declaracion4 -> inicializacion_vector .)
    MAIN            reduce using rule 13 (var_declaracion4 -> inicializacion_vector .)
    ID              reduce using rule 13 (var_declaracion4 -> inicializacion_vector .)
    IF              reduce using rule 13 (var_declaracion4 -> inicializacion_vector .)
    SWITCH          reduce using rule 13 (var_declaracion4 -> inicializacion_vector .)
    WHILE           reduce using rule 13 (var_declaracion4 -> inicializacion_vector .)
    FOR             reduce using rule 13 (var_declaracion4 -> inicializacion_vector .)
    PRINT           reduce using rule 13 (var_declaracion4 -> inicializacion_vector .)
    INPUT           reduce using rule 13 (var_declaracion4 -> inicializacion_vector .)


state 57

    (12) var_declaracion4 -> epsilon .

    VECTOR          reduce using rule 12 (var_declaracion4 -> epsilon .)
    INT             reduce using rule 12 (var_declaracion4 -> epsilon .)
    FLOAT           reduce using rule 12 (var_declaracion4 -> epsilon .)
    BOOL            reduce using rule 12 (var_declaracion4 -> epsilon .)
    STRING          reduce using rule 12 (var_declaracion4 -> epsilon .)
    FUNCTION        reduce using rule 12 (var_declaracion4 -> epsilon .)
    MAIN            reduce using rule 12 (var_declaracion4 -> epsilon .)
    ID              reduce using rule 12 (var_declaracion4 -> epsilon .)
    IF              reduce using rule 12 (var_declaracion4 -> epsilon .)
    SWITCH          reduce using rule 12 (var_declaracion4 -> epsilon .)
    WHILE           reduce using rule 12 (var_declaracion4 -> epsilon .)
    FOR             reduce using rule 12 (var_declaracion4 -> epsilon .)
    PRINT           reduce using rule 12 (var_declaracion4 -> epsilon .)
    INPUT           reduce using rule 12 (var_declaracion4 -> epsilon .)


state 58

    (38) inicializacion_vector -> EQUALS . LBRACKET inicializacion_vector1 RBRACKET

    LBRACKET        shift and go to state 86


state 59

    (9) var_declaracion2 -> ID declareVar2 var_declaracion4 .

    VECTOR          reduce using rule 9 (var_declaracion2 -> ID declareVar2 var_declaracion4 .)
    INT             reduce using rule 9 (var_declaracion2 -> ID declareVar2 var_declaracion4 .)
    FLOAT           reduce using rule 9 (var_declaracion2 -> ID declareVar2 var_declaracion4 .)
    BOOL            reduce using rule 9 (var_declaracion2 -> ID declareVar2 var_declaracion4 .)
    STRING          reduce using rule 9 (var_declaracion2 -> ID declareVar2 var_declaracion4 .)
    FUNCTION        reduce using rule 9 (var_declaracion2 -> ID declareVar2 var_declaracion4 .)
    MAIN            reduce using rule 9 (var_declaracion2 -> ID declareVar2 var_declaracion4 .)
    ID              reduce using rule 9 (var_declaracion2 -> ID declareVar2 var_declaracion4 .)
    IF              reduce using rule 9 (var_declaracion2 -> ID declareVar2 var_declaracion4 .)
    SWITCH          reduce using rule 9 (var_declaracion2 -> ID declareVar2 var_declaracion4 .)
    WHILE           reduce using rule 9 (var_declaracion2 -> ID declareVar2 var_declaracion4 .)
    FOR             reduce using rule 9 (var_declaracion2 -> ID declareVar2 var_declaracion4 .)
    PRINT           reduce using rule 9 (var_declaracion2 -> ID declareVar2 var_declaracion4 .)
    INPUT           reduce using rule 9 (var_declaracion2 -> ID declareVar2 var_declaracion4 .)


state 60

    (50) factor -> LPAREN expresion . RPAREN

    RPAREN          shift and go to state 87


state 61

    (64) expresion -> expresion1 .

    RPAREN          reduce using rule 64 (expresion -> expresion1 .)


state 62

    (66) expresion1 -> expresion2 . exp
    (30) exp -> . termino exp1
    (34) termino -> . factor termino1
    (50) factor -> . LPAREN expresion RPAREN
    (51) factor -> . factor1
    (52) factor1 -> . PLUS varcte
    (53) factor1 -> . MINUS varcte
    (54) factor1 -> . varcte
    (82) varcte -> . ID varcte1
    (83) varcte -> . CTE_INT
    (84) varcte -> . CTE_FLOAT
    (85) varcte -> . CTE_STRING
    (86) varcte -> . cte_bool
    (92) cte_bool -> . TRUE
    (93) cte_bool -> . FALSE

    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    factor1                        shift and go to state 53
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 46
    exp                            shift and go to state 88
    factor                         shift and go to state 48
    varcte                         shift and go to state 39

state 63

    (67) expresion2 -> LESS .

    LPAREN          reduce using rule 67 (expresion2 -> LESS .)
    PLUS            reduce using rule 67 (expresion2 -> LESS .)
    MINUS           reduce using rule 67 (expresion2 -> LESS .)
    ID              reduce using rule 67 (expresion2 -> LESS .)
    CTE_INT         reduce using rule 67 (expresion2 -> LESS .)
    CTE_FLOAT       reduce using rule 67 (expresion2 -> LESS .)
    CTE_STRING      reduce using rule 67 (expresion2 -> LESS .)
    TRUE            reduce using rule 67 (expresion2 -> LESS .)
    FALSE           reduce using rule 67 (expresion2 -> LESS .)


state 64

    (65) expresion1 -> epsilon .

    RPAREN          reduce using rule 65 (expresion1 -> epsilon .)


state 65

    (69) expresion2 -> DOUBLE_EQUAL .

    LPAREN          reduce using rule 69 (expresion2 -> DOUBLE_EQUAL .)
    PLUS            reduce using rule 69 (expresion2 -> DOUBLE_EQUAL .)
    MINUS           reduce using rule 69 (expresion2 -> DOUBLE_EQUAL .)
    ID              reduce using rule 69 (expresion2 -> DOUBLE_EQUAL .)
    CTE_INT         reduce using rule 69 (expresion2 -> DOUBLE_EQUAL .)
    CTE_FLOAT       reduce using rule 69 (expresion2 -> DOUBLE_EQUAL .)
    CTE_STRING      reduce using rule 69 (expresion2 -> DOUBLE_EQUAL .)
    TRUE            reduce using rule 69 (expresion2 -> DOUBLE_EQUAL .)
    FALSE           reduce using rule 69 (expresion2 -> DOUBLE_EQUAL .)


state 66

    (70) expresion2 -> DIFF .

    LPAREN          reduce using rule 70 (expresion2 -> DIFF .)
    PLUS            reduce using rule 70 (expresion2 -> DIFF .)
    MINUS           reduce using rule 70 (expresion2 -> DIFF .)
    ID              reduce using rule 70 (expresion2 -> DIFF .)
    CTE_INT         reduce using rule 70 (expresion2 -> DIFF .)
    CTE_FLOAT       reduce using rule 70 (expresion2 -> DIFF .)
    CTE_STRING      reduce using rule 70 (expresion2 -> DIFF .)
    TRUE            reduce using rule 70 (expresion2 -> DIFF .)
    FALSE           reduce using rule 70 (expresion2 -> DIFF .)


state 67

    (68) expresion2 -> GREATER .

    LPAREN          reduce using rule 68 (expresion2 -> GREATER .)
    PLUS            reduce using rule 68 (expresion2 -> GREATER .)
    MINUS           reduce using rule 68 (expresion2 -> GREATER .)
    ID              reduce using rule 68 (expresion2 -> GREATER .)
    CTE_INT         reduce using rule 68 (expresion2 -> GREATER .)
    CTE_FLOAT       reduce using rule 68 (expresion2 -> GREATER .)
    CTE_STRING      reduce using rule 68 (expresion2 -> GREATER .)
    TRUE            reduce using rule 68 (expresion2 -> GREATER .)
    FALSE           reduce using rule 68 (expresion2 -> GREATER .)


state 68

    (52) factor1 -> PLUS varcte .

    TIMES           reduce using rule 52 (factor1 -> PLUS varcte .)
    DIVIDE          reduce using rule 52 (factor1 -> PLUS varcte .)
    PLUS            reduce using rule 52 (factor1 -> PLUS varcte .)
    MINUS           reduce using rule 52 (factor1 -> PLUS varcte .)
    VECTOR          reduce using rule 52 (factor1 -> PLUS varcte .)
    INT             reduce using rule 52 (factor1 -> PLUS varcte .)
    FLOAT           reduce using rule 52 (factor1 -> PLUS varcte .)
    BOOL            reduce using rule 52 (factor1 -> PLUS varcte .)
    STRING          reduce using rule 52 (factor1 -> PLUS varcte .)
    FUNCTION        reduce using rule 52 (factor1 -> PLUS varcte .)
    MAIN            reduce using rule 52 (factor1 -> PLUS varcte .)
    ID              reduce using rule 52 (factor1 -> PLUS varcte .)
    IF              reduce using rule 52 (factor1 -> PLUS varcte .)
    SWITCH          reduce using rule 52 (factor1 -> PLUS varcte .)
    WHILE           reduce using rule 52 (factor1 -> PLUS varcte .)
    FOR             reduce using rule 52 (factor1 -> PLUS varcte .)
    PRINT           reduce using rule 52 (factor1 -> PLUS varcte .)
    INPUT           reduce using rule 52 (factor1 -> PLUS varcte .)
    RPAREN          reduce using rule 52 (factor1 -> PLUS varcte .)
    COMMA           reduce using rule 52 (factor1 -> PLUS varcte .)
    RBRACKET        reduce using rule 52 (factor1 -> PLUS varcte .)
    RCURL           reduce using rule 52 (factor1 -> PLUS varcte .)
    RETURN          reduce using rule 52 (factor1 -> PLUS varcte .)
    CASE            reduce using rule 52 (factor1 -> PLUS varcte .)
    DEFAULT         reduce using rule 52 (factor1 -> PLUS varcte .)
    AND             reduce using rule 52 (factor1 -> PLUS varcte .)
    OR              reduce using rule 52 (factor1 -> PLUS varcte .)
    LESS            reduce using rule 52 (factor1 -> PLUS varcte .)
    GREATER         reduce using rule 52 (factor1 -> PLUS varcte .)
    DOUBLE_EQUAL    reduce using rule 52 (factor1 -> PLUS varcte .)
    DIFF            reduce using rule 52 (factor1 -> PLUS varcte .)


state 69

    (33) exp1 -> epsilon .

    VECTOR          reduce using rule 33 (exp1 -> epsilon .)
    INT             reduce using rule 33 (exp1 -> epsilon .)
    FLOAT           reduce using rule 33 (exp1 -> epsilon .)
    BOOL            reduce using rule 33 (exp1 -> epsilon .)
    STRING          reduce using rule 33 (exp1 -> epsilon .)
    FUNCTION        reduce using rule 33 (exp1 -> epsilon .)
    MAIN            reduce using rule 33 (exp1 -> epsilon .)
    ID              reduce using rule 33 (exp1 -> epsilon .)
    IF              reduce using rule 33 (exp1 -> epsilon .)
    SWITCH          reduce using rule 33 (exp1 -> epsilon .)
    WHILE           reduce using rule 33 (exp1 -> epsilon .)
    FOR             reduce using rule 33 (exp1 -> epsilon .)
    PRINT           reduce using rule 33 (exp1 -> epsilon .)
    INPUT           reduce using rule 33 (exp1 -> epsilon .)
    RPAREN          reduce using rule 33 (exp1 -> epsilon .)
    COMMA           reduce using rule 33 (exp1 -> epsilon .)
    RBRACKET        reduce using rule 33 (exp1 -> epsilon .)
    RCURL           reduce using rule 33 (exp1 -> epsilon .)
    RETURN          reduce using rule 33 (exp1 -> epsilon .)
    CASE            reduce using rule 33 (exp1 -> epsilon .)
    DEFAULT         reduce using rule 33 (exp1 -> epsilon .)
    AND             reduce using rule 33 (exp1 -> epsilon .)
    OR              reduce using rule 33 (exp1 -> epsilon .)
    LESS            reduce using rule 33 (exp1 -> epsilon .)
    GREATER         reduce using rule 33 (exp1 -> epsilon .)
    DOUBLE_EQUAL    reduce using rule 33 (exp1 -> epsilon .)
    DIFF            reduce using rule 33 (exp1 -> epsilon .)


state 70

    (30) exp -> termino exp1 .

    RPAREN          reduce using rule 30 (exp -> termino exp1 .)
    AND             reduce using rule 30 (exp -> termino exp1 .)
    OR              reduce using rule 30 (exp -> termino exp1 .)
    LESS            reduce using rule 30 (exp -> termino exp1 .)
    GREATER         reduce using rule 30 (exp -> termino exp1 .)
    DOUBLE_EQUAL    reduce using rule 30 (exp -> termino exp1 .)
    DIFF            reduce using rule 30 (exp -> termino exp1 .)
    RBRACKET        reduce using rule 30 (exp -> termino exp1 .)
    COMMA           reduce using rule 30 (exp -> termino exp1 .)
    VECTOR          reduce using rule 30 (exp -> termino exp1 .)
    INT             reduce using rule 30 (exp -> termino exp1 .)
    FLOAT           reduce using rule 30 (exp -> termino exp1 .)
    BOOL            reduce using rule 30 (exp -> termino exp1 .)
    STRING          reduce using rule 30 (exp -> termino exp1 .)
    FUNCTION        reduce using rule 30 (exp -> termino exp1 .)
    MAIN            reduce using rule 30 (exp -> termino exp1 .)
    ID              reduce using rule 30 (exp -> termino exp1 .)
    IF              reduce using rule 30 (exp -> termino exp1 .)
    SWITCH          reduce using rule 30 (exp -> termino exp1 .)
    WHILE           reduce using rule 30 (exp -> termino exp1 .)
    FOR             reduce using rule 30 (exp -> termino exp1 .)
    PRINT           reduce using rule 30 (exp -> termino exp1 .)
    INPUT           reduce using rule 30 (exp -> termino exp1 .)
    RCURL           reduce using rule 30 (exp -> termino exp1 .)
    RETURN          reduce using rule 30 (exp -> termino exp1 .)
    CASE            reduce using rule 30 (exp -> termino exp1 .)
    DEFAULT         reduce using rule 30 (exp -> termino exp1 .)


state 71

    (31) exp1 -> PLUS . exp
    (30) exp -> . termino exp1
    (34) termino -> . factor termino1
    (50) factor -> . LPAREN expresion RPAREN
    (51) factor -> . factor1
    (52) factor1 -> . PLUS varcte
    (53) factor1 -> . MINUS varcte
    (54) factor1 -> . varcte
    (82) varcte -> . ID varcte1
    (83) varcte -> . CTE_INT
    (84) varcte -> . CTE_FLOAT
    (85) varcte -> . CTE_STRING
    (86) varcte -> . cte_bool
    (92) cte_bool -> . TRUE
    (93) cte_bool -> . FALSE

    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    factor1                        shift and go to state 53
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 46
    exp                            shift and go to state 89
    factor                         shift and go to state 48
    varcte                         shift and go to state 39

state 72

    (32) exp1 -> MINUS . exp
    (30) exp -> . termino exp1
    (34) termino -> . factor termino1
    (50) factor -> . LPAREN expresion RPAREN
    (51) factor -> . factor1
    (52) factor1 -> . PLUS varcte
    (53) factor1 -> . MINUS varcte
    (54) factor1 -> . varcte
    (82) varcte -> . ID varcte1
    (83) varcte -> . CTE_INT
    (84) varcte -> . CTE_FLOAT
    (85) varcte -> . CTE_STRING
    (86) varcte -> . cte_bool
    (92) cte_bool -> . TRUE
    (93) cte_bool -> . FALSE

    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    factor1                        shift and go to state 53
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 46
    exp                            shift and go to state 90
    factor                         shift and go to state 48
    varcte                         shift and go to state 39

state 73

    (36) termino1 -> DIVIDE . termino
    (34) termino -> . factor termino1
    (50) factor -> . LPAREN expresion RPAREN
    (51) factor -> . factor1
    (52) factor1 -> . PLUS varcte
    (53) factor1 -> . MINUS varcte
    (54) factor1 -> . varcte
    (82) varcte -> . ID varcte1
    (83) varcte -> . CTE_INT
    (84) varcte -> . CTE_FLOAT
    (85) varcte -> . CTE_STRING
    (86) varcte -> . cte_bool
    (92) cte_bool -> . TRUE
    (93) cte_bool -> . FALSE

    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    varcte                         shift and go to state 39
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 91
    factor                         shift and go to state 48
    factor1                        shift and go to state 53

state 74

    (37) termino1 -> epsilon .

    PLUS            reduce using rule 37 (termino1 -> epsilon .)
    MINUS           reduce using rule 37 (termino1 -> epsilon .)
    VECTOR          reduce using rule 37 (termino1 -> epsilon .)
    INT             reduce using rule 37 (termino1 -> epsilon .)
    FLOAT           reduce using rule 37 (termino1 -> epsilon .)
    BOOL            reduce using rule 37 (termino1 -> epsilon .)
    STRING          reduce using rule 37 (termino1 -> epsilon .)
    FUNCTION        reduce using rule 37 (termino1 -> epsilon .)
    MAIN            reduce using rule 37 (termino1 -> epsilon .)
    ID              reduce using rule 37 (termino1 -> epsilon .)
    IF              reduce using rule 37 (termino1 -> epsilon .)
    SWITCH          reduce using rule 37 (termino1 -> epsilon .)
    WHILE           reduce using rule 37 (termino1 -> epsilon .)
    FOR             reduce using rule 37 (termino1 -> epsilon .)
    PRINT           reduce using rule 37 (termino1 -> epsilon .)
    INPUT           reduce using rule 37 (termino1 -> epsilon .)
    RPAREN          reduce using rule 37 (termino1 -> epsilon .)
    COMMA           reduce using rule 37 (termino1 -> epsilon .)
    RBRACKET        reduce using rule 37 (termino1 -> epsilon .)
    RCURL           reduce using rule 37 (termino1 -> epsilon .)
    RETURN          reduce using rule 37 (termino1 -> epsilon .)
    CASE            reduce using rule 37 (termino1 -> epsilon .)
    DEFAULT         reduce using rule 37 (termino1 -> epsilon .)
    AND             reduce using rule 37 (termino1 -> epsilon .)
    OR              reduce using rule 37 (termino1 -> epsilon .)
    LESS            reduce using rule 37 (termino1 -> epsilon .)
    GREATER         reduce using rule 37 (termino1 -> epsilon .)
    DOUBLE_EQUAL    reduce using rule 37 (termino1 -> epsilon .)
    DIFF            reduce using rule 37 (termino1 -> epsilon .)


state 75

    (34) termino -> factor termino1 .

    PLUS            reduce using rule 34 (termino -> factor termino1 .)
    MINUS           reduce using rule 34 (termino -> factor termino1 .)
    COMMA           reduce using rule 34 (termino -> factor termino1 .)
    RPAREN          reduce using rule 34 (termino -> factor termino1 .)
    LESS            reduce using rule 34 (termino -> factor termino1 .)
    GREATER         reduce using rule 34 (termino -> factor termino1 .)
    DOUBLE_EQUAL    reduce using rule 34 (termino -> factor termino1 .)
    DIFF            reduce using rule 34 (termino -> factor termino1 .)
    VECTOR          reduce using rule 34 (termino -> factor termino1 .)
    INT             reduce using rule 34 (termino -> factor termino1 .)
    FLOAT           reduce using rule 34 (termino -> factor termino1 .)
    BOOL            reduce using rule 34 (termino -> factor termino1 .)
    STRING          reduce using rule 34 (termino -> factor termino1 .)
    FUNCTION        reduce using rule 34 (termino -> factor termino1 .)
    MAIN            reduce using rule 34 (termino -> factor termino1 .)
    ID              reduce using rule 34 (termino -> factor termino1 .)
    IF              reduce using rule 34 (termino -> factor termino1 .)
    SWITCH          reduce using rule 34 (termino -> factor termino1 .)
    WHILE           reduce using rule 34 (termino -> factor termino1 .)
    FOR             reduce using rule 34 (termino -> factor termino1 .)
    PRINT           reduce using rule 34 (termino -> factor termino1 .)
    INPUT           reduce using rule 34 (termino -> factor termino1 .)
    RBRACKET        reduce using rule 34 (termino -> factor termino1 .)
    RCURL           reduce using rule 34 (termino -> factor termino1 .)
    RETURN          reduce using rule 34 (termino -> factor termino1 .)
    CASE            reduce using rule 34 (termino -> factor termino1 .)
    DEFAULT         reduce using rule 34 (termino -> factor termino1 .)
    AND             reduce using rule 34 (termino -> factor termino1 .)
    OR              reduce using rule 34 (termino -> factor termino1 .)


state 76

    (35) termino1 -> TIMES . termino
    (34) termino -> . factor termino1
    (50) factor -> . LPAREN expresion RPAREN
    (51) factor -> . factor1
    (52) factor1 -> . PLUS varcte
    (53) factor1 -> . MINUS varcte
    (54) factor1 -> . varcte
    (82) varcte -> . ID varcte1
    (83) varcte -> . CTE_INT
    (84) varcte -> . CTE_FLOAT
    (85) varcte -> . CTE_STRING
    (86) varcte -> . cte_bool
    (92) cte_bool -> . TRUE
    (93) cte_bool -> . FALSE

    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    varcte                         shift and go to state 39
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 92
    factor                         shift and go to state 48
    factor1                        shift and go to state 53

state 77

    (88) varcte1 -> LPAREN . exp varcte2 RPAREN
    (30) exp -> . termino exp1
    (34) termino -> . factor termino1
    (50) factor -> . LPAREN expresion RPAREN
    (51) factor -> . factor1
    (52) factor1 -> . PLUS varcte
    (53) factor1 -> . MINUS varcte
    (54) factor1 -> . varcte
    (82) varcte -> . ID varcte1
    (83) varcte -> . CTE_INT
    (84) varcte -> . CTE_FLOAT
    (85) varcte -> . CTE_STRING
    (86) varcte -> . cte_bool
    (92) cte_bool -> . TRUE
    (93) cte_bool -> . FALSE

    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    factor1                        shift and go to state 53
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 46
    exp                            shift and go to state 93
    factor                         shift and go to state 48
    varcte                         shift and go to state 39

state 78

    (87) varcte1 -> epsilon .

    TIMES           reduce using rule 87 (varcte1 -> epsilon .)
    DIVIDE          reduce using rule 87 (varcte1 -> epsilon .)
    PLUS            reduce using rule 87 (varcte1 -> epsilon .)
    MINUS           reduce using rule 87 (varcte1 -> epsilon .)
    ID              reduce using rule 87 (varcte1 -> epsilon .)
    IF              reduce using rule 87 (varcte1 -> epsilon .)
    SWITCH          reduce using rule 87 (varcte1 -> epsilon .)
    WHILE           reduce using rule 87 (varcte1 -> epsilon .)
    FOR             reduce using rule 87 (varcte1 -> epsilon .)
    PRINT           reduce using rule 87 (varcte1 -> epsilon .)
    INPUT           reduce using rule 87 (varcte1 -> epsilon .)
    RCURL           reduce using rule 87 (varcte1 -> epsilon .)
    RETURN          reduce using rule 87 (varcte1 -> epsilon .)
    CASE            reduce using rule 87 (varcte1 -> epsilon .)
    DEFAULT         reduce using rule 87 (varcte1 -> epsilon .)
    VECTOR          reduce using rule 87 (varcte1 -> epsilon .)
    INT             reduce using rule 87 (varcte1 -> epsilon .)
    FLOAT           reduce using rule 87 (varcte1 -> epsilon .)
    BOOL            reduce using rule 87 (varcte1 -> epsilon .)
    STRING          reduce using rule 87 (varcte1 -> epsilon .)
    FUNCTION        reduce using rule 87 (varcte1 -> epsilon .)
    MAIN            reduce using rule 87 (varcte1 -> epsilon .)
    RPAREN          reduce using rule 87 (varcte1 -> epsilon .)
    COMMA           reduce using rule 87 (varcte1 -> epsilon .)
    RBRACKET        reduce using rule 87 (varcte1 -> epsilon .)
    AND             reduce using rule 87 (varcte1 -> epsilon .)
    OR              reduce using rule 87 (varcte1 -> epsilon .)
    LESS            reduce using rule 87 (varcte1 -> epsilon .)
    GREATER         reduce using rule 87 (varcte1 -> epsilon .)
    DOUBLE_EQUAL    reduce using rule 87 (varcte1 -> epsilon .)
    DIFF            reduce using rule 87 (varcte1 -> epsilon .)
    COLON           reduce using rule 87 (varcte1 -> epsilon .)


state 79

    (89) varcte1 -> LBRACKET . exp RBRACKET
    (30) exp -> . termino exp1
    (34) termino -> . factor termino1
    (50) factor -> . LPAREN expresion RPAREN
    (51) factor -> . factor1
    (52) factor1 -> . PLUS varcte
    (53) factor1 -> . MINUS varcte
    (54) factor1 -> . varcte
    (82) varcte -> . ID varcte1
    (83) varcte -> . CTE_INT
    (84) varcte -> . CTE_FLOAT
    (85) varcte -> . CTE_STRING
    (86) varcte -> . cte_bool
    (92) cte_bool -> . TRUE
    (93) cte_bool -> . FALSE

    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    factor1                        shift and go to state 53
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 46
    exp                            shift and go to state 94
    factor                         shift and go to state 48
    varcte                         shift and go to state 39

state 80

    (82) varcte -> ID varcte1 .

    TIMES           reduce using rule 82 (varcte -> ID varcte1 .)
    DIVIDE          reduce using rule 82 (varcte -> ID varcte1 .)
    PLUS            reduce using rule 82 (varcte -> ID varcte1 .)
    MINUS           reduce using rule 82 (varcte -> ID varcte1 .)
    VECTOR          reduce using rule 82 (varcte -> ID varcte1 .)
    INT             reduce using rule 82 (varcte -> ID varcte1 .)
    FLOAT           reduce using rule 82 (varcte -> ID varcte1 .)
    BOOL            reduce using rule 82 (varcte -> ID varcte1 .)
    STRING          reduce using rule 82 (varcte -> ID varcte1 .)
    FUNCTION        reduce using rule 82 (varcte -> ID varcte1 .)
    MAIN            reduce using rule 82 (varcte -> ID varcte1 .)
    ID              reduce using rule 82 (varcte -> ID varcte1 .)
    IF              reduce using rule 82 (varcte -> ID varcte1 .)
    SWITCH          reduce using rule 82 (varcte -> ID varcte1 .)
    WHILE           reduce using rule 82 (varcte -> ID varcte1 .)
    FOR             reduce using rule 82 (varcte -> ID varcte1 .)
    PRINT           reduce using rule 82 (varcte -> ID varcte1 .)
    INPUT           reduce using rule 82 (varcte -> ID varcte1 .)
    COMMA           reduce using rule 82 (varcte -> ID varcte1 .)
    RPAREN          reduce using rule 82 (varcte -> ID varcte1 .)
    RBRACKET        reduce using rule 82 (varcte -> ID varcte1 .)
    LESS            reduce using rule 82 (varcte -> ID varcte1 .)
    GREATER         reduce using rule 82 (varcte -> ID varcte1 .)
    DOUBLE_EQUAL    reduce using rule 82 (varcte -> ID varcte1 .)
    DIFF            reduce using rule 82 (varcte -> ID varcte1 .)
    RCURL           reduce using rule 82 (varcte -> ID varcte1 .)
    RETURN          reduce using rule 82 (varcte -> ID varcte1 .)
    CASE            reduce using rule 82 (varcte -> ID varcte1 .)
    DEFAULT         reduce using rule 82 (varcte -> ID varcte1 .)
    AND             reduce using rule 82 (varcte -> ID varcte1 .)
    OR              reduce using rule 82 (varcte -> ID varcte1 .)
    COLON           reduce using rule 82 (varcte -> ID varcte1 .)


state 81

    (53) factor1 -> MINUS varcte .

    TIMES           reduce using rule 53 (factor1 -> MINUS varcte .)
    DIVIDE          reduce using rule 53 (factor1 -> MINUS varcte .)
    PLUS            reduce using rule 53 (factor1 -> MINUS varcte .)
    MINUS           reduce using rule 53 (factor1 -> MINUS varcte .)
    VECTOR          reduce using rule 53 (factor1 -> MINUS varcte .)
    INT             reduce using rule 53 (factor1 -> MINUS varcte .)
    FLOAT           reduce using rule 53 (factor1 -> MINUS varcte .)
    BOOL            reduce using rule 53 (factor1 -> MINUS varcte .)
    STRING          reduce using rule 53 (factor1 -> MINUS varcte .)
    FUNCTION        reduce using rule 53 (factor1 -> MINUS varcte .)
    MAIN            reduce using rule 53 (factor1 -> MINUS varcte .)
    ID              reduce using rule 53 (factor1 -> MINUS varcte .)
    IF              reduce using rule 53 (factor1 -> MINUS varcte .)
    SWITCH          reduce using rule 53 (factor1 -> MINUS varcte .)
    WHILE           reduce using rule 53 (factor1 -> MINUS varcte .)
    FOR             reduce using rule 53 (factor1 -> MINUS varcte .)
    PRINT           reduce using rule 53 (factor1 -> MINUS varcte .)
    INPUT           reduce using rule 53 (factor1 -> MINUS varcte .)
    RPAREN          reduce using rule 53 (factor1 -> MINUS varcte .)
    COMMA           reduce using rule 53 (factor1 -> MINUS varcte .)
    RBRACKET        reduce using rule 53 (factor1 -> MINUS varcte .)
    RCURL           reduce using rule 53 (factor1 -> MINUS varcte .)
    RETURN          reduce using rule 53 (factor1 -> MINUS varcte .)
    CASE            reduce using rule 53 (factor1 -> MINUS varcte .)
    DEFAULT         reduce using rule 53 (factor1 -> MINUS varcte .)
    AND             reduce using rule 53 (factor1 -> MINUS varcte .)
    OR              reduce using rule 53 (factor1 -> MINUS varcte .)
    LESS            reduce using rule 53 (factor1 -> MINUS varcte .)
    GREATER         reduce using rule 53 (factor1 -> MINUS varcte .)
    DOUBLE_EQUAL    reduce using rule 53 (factor1 -> MINUS varcte .)
    DIFF            reduce using rule 53 (factor1 -> MINUS varcte .)


state 82

    (123) funcion5 -> ID declareFunc LPAREN . funcion3 RPAREN LCURL funcion1 estatuto funcion2 funcion6
    (119) funcion3 -> . parametros
    (120) funcion3 -> . epsilon
    (16) parametros -> . tipo parametros1 ID parametros2
    (17) parametros -> . VECTOR tipo parametros1 ID parametros2
    (135) epsilon -> .
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    VECTOR          shift and go to state 99
    RPAREN          reduce using rule 135 (epsilon -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 95
    epsilon                        shift and go to state 96
    funcion3                       shift and go to state 97
    parametros                     shift and go to state 98

state 83

    (43) main -> MAIN declareMain LCURL main1 . estatuto main2 RCURL
    (55) estatuto -> . asignacion
    (56) estatuto -> . llamada
    (57) estatuto -> . condicion
    (58) estatuto -> . switch
    (59) estatuto -> . while
    (60) estatuto -> . for
    (61) asignacion -> . ID EQUALS asignacion1
    (75) llamada -> . ID LPAREN llamada1 RPAREN
    (76) llamada -> . print
    (77) llamada -> . input
    (99) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (127) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (49) while -> . WHILE LPAREN expresion RPAREN bloque
    (109) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (94) print -> . PRINT LPAREN print1 RPAREN
    (106) input -> . INPUT LPAREN input1 RPAREN

    ID              shift and go to state 111
    IF              shift and go to state 112
    SWITCH          shift and go to state 105
    WHILE           shift and go to state 100
    FOR             shift and go to state 109
    PRINT           shift and go to state 101
    INPUT           shift and go to state 110

    for                            shift and go to state 102
    estatuto                       shift and go to state 103
    switch                         shift and go to state 114
    llamada                        shift and go to state 104
    condicion                      shift and go to state 106
    print                          shift and go to state 107
    input                          shift and go to state 108
    asignacion                     shift and go to state 113
    while                          shift and go to state 115

state 84

    (45) main1 -> var_declaracion . main1
    (45) main1 -> . var_declaracion main1
    (46) main1 -> . epsilon
    (6) var_declaracion -> . tipo var_declaracion1
    (7) var_declaracion -> . VECTOR tipo var_declaracion2
    (135) epsilon -> .
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    VECTOR          shift and go to state 8
    ID              reduce using rule 135 (epsilon -> .)
    IF              reduce using rule 135 (epsilon -> .)
    SWITCH          reduce using rule 135 (epsilon -> .)
    WHILE           reduce using rule 135 (epsilon -> .)
    FOR             reduce using rule 135 (epsilon -> .)
    PRINT           reduce using rule 135 (epsilon -> .)
    INPUT           reduce using rule 135 (epsilon -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 5
    main1                          shift and go to state 116
    var_declaracion                shift and go to state 84
    epsilon                        shift and go to state 85

state 85

    (46) main1 -> epsilon .

    ID              reduce using rule 46 (main1 -> epsilon .)
    IF              reduce using rule 46 (main1 -> epsilon .)
    SWITCH          reduce using rule 46 (main1 -> epsilon .)
    WHILE           reduce using rule 46 (main1 -> epsilon .)
    FOR             reduce using rule 46 (main1 -> epsilon .)
    PRINT           reduce using rule 46 (main1 -> epsilon .)
    INPUT           reduce using rule 46 (main1 -> epsilon .)


state 86

    (38) inicializacion_vector -> EQUALS LBRACKET . inicializacion_vector1 RBRACKET
    (39) inicializacion_vector1 -> . varcte inicializacion_vector2
    (40) inicializacion_vector1 -> . epsilon
    (82) varcte -> . ID varcte1
    (83) varcte -> . CTE_INT
    (84) varcte -> . CTE_FLOAT
    (85) varcte -> . CTE_STRING
    (86) varcte -> . cte_bool
    (135) epsilon -> .
    (92) cte_bool -> . TRUE
    (93) cte_bool -> . FALSE

    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    RBRACKET        reduce using rule 135 (epsilon -> .)
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    varcte                         shift and go to state 117
    epsilon                        shift and go to state 118
    cte_bool                       shift and go to state 51
    inicializacion_vector1         shift and go to state 119

state 87

    (50) factor -> LPAREN expresion RPAREN .

    TIMES           reduce using rule 50 (factor -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 50 (factor -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 50 (factor -> LPAREN expresion RPAREN .)
    MINUS           reduce using rule 50 (factor -> LPAREN expresion RPAREN .)
    COMMA           reduce using rule 50 (factor -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 50 (factor -> LPAREN expresion RPAREN .)
    VECTOR          reduce using rule 50 (factor -> LPAREN expresion RPAREN .)
    INT             reduce using rule 50 (factor -> LPAREN expresion RPAREN .)
    FLOAT           reduce using rule 50 (factor -> LPAREN expresion RPAREN .)
    BOOL            reduce using rule 50 (factor -> LPAREN expresion RPAREN .)
    STRING          reduce using rule 50 (factor -> LPAREN expresion RPAREN .)
    FUNCTION        reduce using rule 50 (factor -> LPAREN expresion RPAREN .)
    MAIN            reduce using rule 50 (factor -> LPAREN expresion RPAREN .)
    ID              reduce using rule 50 (factor -> LPAREN expresion RPAREN .)
    IF              reduce using rule 50 (factor -> LPAREN expresion RPAREN .)
    SWITCH          reduce using rule 50 (factor -> LPAREN expresion RPAREN .)
    WHILE           reduce using rule 50 (factor -> LPAREN expresion RPAREN .)
    FOR             reduce using rule 50 (factor -> LPAREN expresion RPAREN .)
    PRINT           reduce using rule 50 (factor -> LPAREN expresion RPAREN .)
    INPUT           reduce using rule 50 (factor -> LPAREN expresion RPAREN .)
    RBRACKET        reduce using rule 50 (factor -> LPAREN expresion RPAREN .)
    RCURL           reduce using rule 50 (factor -> LPAREN expresion RPAREN .)
    RETURN          reduce using rule 50 (factor -> LPAREN expresion RPAREN .)
    CASE            reduce using rule 50 (factor -> LPAREN expresion RPAREN .)
    DEFAULT         reduce using rule 50 (factor -> LPAREN expresion RPAREN .)
    AND             reduce using rule 50 (factor -> LPAREN expresion RPAREN .)
    OR              reduce using rule 50 (factor -> LPAREN expresion RPAREN .)
    LESS            reduce using rule 50 (factor -> LPAREN expresion RPAREN .)
    GREATER         reduce using rule 50 (factor -> LPAREN expresion RPAREN .)
    DOUBLE_EQUAL    reduce using rule 50 (factor -> LPAREN expresion RPAREN .)
    DIFF            reduce using rule 50 (factor -> LPAREN expresion RPAREN .)


state 88

    (66) expresion1 -> expresion2 exp .

    RPAREN          reduce using rule 66 (expresion1 -> expresion2 exp .)


state 89

    (31) exp1 -> PLUS exp .

    VECTOR          reduce using rule 31 (exp1 -> PLUS exp .)
    INT             reduce using rule 31 (exp1 -> PLUS exp .)
    FLOAT           reduce using rule 31 (exp1 -> PLUS exp .)
    BOOL            reduce using rule 31 (exp1 -> PLUS exp .)
    STRING          reduce using rule 31 (exp1 -> PLUS exp .)
    FUNCTION        reduce using rule 31 (exp1 -> PLUS exp .)
    MAIN            reduce using rule 31 (exp1 -> PLUS exp .)
    ID              reduce using rule 31 (exp1 -> PLUS exp .)
    IF              reduce using rule 31 (exp1 -> PLUS exp .)
    SWITCH          reduce using rule 31 (exp1 -> PLUS exp .)
    WHILE           reduce using rule 31 (exp1 -> PLUS exp .)
    FOR             reduce using rule 31 (exp1 -> PLUS exp .)
    PRINT           reduce using rule 31 (exp1 -> PLUS exp .)
    INPUT           reduce using rule 31 (exp1 -> PLUS exp .)
    RPAREN          reduce using rule 31 (exp1 -> PLUS exp .)
    COMMA           reduce using rule 31 (exp1 -> PLUS exp .)
    RBRACKET        reduce using rule 31 (exp1 -> PLUS exp .)
    RCURL           reduce using rule 31 (exp1 -> PLUS exp .)
    RETURN          reduce using rule 31 (exp1 -> PLUS exp .)
    CASE            reduce using rule 31 (exp1 -> PLUS exp .)
    DEFAULT         reduce using rule 31 (exp1 -> PLUS exp .)
    AND             reduce using rule 31 (exp1 -> PLUS exp .)
    OR              reduce using rule 31 (exp1 -> PLUS exp .)
    LESS            reduce using rule 31 (exp1 -> PLUS exp .)
    GREATER         reduce using rule 31 (exp1 -> PLUS exp .)
    DOUBLE_EQUAL    reduce using rule 31 (exp1 -> PLUS exp .)
    DIFF            reduce using rule 31 (exp1 -> PLUS exp .)


state 90

    (32) exp1 -> MINUS exp .

    VECTOR          reduce using rule 32 (exp1 -> MINUS exp .)
    INT             reduce using rule 32 (exp1 -> MINUS exp .)
    FLOAT           reduce using rule 32 (exp1 -> MINUS exp .)
    BOOL            reduce using rule 32 (exp1 -> MINUS exp .)
    STRING          reduce using rule 32 (exp1 -> MINUS exp .)
    FUNCTION        reduce using rule 32 (exp1 -> MINUS exp .)
    MAIN            reduce using rule 32 (exp1 -> MINUS exp .)
    ID              reduce using rule 32 (exp1 -> MINUS exp .)
    IF              reduce using rule 32 (exp1 -> MINUS exp .)
    SWITCH          reduce using rule 32 (exp1 -> MINUS exp .)
    WHILE           reduce using rule 32 (exp1 -> MINUS exp .)
    FOR             reduce using rule 32 (exp1 -> MINUS exp .)
    PRINT           reduce using rule 32 (exp1 -> MINUS exp .)
    INPUT           reduce using rule 32 (exp1 -> MINUS exp .)
    RPAREN          reduce using rule 32 (exp1 -> MINUS exp .)
    COMMA           reduce using rule 32 (exp1 -> MINUS exp .)
    RBRACKET        reduce using rule 32 (exp1 -> MINUS exp .)
    RCURL           reduce using rule 32 (exp1 -> MINUS exp .)
    RETURN          reduce using rule 32 (exp1 -> MINUS exp .)
    CASE            reduce using rule 32 (exp1 -> MINUS exp .)
    DEFAULT         reduce using rule 32 (exp1 -> MINUS exp .)
    AND             reduce using rule 32 (exp1 -> MINUS exp .)
    OR              reduce using rule 32 (exp1 -> MINUS exp .)
    LESS            reduce using rule 32 (exp1 -> MINUS exp .)
    GREATER         reduce using rule 32 (exp1 -> MINUS exp .)
    DOUBLE_EQUAL    reduce using rule 32 (exp1 -> MINUS exp .)
    DIFF            reduce using rule 32 (exp1 -> MINUS exp .)


state 91

    (36) termino1 -> DIVIDE termino .

    PLUS            reduce using rule 36 (termino1 -> DIVIDE termino .)
    MINUS           reduce using rule 36 (termino1 -> DIVIDE termino .)
    VECTOR          reduce using rule 36 (termino1 -> DIVIDE termino .)
    INT             reduce using rule 36 (termino1 -> DIVIDE termino .)
    FLOAT           reduce using rule 36 (termino1 -> DIVIDE termino .)
    BOOL            reduce using rule 36 (termino1 -> DIVIDE termino .)
    STRING          reduce using rule 36 (termino1 -> DIVIDE termino .)
    FUNCTION        reduce using rule 36 (termino1 -> DIVIDE termino .)
    MAIN            reduce using rule 36 (termino1 -> DIVIDE termino .)
    ID              reduce using rule 36 (termino1 -> DIVIDE termino .)
    IF              reduce using rule 36 (termino1 -> DIVIDE termino .)
    SWITCH          reduce using rule 36 (termino1 -> DIVIDE termino .)
    WHILE           reduce using rule 36 (termino1 -> DIVIDE termino .)
    FOR             reduce using rule 36 (termino1 -> DIVIDE termino .)
    PRINT           reduce using rule 36 (termino1 -> DIVIDE termino .)
    INPUT           reduce using rule 36 (termino1 -> DIVIDE termino .)
    RPAREN          reduce using rule 36 (termino1 -> DIVIDE termino .)
    COMMA           reduce using rule 36 (termino1 -> DIVIDE termino .)
    RBRACKET        reduce using rule 36 (termino1 -> DIVIDE termino .)
    RCURL           reduce using rule 36 (termino1 -> DIVIDE termino .)
    RETURN          reduce using rule 36 (termino1 -> DIVIDE termino .)
    CASE            reduce using rule 36 (termino1 -> DIVIDE termino .)
    DEFAULT         reduce using rule 36 (termino1 -> DIVIDE termino .)
    AND             reduce using rule 36 (termino1 -> DIVIDE termino .)
    OR              reduce using rule 36 (termino1 -> DIVIDE termino .)
    LESS            reduce using rule 36 (termino1 -> DIVIDE termino .)
    GREATER         reduce using rule 36 (termino1 -> DIVIDE termino .)
    DOUBLE_EQUAL    reduce using rule 36 (termino1 -> DIVIDE termino .)
    DIFF            reduce using rule 36 (termino1 -> DIVIDE termino .)


state 92

    (35) termino1 -> TIMES termino .

    PLUS            reduce using rule 35 (termino1 -> TIMES termino .)
    MINUS           reduce using rule 35 (termino1 -> TIMES termino .)
    VECTOR          reduce using rule 35 (termino1 -> TIMES termino .)
    INT             reduce using rule 35 (termino1 -> TIMES termino .)
    FLOAT           reduce using rule 35 (termino1 -> TIMES termino .)
    BOOL            reduce using rule 35 (termino1 -> TIMES termino .)
    STRING          reduce using rule 35 (termino1 -> TIMES termino .)
    FUNCTION        reduce using rule 35 (termino1 -> TIMES termino .)
    MAIN            reduce using rule 35 (termino1 -> TIMES termino .)
    ID              reduce using rule 35 (termino1 -> TIMES termino .)
    IF              reduce using rule 35 (termino1 -> TIMES termino .)
    SWITCH          reduce using rule 35 (termino1 -> TIMES termino .)
    WHILE           reduce using rule 35 (termino1 -> TIMES termino .)
    FOR             reduce using rule 35 (termino1 -> TIMES termino .)
    PRINT           reduce using rule 35 (termino1 -> TIMES termino .)
    INPUT           reduce using rule 35 (termino1 -> TIMES termino .)
    RPAREN          reduce using rule 35 (termino1 -> TIMES termino .)
    COMMA           reduce using rule 35 (termino1 -> TIMES termino .)
    RBRACKET        reduce using rule 35 (termino1 -> TIMES termino .)
    RCURL           reduce using rule 35 (termino1 -> TIMES termino .)
    RETURN          reduce using rule 35 (termino1 -> TIMES termino .)
    CASE            reduce using rule 35 (termino1 -> TIMES termino .)
    DEFAULT         reduce using rule 35 (termino1 -> TIMES termino .)
    AND             reduce using rule 35 (termino1 -> TIMES termino .)
    OR              reduce using rule 35 (termino1 -> TIMES termino .)
    LESS            reduce using rule 35 (termino1 -> TIMES termino .)
    GREATER         reduce using rule 35 (termino1 -> TIMES termino .)
    DOUBLE_EQUAL    reduce using rule 35 (termino1 -> TIMES termino .)
    DIFF            reduce using rule 35 (termino1 -> TIMES termino .)


state 93

    (88) varcte1 -> LPAREN exp . varcte2 RPAREN
    (90) varcte2 -> . epsilon
    (91) varcte2 -> . COMMA exp varcte2
    (135) epsilon -> .

    COMMA           shift and go to state 121
    RPAREN          reduce using rule 135 (epsilon -> .)

    epsilon                        shift and go to state 120
    varcte2                        shift and go to state 122

state 94

    (89) varcte1 -> LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 123


state 95

    (16) parametros -> tipo . parametros1 ID parametros2
    (18) parametros1 -> . AMPERSON
    (19) parametros1 -> . epsilon
    (135) epsilon -> .

    AMPERSON        shift and go to state 126
    ID              reduce using rule 135 (epsilon -> .)

    parametros1                    shift and go to state 125
    epsilon                        shift and go to state 124

state 96

    (120) funcion3 -> epsilon .

    RPAREN          reduce using rule 120 (funcion3 -> epsilon .)


state 97

    (123) funcion5 -> ID declareFunc LPAREN funcion3 . RPAREN LCURL funcion1 estatuto funcion2 funcion6

    RPAREN          shift and go to state 127


state 98

    (119) funcion3 -> parametros .

    RPAREN          reduce using rule 119 (funcion3 -> parametros .)


state 99

    (17) parametros -> VECTOR . tipo parametros1 ID parametros2
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 128

state 100

    (49) while -> WHILE . LPAREN expresion RPAREN bloque

    LPAREN          shift and go to state 129


state 101

    (94) print -> PRINT . LPAREN print1 RPAREN

    LPAREN          shift and go to state 130


state 102

    (60) estatuto -> for .

    RCURL           reduce using rule 60 (estatuto -> for .)
    ID              reduce using rule 60 (estatuto -> for .)
    IF              reduce using rule 60 (estatuto -> for .)
    SWITCH          reduce using rule 60 (estatuto -> for .)
    WHILE           reduce using rule 60 (estatuto -> for .)
    FOR             reduce using rule 60 (estatuto -> for .)
    PRINT           reduce using rule 60 (estatuto -> for .)
    INPUT           reduce using rule 60 (estatuto -> for .)
    RETURN          reduce using rule 60 (estatuto -> for .)
    CASE            reduce using rule 60 (estatuto -> for .)
    DEFAULT         reduce using rule 60 (estatuto -> for .)


state 103

    (43) main -> MAIN declareMain LCURL main1 estatuto . main2 RCURL
    (47) main2 -> . estatuto main2
    (48) main2 -> . epsilon
    (55) estatuto -> . asignacion
    (56) estatuto -> . llamada
    (57) estatuto -> . condicion
    (58) estatuto -> . switch
    (59) estatuto -> . while
    (60) estatuto -> . for
    (135) epsilon -> .
    (61) asignacion -> . ID EQUALS asignacion1
    (75) llamada -> . ID LPAREN llamada1 RPAREN
    (76) llamada -> . print
    (77) llamada -> . input
    (99) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (127) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (49) while -> . WHILE LPAREN expresion RPAREN bloque
    (109) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (94) print -> . PRINT LPAREN print1 RPAREN
    (106) input -> . INPUT LPAREN input1 RPAREN

    RCURL           reduce using rule 135 (epsilon -> .)
    ID              shift and go to state 111
    IF              shift and go to state 112
    SWITCH          shift and go to state 105
    WHILE           shift and go to state 100
    FOR             shift and go to state 109
    PRINT           shift and go to state 101
    INPUT           shift and go to state 110

    for                            shift and go to state 102
    estatuto                       shift and go to state 131
    switch                         shift and go to state 114
    llamada                        shift and go to state 104
    condicion                      shift and go to state 106
    epsilon                        shift and go to state 132
    print                          shift and go to state 107
    input                          shift and go to state 108
    main2                          shift and go to state 133
    asignacion                     shift and go to state 113
    while                          shift and go to state 115

state 104

    (56) estatuto -> llamada .

    RCURL           reduce using rule 56 (estatuto -> llamada .)
    ID              reduce using rule 56 (estatuto -> llamada .)
    IF              reduce using rule 56 (estatuto -> llamada .)
    SWITCH          reduce using rule 56 (estatuto -> llamada .)
    WHILE           reduce using rule 56 (estatuto -> llamada .)
    FOR             reduce using rule 56 (estatuto -> llamada .)
    PRINT           reduce using rule 56 (estatuto -> llamada .)
    INPUT           reduce using rule 56 (estatuto -> llamada .)
    RETURN          reduce using rule 56 (estatuto -> llamada .)
    CASE            reduce using rule 56 (estatuto -> llamada .)
    DEFAULT         reduce using rule 56 (estatuto -> llamada .)


state 105

    (127) switch -> SWITCH . ID switch1 LCURL switch2 switch3 RCURL

    ID              shift and go to state 134


state 106

    (57) estatuto -> condicion .

    RCURL           reduce using rule 57 (estatuto -> condicion .)
    ID              reduce using rule 57 (estatuto -> condicion .)
    IF              reduce using rule 57 (estatuto -> condicion .)
    SWITCH          reduce using rule 57 (estatuto -> condicion .)
    WHILE           reduce using rule 57 (estatuto -> condicion .)
    FOR             reduce using rule 57 (estatuto -> condicion .)
    PRINT           reduce using rule 57 (estatuto -> condicion .)
    INPUT           reduce using rule 57 (estatuto -> condicion .)
    RETURN          reduce using rule 57 (estatuto -> condicion .)
    CASE            reduce using rule 57 (estatuto -> condicion .)
    DEFAULT         reduce using rule 57 (estatuto -> condicion .)


state 107

    (76) llamada -> print .

    ID              reduce using rule 76 (llamada -> print .)
    IF              reduce using rule 76 (llamada -> print .)
    SWITCH          reduce using rule 76 (llamada -> print .)
    WHILE           reduce using rule 76 (llamada -> print .)
    FOR             reduce using rule 76 (llamada -> print .)
    PRINT           reduce using rule 76 (llamada -> print .)
    INPUT           reduce using rule 76 (llamada -> print .)
    RCURL           reduce using rule 76 (llamada -> print .)
    RETURN          reduce using rule 76 (llamada -> print .)
    CASE            reduce using rule 76 (llamada -> print .)
    DEFAULT         reduce using rule 76 (llamada -> print .)


state 108

    (77) llamada -> input .

    ID              reduce using rule 77 (llamada -> input .)
    IF              reduce using rule 77 (llamada -> input .)
    SWITCH          reduce using rule 77 (llamada -> input .)
    WHILE           reduce using rule 77 (llamada -> input .)
    FOR             reduce using rule 77 (llamada -> input .)
    PRINT           reduce using rule 77 (llamada -> input .)
    INPUT           reduce using rule 77 (llamada -> input .)
    RCURL           reduce using rule 77 (llamada -> input .)
    RETURN          reduce using rule 77 (llamada -> input .)
    CASE            reduce using rule 77 (llamada -> input .)
    DEFAULT         reduce using rule 77 (llamada -> input .)


state 109

    (109) for -> FOR . CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque

    CTE_INT         shift and go to state 135


state 110

    (106) input -> INPUT . LPAREN input1 RPAREN

    LPAREN          shift and go to state 136


state 111

    (61) asignacion -> ID . EQUALS asignacion1
    (75) llamada -> ID . LPAREN llamada1 RPAREN

    EQUALS          shift and go to state 137
    LPAREN          shift and go to state 138


state 112

    (99) condicion -> IF . LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3

    LPAREN          shift and go to state 139


state 113

    (55) estatuto -> asignacion .

    RCURL           reduce using rule 55 (estatuto -> asignacion .)
    ID              reduce using rule 55 (estatuto -> asignacion .)
    IF              reduce using rule 55 (estatuto -> asignacion .)
    SWITCH          reduce using rule 55 (estatuto -> asignacion .)
    WHILE           reduce using rule 55 (estatuto -> asignacion .)
    FOR             reduce using rule 55 (estatuto -> asignacion .)
    PRINT           reduce using rule 55 (estatuto -> asignacion .)
    INPUT           reduce using rule 55 (estatuto -> asignacion .)
    RETURN          reduce using rule 55 (estatuto -> asignacion .)
    CASE            reduce using rule 55 (estatuto -> asignacion .)
    DEFAULT         reduce using rule 55 (estatuto -> asignacion .)


state 114

    (58) estatuto -> switch .

    RCURL           reduce using rule 58 (estatuto -> switch .)
    ID              reduce using rule 58 (estatuto -> switch .)
    IF              reduce using rule 58 (estatuto -> switch .)
    SWITCH          reduce using rule 58 (estatuto -> switch .)
    WHILE           reduce using rule 58 (estatuto -> switch .)
    FOR             reduce using rule 58 (estatuto -> switch .)
    PRINT           reduce using rule 58 (estatuto -> switch .)
    INPUT           reduce using rule 58 (estatuto -> switch .)
    RETURN          reduce using rule 58 (estatuto -> switch .)
    CASE            reduce using rule 58 (estatuto -> switch .)
    DEFAULT         reduce using rule 58 (estatuto -> switch .)


state 115

    (59) estatuto -> while .

    RCURL           reduce using rule 59 (estatuto -> while .)
    ID              reduce using rule 59 (estatuto -> while .)
    IF              reduce using rule 59 (estatuto -> while .)
    SWITCH          reduce using rule 59 (estatuto -> while .)
    WHILE           reduce using rule 59 (estatuto -> while .)
    FOR             reduce using rule 59 (estatuto -> while .)
    PRINT           reduce using rule 59 (estatuto -> while .)
    INPUT           reduce using rule 59 (estatuto -> while .)
    RETURN          reduce using rule 59 (estatuto -> while .)
    CASE            reduce using rule 59 (estatuto -> while .)
    DEFAULT         reduce using rule 59 (estatuto -> while .)


state 116

    (45) main1 -> var_declaracion main1 .

    ID              reduce using rule 45 (main1 -> var_declaracion main1 .)
    IF              reduce using rule 45 (main1 -> var_declaracion main1 .)
    SWITCH          reduce using rule 45 (main1 -> var_declaracion main1 .)
    WHILE           reduce using rule 45 (main1 -> var_declaracion main1 .)
    FOR             reduce using rule 45 (main1 -> var_declaracion main1 .)
    PRINT           reduce using rule 45 (main1 -> var_declaracion main1 .)
    INPUT           reduce using rule 45 (main1 -> var_declaracion main1 .)


state 117

    (39) inicializacion_vector1 -> varcte . inicializacion_vector2
    (41) inicializacion_vector2 -> . COMMA varcte inicializacion_vector2
    (42) inicializacion_vector2 -> . epsilon
    (135) epsilon -> .

    COMMA           shift and go to state 142
    RBRACKET        reduce using rule 135 (epsilon -> .)

    inicializacion_vector2         shift and go to state 140
    epsilon                        shift and go to state 141

state 118

    (40) inicializacion_vector1 -> epsilon .

    RBRACKET        reduce using rule 40 (inicializacion_vector1 -> epsilon .)


state 119

    (38) inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 . RBRACKET

    RBRACKET        shift and go to state 143


state 120

    (90) varcte2 -> epsilon .

    RPAREN          reduce using rule 90 (varcte2 -> epsilon .)


state 121

    (91) varcte2 -> COMMA . exp varcte2
    (30) exp -> . termino exp1
    (34) termino -> . factor termino1
    (50) factor -> . LPAREN expresion RPAREN
    (51) factor -> . factor1
    (52) factor1 -> . PLUS varcte
    (53) factor1 -> . MINUS varcte
    (54) factor1 -> . varcte
    (82) varcte -> . ID varcte1
    (83) varcte -> . CTE_INT
    (84) varcte -> . CTE_FLOAT
    (85) varcte -> . CTE_STRING
    (86) varcte -> . cte_bool
    (92) cte_bool -> . TRUE
    (93) cte_bool -> . FALSE

    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    factor1                        shift and go to state 53
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 46
    exp                            shift and go to state 144
    factor                         shift and go to state 48
    varcte                         shift and go to state 39

state 122

    (88) varcte1 -> LPAREN exp varcte2 . RPAREN

    RPAREN          shift and go to state 145


state 123

    (89) varcte1 -> LBRACKET exp RBRACKET .

    TIMES           reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    DIVIDE          reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    ID              reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    IF              reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    SWITCH          reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    WHILE           reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    FOR             reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    PRINT           reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    INPUT           reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    RCURL           reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    RETURN          reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    CASE            reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    DEFAULT         reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    VECTOR          reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    INT             reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    FLOAT           reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    BOOL            reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    STRING          reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    FUNCTION        reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    MAIN            reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    COMMA           reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    AND             reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    OR              reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    LESS            reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    GREATER         reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    DOUBLE_EQUAL    reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    DIFF            reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)
    COLON           reduce using rule 89 (varcte1 -> LBRACKET exp RBRACKET .)


state 124

    (19) parametros1 -> epsilon .

    ID              reduce using rule 19 (parametros1 -> epsilon .)


state 125

    (16) parametros -> tipo parametros1 . ID parametros2

    ID              shift and go to state 146


state 126

    (18) parametros1 -> AMPERSON .

    ID              reduce using rule 18 (parametros1 -> AMPERSON .)


state 127

    (123) funcion5 -> ID declareFunc LPAREN funcion3 RPAREN . LCURL funcion1 estatuto funcion2 funcion6

    LCURL           shift and go to state 147


state 128

    (17) parametros -> VECTOR tipo . parametros1 ID parametros2
    (18) parametros1 -> . AMPERSON
    (19) parametros1 -> . epsilon
    (135) epsilon -> .

    AMPERSON        shift and go to state 126
    ID              reduce using rule 135 (epsilon -> .)

    parametros1                    shift and go to state 148
    epsilon                        shift and go to state 124

state 129

    (49) while -> WHILE LPAREN . expresion RPAREN bloque
    (64) expresion -> . expresion1
    (65) expresion1 -> . epsilon
    (66) expresion1 -> . expresion2 exp
    (135) epsilon -> .
    (67) expresion2 -> . LESS
    (68) expresion2 -> . GREATER
    (69) expresion2 -> . DOUBLE_EQUAL
    (70) expresion2 -> . DIFF

    RPAREN          reduce using rule 135 (epsilon -> .)
    LESS            shift and go to state 63
    GREATER         shift and go to state 67
    DOUBLE_EQUAL    shift and go to state 65
    DIFF            shift and go to state 66

    expresion                      shift and go to state 149
    expresion1                     shift and go to state 61
    expresion2                     shift and go to state 62
    epsilon                        shift and go to state 64

state 130

    (94) print -> PRINT LPAREN . print1 RPAREN
    (95) print1 -> . CTE_STRING print2
    (96) print1 -> . ID print2

    CTE_STRING      shift and go to state 151
    ID              shift and go to state 152

    print1                         shift and go to state 150

state 131

    (47) main2 -> estatuto . main2
    (47) main2 -> . estatuto main2
    (48) main2 -> . epsilon
    (55) estatuto -> . asignacion
    (56) estatuto -> . llamada
    (57) estatuto -> . condicion
    (58) estatuto -> . switch
    (59) estatuto -> . while
    (60) estatuto -> . for
    (135) epsilon -> .
    (61) asignacion -> . ID EQUALS asignacion1
    (75) llamada -> . ID LPAREN llamada1 RPAREN
    (76) llamada -> . print
    (77) llamada -> . input
    (99) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (127) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (49) while -> . WHILE LPAREN expresion RPAREN bloque
    (109) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (94) print -> . PRINT LPAREN print1 RPAREN
    (106) input -> . INPUT LPAREN input1 RPAREN

    RCURL           reduce using rule 135 (epsilon -> .)
    ID              shift and go to state 111
    IF              shift and go to state 112
    SWITCH          shift and go to state 105
    WHILE           shift and go to state 100
    FOR             shift and go to state 109
    PRINT           shift and go to state 101
    INPUT           shift and go to state 110

    for                            shift and go to state 102
    estatuto                       shift and go to state 131
    switch                         shift and go to state 114
    llamada                        shift and go to state 104
    condicion                      shift and go to state 106
    print                          shift and go to state 107
    input                          shift and go to state 108
    epsilon                        shift and go to state 132
    main2                          shift and go to state 153
    asignacion                     shift and go to state 113
    while                          shift and go to state 115

state 132

    (48) main2 -> epsilon .

    RCURL           reduce using rule 48 (main2 -> epsilon .)


state 133

    (43) main -> MAIN declareMain LCURL main1 estatuto main2 . RCURL

    RCURL           shift and go to state 154


state 134

    (127) switch -> SWITCH ID . switch1 LCURL switch2 switch3 RCURL
    (128) switch1 -> . epsilon
    (129) switch1 -> . LBRACKET exp RBRACKET
    (135) epsilon -> .

    LBRACKET        shift and go to state 156
    LCURL           reduce using rule 135 (epsilon -> .)

    switch1                        shift and go to state 155
    epsilon                        shift and go to state 157

state 135

    (109) for -> FOR CTE_INT . TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque

    TO              shift and go to state 158


state 136

    (106) input -> INPUT LPAREN . input1 RPAREN
    (107) input1 -> . CTE_STRING
    (108) input1 -> . epsilon
    (135) epsilon -> .

    CTE_STRING      shift and go to state 159
    RPAREN          reduce using rule 135 (epsilon -> .)

    epsilon                        shift and go to state 161
    input1                         shift and go to state 160

state 137

    (61) asignacion -> ID EQUALS . asignacion1
    (62) asignacion1 -> . exp
    (63) asignacion1 -> . llamada
    (30) exp -> . termino exp1
    (75) llamada -> . ID LPAREN llamada1 RPAREN
    (76) llamada -> . print
    (77) llamada -> . input
    (34) termino -> . factor termino1
    (94) print -> . PRINT LPAREN print1 RPAREN
    (106) input -> . INPUT LPAREN input1 RPAREN
    (50) factor -> . LPAREN expresion RPAREN
    (51) factor -> . factor1
    (52) factor1 -> . PLUS varcte
    (53) factor1 -> . MINUS varcte
    (54) factor1 -> . varcte
    (82) varcte -> . ID varcte1
    (83) varcte -> . CTE_INT
    (84) varcte -> . CTE_FLOAT
    (85) varcte -> . CTE_STRING
    (86) varcte -> . cte_bool
    (92) cte_bool -> . TRUE
    (93) cte_bool -> . FALSE

    ID              shift and go to state 163
    PRINT           shift and go to state 101
    INPUT           shift and go to state 110
    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    factor1                        shift and go to state 53
    cte_bool                       shift and go to state 51
    llamada                        shift and go to state 162
    termino                        shift and go to state 46
    exp                            shift and go to state 164
    factor                         shift and go to state 48
    print                          shift and go to state 107
    input                          shift and go to state 108
    asignacion1                    shift and go to state 165
    varcte                         shift and go to state 39

state 138

    (75) llamada -> ID LPAREN . llamada1 RPAREN
    (78) llamada1 -> . epsilon
    (79) llamada1 -> . exp llamada2
    (135) epsilon -> .
    (30) exp -> . termino exp1
    (34) termino -> . factor termino1
    (50) factor -> . LPAREN expresion RPAREN
    (51) factor -> . factor1
    (52) factor1 -> . PLUS varcte
    (53) factor1 -> . MINUS varcte
    (54) factor1 -> . varcte
    (82) varcte -> . ID varcte1
    (83) varcte -> . CTE_INT
    (84) varcte -> . CTE_FLOAT
    (85) varcte -> . CTE_STRING
    (86) varcte -> . cte_bool
    (92) cte_bool -> . TRUE
    (93) cte_bool -> . FALSE

    RPAREN          reduce using rule 135 (epsilon -> .)
    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    factor1                        shift and go to state 53
    epsilon                        shift and go to state 167
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 46
    exp                            shift and go to state 168
    factor                         shift and go to state 48
    llamada1                       shift and go to state 166
    varcte                         shift and go to state 39

state 139

    (99) condicion -> IF LPAREN . expresion_logica RPAREN condicion1 condicion2 condicion3
    (71) expresion_logica -> . exp expresion_logica1 expresion
    (30) exp -> . termino exp1
    (34) termino -> . factor termino1
    (50) factor -> . LPAREN expresion RPAREN
    (51) factor -> . factor1
    (52) factor1 -> . PLUS varcte
    (53) factor1 -> . MINUS varcte
    (54) factor1 -> . varcte
    (82) varcte -> . ID varcte1
    (83) varcte -> . CTE_INT
    (84) varcte -> . CTE_FLOAT
    (85) varcte -> . CTE_STRING
    (86) varcte -> . cte_bool
    (92) cte_bool -> . TRUE
    (93) cte_bool -> . FALSE

    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    varcte                         shift and go to state 39
    expresion_logica               shift and go to state 169
    factor                         shift and go to state 48
    cte_bool                       shift and go to state 51
    factor1                        shift and go to state 53
    exp                            shift and go to state 170
    termino                        shift and go to state 46

state 140

    (39) inicializacion_vector1 -> varcte inicializacion_vector2 .

    RBRACKET        reduce using rule 39 (inicializacion_vector1 -> varcte inicializacion_vector2 .)


state 141

    (42) inicializacion_vector2 -> epsilon .

    RBRACKET        reduce using rule 42 (inicializacion_vector2 -> epsilon .)


state 142

    (41) inicializacion_vector2 -> COMMA . varcte inicializacion_vector2
    (82) varcte -> . ID varcte1
    (83) varcte -> . CTE_INT
    (84) varcte -> . CTE_FLOAT
    (85) varcte -> . CTE_STRING
    (86) varcte -> . cte_bool
    (92) cte_bool -> . TRUE
    (93) cte_bool -> . FALSE

    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    cte_bool                       shift and go to state 51
    varcte                         shift and go to state 171

state 143

    (38) inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET .

    VECTOR          reduce using rule 38 (inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    INT             reduce using rule 38 (inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    FLOAT           reduce using rule 38 (inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    BOOL            reduce using rule 38 (inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    STRING          reduce using rule 38 (inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    FUNCTION        reduce using rule 38 (inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    MAIN            reduce using rule 38 (inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    ID              reduce using rule 38 (inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    IF              reduce using rule 38 (inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    SWITCH          reduce using rule 38 (inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    WHILE           reduce using rule 38 (inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    FOR             reduce using rule 38 (inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    PRINT           reduce using rule 38 (inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET .)
    INPUT           reduce using rule 38 (inicializacion_vector -> EQUALS LBRACKET inicializacion_vector1 RBRACKET .)


state 144

    (91) varcte2 -> COMMA exp . varcte2
    (90) varcte2 -> . epsilon
    (91) varcte2 -> . COMMA exp varcte2
    (135) epsilon -> .

    COMMA           shift and go to state 121
    RPAREN          reduce using rule 135 (epsilon -> .)

    epsilon                        shift and go to state 120
    varcte2                        shift and go to state 172

state 145

    (88) varcte1 -> LPAREN exp varcte2 RPAREN .

    TIMES           reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    DIVIDE          reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    PLUS            reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    MINUS           reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    ID              reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    IF              reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    SWITCH          reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    WHILE           reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    FOR             reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    PRINT           reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    INPUT           reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    RCURL           reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    RETURN          reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    CASE            reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    DEFAULT         reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    VECTOR          reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    INT             reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    FLOAT           reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    BOOL            reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    STRING          reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    FUNCTION        reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    MAIN            reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    RPAREN          reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    COMMA           reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    RBRACKET        reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    AND             reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    OR              reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    LESS            reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    GREATER         reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    DOUBLE_EQUAL    reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    DIFF            reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)
    COLON           reduce using rule 88 (varcte1 -> LPAREN exp varcte2 RPAREN .)


state 146

    (16) parametros -> tipo parametros1 ID . parametros2
    (20) parametros2 -> . COMMA parametros
    (21) parametros2 -> . epsilon
    (135) epsilon -> .

    COMMA           shift and go to state 174
    RPAREN          reduce using rule 135 (epsilon -> .)

    parametros2                    shift and go to state 173
    epsilon                        shift and go to state 175

state 147

    (123) funcion5 -> ID declareFunc LPAREN funcion3 RPAREN LCURL . funcion1 estatuto funcion2 funcion6
    (115) funcion1 -> . epsilon
    (116) funcion1 -> . var_declaracion funcion1
    (135) epsilon -> .
    (6) var_declaracion -> . tipo var_declaracion1
    (7) var_declaracion -> . VECTOR tipo var_declaracion2
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    ID              reduce using rule 135 (epsilon -> .)
    IF              reduce using rule 135 (epsilon -> .)
    SWITCH          reduce using rule 135 (epsilon -> .)
    WHILE           reduce using rule 135 (epsilon -> .)
    FOR             reduce using rule 135 (epsilon -> .)
    PRINT           reduce using rule 135 (epsilon -> .)
    INPUT           reduce using rule 135 (epsilon -> .)
    VECTOR          shift and go to state 8
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 5
    epsilon                        shift and go to state 176
    var_declaracion                shift and go to state 177
    funcion1                       shift and go to state 178

state 148

    (17) parametros -> VECTOR tipo parametros1 . ID parametros2

    ID              shift and go to state 179


state 149

    (49) while -> WHILE LPAREN expresion . RPAREN bloque

    RPAREN          shift and go to state 180


state 150

    (94) print -> PRINT LPAREN print1 . RPAREN

    RPAREN          shift and go to state 181


state 151

    (95) print1 -> CTE_STRING . print2
    (97) print2 -> . epsilon
    (98) print2 -> . PLUS print1
    (135) epsilon -> .

    PLUS            shift and go to state 184
    RPAREN          reduce using rule 135 (epsilon -> .)

    epsilon                        shift and go to state 182
    print2                         shift and go to state 183

state 152

    (96) print1 -> ID . print2
    (97) print2 -> . epsilon
    (98) print2 -> . PLUS print1
    (135) epsilon -> .

    PLUS            shift and go to state 184
    RPAREN          reduce using rule 135 (epsilon -> .)

    epsilon                        shift and go to state 182
    print2                         shift and go to state 185

state 153

    (47) main2 -> estatuto main2 .

    RCURL           reduce using rule 47 (main2 -> estatuto main2 .)


state 154

    (43) main -> MAIN declareMain LCURL main1 estatuto main2 RCURL .

    END             reduce using rule 43 (main -> MAIN declareMain LCURL main1 estatuto main2 RCURL .)


state 155

    (127) switch -> SWITCH ID switch1 . LCURL switch2 switch3 RCURL

    LCURL           shift and go to state 186


state 156

    (129) switch1 -> LBRACKET . exp RBRACKET
    (30) exp -> . termino exp1
    (34) termino -> . factor termino1
    (50) factor -> . LPAREN expresion RPAREN
    (51) factor -> . factor1
    (52) factor1 -> . PLUS varcte
    (53) factor1 -> . MINUS varcte
    (54) factor1 -> . varcte
    (82) varcte -> . ID varcte1
    (83) varcte -> . CTE_INT
    (84) varcte -> . CTE_FLOAT
    (85) varcte -> . CTE_STRING
    (86) varcte -> . cte_bool
    (92) cte_bool -> . TRUE
    (93) cte_bool -> . FALSE

    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    factor1                        shift and go to state 53
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 46
    exp                            shift and go to state 187
    factor                         shift and go to state 48
    varcte                         shift and go to state 39

state 157

    (128) switch1 -> epsilon .

    LCURL           reduce using rule 128 (switch1 -> epsilon .)


state 158

    (109) for -> FOR CTE_INT TO . CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque

    CTE_INT         shift and go to state 188


state 159

    (107) input1 -> CTE_STRING .

    RPAREN          reduce using rule 107 (input1 -> CTE_STRING .)


state 160

    (106) input -> INPUT LPAREN input1 . RPAREN

    RPAREN          shift and go to state 189


state 161

    (108) input1 -> epsilon .

    RPAREN          reduce using rule 108 (input1 -> epsilon .)


state 162

    (63) asignacion1 -> llamada .

    ID              reduce using rule 63 (asignacion1 -> llamada .)
    IF              reduce using rule 63 (asignacion1 -> llamada .)
    SWITCH          reduce using rule 63 (asignacion1 -> llamada .)
    WHILE           reduce using rule 63 (asignacion1 -> llamada .)
    FOR             reduce using rule 63 (asignacion1 -> llamada .)
    PRINT           reduce using rule 63 (asignacion1 -> llamada .)
    INPUT           reduce using rule 63 (asignacion1 -> llamada .)
    RCURL           reduce using rule 63 (asignacion1 -> llamada .)
    RETURN          reduce using rule 63 (asignacion1 -> llamada .)
    CASE            reduce using rule 63 (asignacion1 -> llamada .)
    DEFAULT         reduce using rule 63 (asignacion1 -> llamada .)


state 163

    (75) llamada -> ID . LPAREN llamada1 RPAREN
    (82) varcte -> ID . varcte1
    (87) varcte1 -> . epsilon
    (88) varcte1 -> . LPAREN exp varcte2 RPAREN
    (89) varcte1 -> . LBRACKET exp RBRACKET
    (135) epsilon -> .

    LPAREN          shift and go to state 190
    LBRACKET        shift and go to state 79
    TIMES           reduce using rule 135 (epsilon -> .)
    DIVIDE          reduce using rule 135 (epsilon -> .)
    PLUS            reduce using rule 135 (epsilon -> .)
    MINUS           reduce using rule 135 (epsilon -> .)
    ID              reduce using rule 135 (epsilon -> .)
    IF              reduce using rule 135 (epsilon -> .)
    SWITCH          reduce using rule 135 (epsilon -> .)
    WHILE           reduce using rule 135 (epsilon -> .)
    FOR             reduce using rule 135 (epsilon -> .)
    PRINT           reduce using rule 135 (epsilon -> .)
    INPUT           reduce using rule 135 (epsilon -> .)
    RCURL           reduce using rule 135 (epsilon -> .)
    RETURN          reduce using rule 135 (epsilon -> .)
    CASE            reduce using rule 135 (epsilon -> .)
    DEFAULT         reduce using rule 135 (epsilon -> .)

    epsilon                        shift and go to state 78
    varcte1                        shift and go to state 80

state 164

    (62) asignacion1 -> exp .

    ID              reduce using rule 62 (asignacion1 -> exp .)
    IF              reduce using rule 62 (asignacion1 -> exp .)
    SWITCH          reduce using rule 62 (asignacion1 -> exp .)
    WHILE           reduce using rule 62 (asignacion1 -> exp .)
    FOR             reduce using rule 62 (asignacion1 -> exp .)
    PRINT           reduce using rule 62 (asignacion1 -> exp .)
    INPUT           reduce using rule 62 (asignacion1 -> exp .)
    RCURL           reduce using rule 62 (asignacion1 -> exp .)
    RETURN          reduce using rule 62 (asignacion1 -> exp .)
    CASE            reduce using rule 62 (asignacion1 -> exp .)
    DEFAULT         reduce using rule 62 (asignacion1 -> exp .)


state 165

    (61) asignacion -> ID EQUALS asignacion1 .

    ID              reduce using rule 61 (asignacion -> ID EQUALS asignacion1 .)
    IF              reduce using rule 61 (asignacion -> ID EQUALS asignacion1 .)
    SWITCH          reduce using rule 61 (asignacion -> ID EQUALS asignacion1 .)
    WHILE           reduce using rule 61 (asignacion -> ID EQUALS asignacion1 .)
    FOR             reduce using rule 61 (asignacion -> ID EQUALS asignacion1 .)
    PRINT           reduce using rule 61 (asignacion -> ID EQUALS asignacion1 .)
    INPUT           reduce using rule 61 (asignacion -> ID EQUALS asignacion1 .)
    RCURL           reduce using rule 61 (asignacion -> ID EQUALS asignacion1 .)
    RETURN          reduce using rule 61 (asignacion -> ID EQUALS asignacion1 .)
    CASE            reduce using rule 61 (asignacion -> ID EQUALS asignacion1 .)
    DEFAULT         reduce using rule 61 (asignacion -> ID EQUALS asignacion1 .)


state 166

    (75) llamada -> ID LPAREN llamada1 . RPAREN

    RPAREN          shift and go to state 191


state 167

    (78) llamada1 -> epsilon .

    RPAREN          reduce using rule 78 (llamada1 -> epsilon .)


state 168

    (79) llamada1 -> exp . llamada2
    (80) llamada2 -> . epsilon
    (81) llamada2 -> . COMMA exp llamada2
    (135) epsilon -> .

    COMMA           shift and go to state 194
    RPAREN          reduce using rule 135 (epsilon -> .)

    llamada2                       shift and go to state 192
    epsilon                        shift and go to state 193

state 169

    (99) condicion -> IF LPAREN expresion_logica . RPAREN condicion1 condicion2 condicion3

    RPAREN          shift and go to state 195


state 170

    (71) expresion_logica -> exp . expresion_logica1 expresion
    (72) expresion_logica1 -> . AND exp
    (73) expresion_logica1 -> . epsilon
    (74) expresion_logica1 -> . OR exp
    (135) epsilon -> .

    AND             shift and go to state 196
    OR              shift and go to state 199
    LESS            reduce using rule 135 (epsilon -> .)
    GREATER         reduce using rule 135 (epsilon -> .)
    DOUBLE_EQUAL    reduce using rule 135 (epsilon -> .)
    DIFF            reduce using rule 135 (epsilon -> .)
    RPAREN          reduce using rule 135 (epsilon -> .)

    expresion_logica1              shift and go to state 198
    epsilon                        shift and go to state 197

state 171

    (41) inicializacion_vector2 -> COMMA varcte . inicializacion_vector2
    (41) inicializacion_vector2 -> . COMMA varcte inicializacion_vector2
    (42) inicializacion_vector2 -> . epsilon
    (135) epsilon -> .

    COMMA           shift and go to state 142
    RBRACKET        reduce using rule 135 (epsilon -> .)

    inicializacion_vector2         shift and go to state 200
    epsilon                        shift and go to state 141

state 172

    (91) varcte2 -> COMMA exp varcte2 .

    RPAREN          reduce using rule 91 (varcte2 -> COMMA exp varcte2 .)


state 173

    (16) parametros -> tipo parametros1 ID parametros2 .

    RPAREN          reduce using rule 16 (parametros -> tipo parametros1 ID parametros2 .)


state 174

    (20) parametros2 -> COMMA . parametros
    (16) parametros -> . tipo parametros1 ID parametros2
    (17) parametros -> . VECTOR tipo parametros1 ID parametros2
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    VECTOR          shift and go to state 99
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    parametros                     shift and go to state 201
    tipo                           shift and go to state 95

state 175

    (21) parametros2 -> epsilon .

    RPAREN          reduce using rule 21 (parametros2 -> epsilon .)


state 176

    (115) funcion1 -> epsilon .

    ID              reduce using rule 115 (funcion1 -> epsilon .)
    IF              reduce using rule 115 (funcion1 -> epsilon .)
    SWITCH          reduce using rule 115 (funcion1 -> epsilon .)
    WHILE           reduce using rule 115 (funcion1 -> epsilon .)
    FOR             reduce using rule 115 (funcion1 -> epsilon .)
    PRINT           reduce using rule 115 (funcion1 -> epsilon .)
    INPUT           reduce using rule 115 (funcion1 -> epsilon .)


state 177

    (116) funcion1 -> var_declaracion . funcion1
    (115) funcion1 -> . epsilon
    (116) funcion1 -> . var_declaracion funcion1
    (135) epsilon -> .
    (6) var_declaracion -> . tipo var_declaracion1
    (7) var_declaracion -> . VECTOR tipo var_declaracion2
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . BOOL
    (26) tipo -> . STRING

    ID              reduce using rule 135 (epsilon -> .)
    IF              reduce using rule 135 (epsilon -> .)
    SWITCH          reduce using rule 135 (epsilon -> .)
    WHILE           reduce using rule 135 (epsilon -> .)
    FOR             reduce using rule 135 (epsilon -> .)
    PRINT           reduce using rule 135 (epsilon -> .)
    INPUT           reduce using rule 135 (epsilon -> .)
    VECTOR          shift and go to state 8
    INT             shift and go to state 11
    FLOAT           shift and go to state 3
    BOOL            shift and go to state 9
    STRING          shift and go to state 4

    tipo                           shift and go to state 5
    epsilon                        shift and go to state 176
    var_declaracion                shift and go to state 177
    funcion1                       shift and go to state 202

state 178

    (123) funcion5 -> ID declareFunc LPAREN funcion3 RPAREN LCURL funcion1 . estatuto funcion2 funcion6
    (55) estatuto -> . asignacion
    (56) estatuto -> . llamada
    (57) estatuto -> . condicion
    (58) estatuto -> . switch
    (59) estatuto -> . while
    (60) estatuto -> . for
    (61) asignacion -> . ID EQUALS asignacion1
    (75) llamada -> . ID LPAREN llamada1 RPAREN
    (76) llamada -> . print
    (77) llamada -> . input
    (99) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (127) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (49) while -> . WHILE LPAREN expresion RPAREN bloque
    (109) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (94) print -> . PRINT LPAREN print1 RPAREN
    (106) input -> . INPUT LPAREN input1 RPAREN

    ID              shift and go to state 111
    IF              shift and go to state 112
    SWITCH          shift and go to state 105
    WHILE           shift and go to state 100
    FOR             shift and go to state 109
    PRINT           shift and go to state 101
    INPUT           shift and go to state 110

    for                            shift and go to state 102
    estatuto                       shift and go to state 203
    while                          shift and go to state 115
    llamada                        shift and go to state 104
    condicion                      shift and go to state 106
    print                          shift and go to state 107
    input                          shift and go to state 108
    asignacion                     shift and go to state 113
    switch                         shift and go to state 114

state 179

    (17) parametros -> VECTOR tipo parametros1 ID . parametros2
    (20) parametros2 -> . COMMA parametros
    (21) parametros2 -> . epsilon
    (135) epsilon -> .

    COMMA           shift and go to state 174
    RPAREN          reduce using rule 135 (epsilon -> .)

    parametros2                    shift and go to state 204
    epsilon                        shift and go to state 175

state 180

    (49) while -> WHILE LPAREN expresion RPAREN . bloque
    (27) bloque -> . LCURL estatuto bloque1 RCURL

    LCURL           shift and go to state 206

    bloque                         shift and go to state 205

state 181

    (94) print -> PRINT LPAREN print1 RPAREN .

    ID              reduce using rule 94 (print -> PRINT LPAREN print1 RPAREN .)
    IF              reduce using rule 94 (print -> PRINT LPAREN print1 RPAREN .)
    SWITCH          reduce using rule 94 (print -> PRINT LPAREN print1 RPAREN .)
    WHILE           reduce using rule 94 (print -> PRINT LPAREN print1 RPAREN .)
    FOR             reduce using rule 94 (print -> PRINT LPAREN print1 RPAREN .)
    PRINT           reduce using rule 94 (print -> PRINT LPAREN print1 RPAREN .)
    INPUT           reduce using rule 94 (print -> PRINT LPAREN print1 RPAREN .)
    RCURL           reduce using rule 94 (print -> PRINT LPAREN print1 RPAREN .)
    RETURN          reduce using rule 94 (print -> PRINT LPAREN print1 RPAREN .)
    CASE            reduce using rule 94 (print -> PRINT LPAREN print1 RPAREN .)
    DEFAULT         reduce using rule 94 (print -> PRINT LPAREN print1 RPAREN .)


state 182

    (97) print2 -> epsilon .

    RPAREN          reduce using rule 97 (print2 -> epsilon .)


state 183

    (95) print1 -> CTE_STRING print2 .

    RPAREN          reduce using rule 95 (print1 -> CTE_STRING print2 .)


state 184

    (98) print2 -> PLUS . print1
    (95) print1 -> . CTE_STRING print2
    (96) print1 -> . ID print2

    CTE_STRING      shift and go to state 151
    ID              shift and go to state 152

    print1                         shift and go to state 207

state 185

    (96) print1 -> ID print2 .

    RPAREN          reduce using rule 96 (print1 -> ID print2 .)


state 186

    (127) switch -> SWITCH ID switch1 LCURL . switch2 switch3 RCURL
    (130) switch2 -> . epsilon
    (131) switch2 -> . CASE varcte COLON switch4 switch2
    (135) epsilon -> .

    CASE            shift and go to state 208
    DEFAULT         reduce using rule 135 (epsilon -> .)

    switch2                        shift and go to state 209
    epsilon                        shift and go to state 210

state 187

    (129) switch1 -> LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 211


state 188

    (109) for -> FOR CTE_INT TO CTE_INT . BY LPAREN for1 CTE_INT RPAREN bloque

    BY              shift and go to state 212


state 189

    (106) input -> INPUT LPAREN input1 RPAREN .

    ID              reduce using rule 106 (input -> INPUT LPAREN input1 RPAREN .)
    IF              reduce using rule 106 (input -> INPUT LPAREN input1 RPAREN .)
    SWITCH          reduce using rule 106 (input -> INPUT LPAREN input1 RPAREN .)
    WHILE           reduce using rule 106 (input -> INPUT LPAREN input1 RPAREN .)
    FOR             reduce using rule 106 (input -> INPUT LPAREN input1 RPAREN .)
    PRINT           reduce using rule 106 (input -> INPUT LPAREN input1 RPAREN .)
    INPUT           reduce using rule 106 (input -> INPUT LPAREN input1 RPAREN .)
    RCURL           reduce using rule 106 (input -> INPUT LPAREN input1 RPAREN .)
    RETURN          reduce using rule 106 (input -> INPUT LPAREN input1 RPAREN .)
    CASE            reduce using rule 106 (input -> INPUT LPAREN input1 RPAREN .)
    DEFAULT         reduce using rule 106 (input -> INPUT LPAREN input1 RPAREN .)


state 190

    (75) llamada -> ID LPAREN . llamada1 RPAREN
    (88) varcte1 -> LPAREN . exp varcte2 RPAREN
    (78) llamada1 -> . epsilon
    (79) llamada1 -> . exp llamada2
    (30) exp -> . termino exp1
    (135) epsilon -> .
    (34) termino -> . factor termino1
    (50) factor -> . LPAREN expresion RPAREN
    (51) factor -> . factor1
    (52) factor1 -> . PLUS varcte
    (53) factor1 -> . MINUS varcte
    (54) factor1 -> . varcte
    (82) varcte -> . ID varcte1
    (83) varcte -> . CTE_INT
    (84) varcte -> . CTE_FLOAT
    (85) varcte -> . CTE_STRING
    (86) varcte -> . cte_bool
    (92) cte_bool -> . TRUE
    (93) cte_bool -> . FALSE

    RPAREN          reduce using rule 135 (epsilon -> .)
    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    factor1                        shift and go to state 53
    epsilon                        shift and go to state 167
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 46
    exp                            shift and go to state 213
    factor                         shift and go to state 48
    llamada1                       shift and go to state 166
    varcte                         shift and go to state 39

state 191

    (75) llamada -> ID LPAREN llamada1 RPAREN .

    ID              reduce using rule 75 (llamada -> ID LPAREN llamada1 RPAREN .)
    IF              reduce using rule 75 (llamada -> ID LPAREN llamada1 RPAREN .)
    SWITCH          reduce using rule 75 (llamada -> ID LPAREN llamada1 RPAREN .)
    WHILE           reduce using rule 75 (llamada -> ID LPAREN llamada1 RPAREN .)
    FOR             reduce using rule 75 (llamada -> ID LPAREN llamada1 RPAREN .)
    PRINT           reduce using rule 75 (llamada -> ID LPAREN llamada1 RPAREN .)
    INPUT           reduce using rule 75 (llamada -> ID LPAREN llamada1 RPAREN .)
    RCURL           reduce using rule 75 (llamada -> ID LPAREN llamada1 RPAREN .)
    RETURN          reduce using rule 75 (llamada -> ID LPAREN llamada1 RPAREN .)
    CASE            reduce using rule 75 (llamada -> ID LPAREN llamada1 RPAREN .)
    DEFAULT         reduce using rule 75 (llamada -> ID LPAREN llamada1 RPAREN .)


state 192

    (79) llamada1 -> exp llamada2 .

    RPAREN          reduce using rule 79 (llamada1 -> exp llamada2 .)


state 193

    (80) llamada2 -> epsilon .

    RPAREN          reduce using rule 80 (llamada2 -> epsilon .)


state 194

    (81) llamada2 -> COMMA . exp llamada2
    (30) exp -> . termino exp1
    (34) termino -> . factor termino1
    (50) factor -> . LPAREN expresion RPAREN
    (51) factor -> . factor1
    (52) factor1 -> . PLUS varcte
    (53) factor1 -> . MINUS varcte
    (54) factor1 -> . varcte
    (82) varcte -> . ID varcte1
    (83) varcte -> . CTE_INT
    (84) varcte -> . CTE_FLOAT
    (85) varcte -> . CTE_STRING
    (86) varcte -> . cte_bool
    (92) cte_bool -> . TRUE
    (93) cte_bool -> . FALSE

    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    factor1                        shift and go to state 53
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 46
    exp                            shift and go to state 214
    factor                         shift and go to state 48
    varcte                         shift and go to state 39

state 195

    (99) condicion -> IF LPAREN expresion_logica RPAREN . condicion1 condicion2 condicion3
    (100) condicion1 -> . bloque
    (101) condicion1 -> . LCURL bloque RCURL
    (27) bloque -> . LCURL estatuto bloque1 RCURL

    LCURL           shift and go to state 217

    condicion1                     shift and go to state 215
    bloque                         shift and go to state 216

state 196

    (72) expresion_logica1 -> AND . exp
    (30) exp -> . termino exp1
    (34) termino -> . factor termino1
    (50) factor -> . LPAREN expresion RPAREN
    (51) factor -> . factor1
    (52) factor1 -> . PLUS varcte
    (53) factor1 -> . MINUS varcte
    (54) factor1 -> . varcte
    (82) varcte -> . ID varcte1
    (83) varcte -> . CTE_INT
    (84) varcte -> . CTE_FLOAT
    (85) varcte -> . CTE_STRING
    (86) varcte -> . cte_bool
    (92) cte_bool -> . TRUE
    (93) cte_bool -> . FALSE

    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    factor1                        shift and go to state 53
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 46
    exp                            shift and go to state 218
    factor                         shift and go to state 48
    varcte                         shift and go to state 39

state 197

    (73) expresion_logica1 -> epsilon .

    LESS            reduce using rule 73 (expresion_logica1 -> epsilon .)
    GREATER         reduce using rule 73 (expresion_logica1 -> epsilon .)
    DOUBLE_EQUAL    reduce using rule 73 (expresion_logica1 -> epsilon .)
    DIFF            reduce using rule 73 (expresion_logica1 -> epsilon .)
    RPAREN          reduce using rule 73 (expresion_logica1 -> epsilon .)


state 198

    (71) expresion_logica -> exp expresion_logica1 . expresion
    (64) expresion -> . expresion1
    (65) expresion1 -> . epsilon
    (66) expresion1 -> . expresion2 exp
    (135) epsilon -> .
    (67) expresion2 -> . LESS
    (68) expresion2 -> . GREATER
    (69) expresion2 -> . DOUBLE_EQUAL
    (70) expresion2 -> . DIFF

    RPAREN          reduce using rule 135 (epsilon -> .)
    LESS            shift and go to state 63
    GREATER         shift and go to state 67
    DOUBLE_EQUAL    shift and go to state 65
    DIFF            shift and go to state 66

    expresion                      shift and go to state 219
    expresion1                     shift and go to state 61
    expresion2                     shift and go to state 62
    epsilon                        shift and go to state 64

state 199

    (74) expresion_logica1 -> OR . exp
    (30) exp -> . termino exp1
    (34) termino -> . factor termino1
    (50) factor -> . LPAREN expresion RPAREN
    (51) factor -> . factor1
    (52) factor1 -> . PLUS varcte
    (53) factor1 -> . MINUS varcte
    (54) factor1 -> . varcte
    (82) varcte -> . ID varcte1
    (83) varcte -> . CTE_INT
    (84) varcte -> . CTE_FLOAT
    (85) varcte -> . CTE_STRING
    (86) varcte -> . cte_bool
    (92) cte_bool -> . TRUE
    (93) cte_bool -> . FALSE

    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    factor1                        shift and go to state 53
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 46
    exp                            shift and go to state 220
    factor                         shift and go to state 48
    varcte                         shift and go to state 39

state 200

    (41) inicializacion_vector2 -> COMMA varcte inicializacion_vector2 .

    RBRACKET        reduce using rule 41 (inicializacion_vector2 -> COMMA varcte inicializacion_vector2 .)


state 201

    (20) parametros2 -> COMMA parametros .

    RPAREN          reduce using rule 20 (parametros2 -> COMMA parametros .)


state 202

    (116) funcion1 -> var_declaracion funcion1 .

    ID              reduce using rule 116 (funcion1 -> var_declaracion funcion1 .)
    IF              reduce using rule 116 (funcion1 -> var_declaracion funcion1 .)
    SWITCH          reduce using rule 116 (funcion1 -> var_declaracion funcion1 .)
    WHILE           reduce using rule 116 (funcion1 -> var_declaracion funcion1 .)
    FOR             reduce using rule 116 (funcion1 -> var_declaracion funcion1 .)
    PRINT           reduce using rule 116 (funcion1 -> var_declaracion funcion1 .)
    INPUT           reduce using rule 116 (funcion1 -> var_declaracion funcion1 .)


state 203

    (123) funcion5 -> ID declareFunc LPAREN funcion3 RPAREN LCURL funcion1 estatuto . funcion2 funcion6
    (117) funcion2 -> . epsilon
    (118) funcion2 -> . estatuto funcion2
    (135) epsilon -> .
    (55) estatuto -> . asignacion
    (56) estatuto -> . llamada
    (57) estatuto -> . condicion
    (58) estatuto -> . switch
    (59) estatuto -> . while
    (60) estatuto -> . for
    (61) asignacion -> . ID EQUALS asignacion1
    (75) llamada -> . ID LPAREN llamada1 RPAREN
    (76) llamada -> . print
    (77) llamada -> . input
    (99) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (127) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (49) while -> . WHILE LPAREN expresion RPAREN bloque
    (109) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (94) print -> . PRINT LPAREN print1 RPAREN
    (106) input -> . INPUT LPAREN input1 RPAREN

    RCURL           reduce using rule 135 (epsilon -> .)
    RETURN          reduce using rule 135 (epsilon -> .)
    ID              shift and go to state 111
    IF              shift and go to state 112
    SWITCH          shift and go to state 105
    WHILE           shift and go to state 100
    FOR             shift and go to state 109
    PRINT           shift and go to state 101
    INPUT           shift and go to state 110

    funcion2                       shift and go to state 221
    for                            shift and go to state 102
    estatuto                       shift and go to state 222
    while                          shift and go to state 115
    llamada                        shift and go to state 104
    condicion                      shift and go to state 106
    print                          shift and go to state 107
    input                          shift and go to state 108
    epsilon                        shift and go to state 223
    asignacion                     shift and go to state 113
    switch                         shift and go to state 114

state 204

    (17) parametros -> VECTOR tipo parametros1 ID parametros2 .

    RPAREN          reduce using rule 17 (parametros -> VECTOR tipo parametros1 ID parametros2 .)


state 205

    (49) while -> WHILE LPAREN expresion RPAREN bloque .

    ID              reduce using rule 49 (while -> WHILE LPAREN expresion RPAREN bloque .)
    IF              reduce using rule 49 (while -> WHILE LPAREN expresion RPAREN bloque .)
    SWITCH          reduce using rule 49 (while -> WHILE LPAREN expresion RPAREN bloque .)
    WHILE           reduce using rule 49 (while -> WHILE LPAREN expresion RPAREN bloque .)
    FOR             reduce using rule 49 (while -> WHILE LPAREN expresion RPAREN bloque .)
    PRINT           reduce using rule 49 (while -> WHILE LPAREN expresion RPAREN bloque .)
    INPUT           reduce using rule 49 (while -> WHILE LPAREN expresion RPAREN bloque .)
    RCURL           reduce using rule 49 (while -> WHILE LPAREN expresion RPAREN bloque .)
    RETURN          reduce using rule 49 (while -> WHILE LPAREN expresion RPAREN bloque .)
    CASE            reduce using rule 49 (while -> WHILE LPAREN expresion RPAREN bloque .)
    DEFAULT         reduce using rule 49 (while -> WHILE LPAREN expresion RPAREN bloque .)


state 206

    (27) bloque -> LCURL . estatuto bloque1 RCURL
    (55) estatuto -> . asignacion
    (56) estatuto -> . llamada
    (57) estatuto -> . condicion
    (58) estatuto -> . switch
    (59) estatuto -> . while
    (60) estatuto -> . for
    (61) asignacion -> . ID EQUALS asignacion1
    (75) llamada -> . ID LPAREN llamada1 RPAREN
    (76) llamada -> . print
    (77) llamada -> . input
    (99) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (127) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (49) while -> . WHILE LPAREN expresion RPAREN bloque
    (109) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (94) print -> . PRINT LPAREN print1 RPAREN
    (106) input -> . INPUT LPAREN input1 RPAREN

    ID              shift and go to state 111
    IF              shift and go to state 112
    SWITCH          shift and go to state 105
    WHILE           shift and go to state 100
    FOR             shift and go to state 109
    PRINT           shift and go to state 101
    INPUT           shift and go to state 110

    for                            shift and go to state 102
    estatuto                       shift and go to state 224
    switch                         shift and go to state 114
    llamada                        shift and go to state 104
    condicion                      shift and go to state 106
    print                          shift and go to state 107
    input                          shift and go to state 108
    asignacion                     shift and go to state 113
    while                          shift and go to state 115

state 207

    (98) print2 -> PLUS print1 .

    RPAREN          reduce using rule 98 (print2 -> PLUS print1 .)


state 208

    (131) switch2 -> CASE . varcte COLON switch4 switch2
    (82) varcte -> . ID varcte1
    (83) varcte -> . CTE_INT
    (84) varcte -> . CTE_FLOAT
    (85) varcte -> . CTE_STRING
    (86) varcte -> . cte_bool
    (92) cte_bool -> . TRUE
    (93) cte_bool -> . FALSE

    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    cte_bool                       shift and go to state 51
    varcte                         shift and go to state 225

state 209

    (127) switch -> SWITCH ID switch1 LCURL switch2 . switch3 RCURL
    (132) switch3 -> . DEFAULT COLON switch4

    DEFAULT         shift and go to state 227

    switch3                        shift and go to state 226

state 210

    (130) switch2 -> epsilon .

    DEFAULT         reduce using rule 130 (switch2 -> epsilon .)


state 211

    (129) switch1 -> LBRACKET exp RBRACKET .

    LCURL           reduce using rule 129 (switch1 -> LBRACKET exp RBRACKET .)


state 212

    (109) for -> FOR CTE_INT TO CTE_INT BY . LPAREN for1 CTE_INT RPAREN bloque

    LPAREN          shift and go to state 228


state 213

    (88) varcte1 -> LPAREN exp . varcte2 RPAREN
    (79) llamada1 -> exp . llamada2
    (90) varcte2 -> . epsilon
    (91) varcte2 -> . COMMA exp varcte2
    (80) llamada2 -> . epsilon
    (81) llamada2 -> . COMMA exp llamada2
    (135) epsilon -> .

    COMMA           shift and go to state 230
    RPAREN          reduce using rule 135 (epsilon -> .)

    llamada2                       shift and go to state 192
    epsilon                        shift and go to state 229
    varcte2                        shift and go to state 122

state 214

    (81) llamada2 -> COMMA exp . llamada2
    (80) llamada2 -> . epsilon
    (81) llamada2 -> . COMMA exp llamada2
    (135) epsilon -> .

    COMMA           shift and go to state 194
    RPAREN          reduce using rule 135 (epsilon -> .)

    llamada2                       shift and go to state 231
    epsilon                        shift and go to state 193

state 215

    (99) condicion -> IF LPAREN expresion_logica RPAREN condicion1 . condicion2 condicion3
    (102) condicion2 -> . ELSEIF condicion1 condicion2
    (103) condicion2 -> . epsilon
    (135) epsilon -> .

    ELSEIF          shift and go to state 234
    ELSE            reduce using rule 135 (epsilon -> .)
    ID              reduce using rule 135 (epsilon -> .)
    IF              reduce using rule 135 (epsilon -> .)
    SWITCH          reduce using rule 135 (epsilon -> .)
    WHILE           reduce using rule 135 (epsilon -> .)
    FOR             reduce using rule 135 (epsilon -> .)
    PRINT           reduce using rule 135 (epsilon -> .)
    INPUT           reduce using rule 135 (epsilon -> .)
    RCURL           reduce using rule 135 (epsilon -> .)
    RETURN          reduce using rule 135 (epsilon -> .)
    CASE            reduce using rule 135 (epsilon -> .)
    DEFAULT         reduce using rule 135 (epsilon -> .)

    epsilon                        shift and go to state 232
    condicion2                     shift and go to state 233

state 216

    (100) condicion1 -> bloque .

    ID              reduce using rule 100 (condicion1 -> bloque .)
    IF              reduce using rule 100 (condicion1 -> bloque .)
    SWITCH          reduce using rule 100 (condicion1 -> bloque .)
    WHILE           reduce using rule 100 (condicion1 -> bloque .)
    FOR             reduce using rule 100 (condicion1 -> bloque .)
    PRINT           reduce using rule 100 (condicion1 -> bloque .)
    INPUT           reduce using rule 100 (condicion1 -> bloque .)
    RCURL           reduce using rule 100 (condicion1 -> bloque .)
    RETURN          reduce using rule 100 (condicion1 -> bloque .)
    CASE            reduce using rule 100 (condicion1 -> bloque .)
    DEFAULT         reduce using rule 100 (condicion1 -> bloque .)
    ELSEIF          reduce using rule 100 (condicion1 -> bloque .)
    ELSE            reduce using rule 100 (condicion1 -> bloque .)


state 217

    (101) condicion1 -> LCURL . bloque RCURL
    (27) bloque -> LCURL . estatuto bloque1 RCURL
    (27) bloque -> . LCURL estatuto bloque1 RCURL
    (55) estatuto -> . asignacion
    (56) estatuto -> . llamada
    (57) estatuto -> . condicion
    (58) estatuto -> . switch
    (59) estatuto -> . while
    (60) estatuto -> . for
    (61) asignacion -> . ID EQUALS asignacion1
    (75) llamada -> . ID LPAREN llamada1 RPAREN
    (76) llamada -> . print
    (77) llamada -> . input
    (99) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (127) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (49) while -> . WHILE LPAREN expresion RPAREN bloque
    (109) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (94) print -> . PRINT LPAREN print1 RPAREN
    (106) input -> . INPUT LPAREN input1 RPAREN

    LCURL           shift and go to state 206
    ID              shift and go to state 111
    IF              shift and go to state 112
    SWITCH          shift and go to state 105
    WHILE           shift and go to state 100
    FOR             shift and go to state 109
    PRINT           shift and go to state 101
    INPUT           shift and go to state 110

    bloque                         shift and go to state 235
    for                            shift and go to state 102
    estatuto                       shift and go to state 224
    switch                         shift and go to state 114
    llamada                        shift and go to state 104
    condicion                      shift and go to state 106
    print                          shift and go to state 107
    input                          shift and go to state 108
    asignacion                     shift and go to state 113
    while                          shift and go to state 115

state 218

    (72) expresion_logica1 -> AND exp .

    LESS            reduce using rule 72 (expresion_logica1 -> AND exp .)
    GREATER         reduce using rule 72 (expresion_logica1 -> AND exp .)
    DOUBLE_EQUAL    reduce using rule 72 (expresion_logica1 -> AND exp .)
    DIFF            reduce using rule 72 (expresion_logica1 -> AND exp .)
    RPAREN          reduce using rule 72 (expresion_logica1 -> AND exp .)


state 219

    (71) expresion_logica -> exp expresion_logica1 expresion .

    RPAREN          reduce using rule 71 (expresion_logica -> exp expresion_logica1 expresion .)


state 220

    (74) expresion_logica1 -> OR exp .

    LESS            reduce using rule 74 (expresion_logica1 -> OR exp .)
    GREATER         reduce using rule 74 (expresion_logica1 -> OR exp .)
    DOUBLE_EQUAL    reduce using rule 74 (expresion_logica1 -> OR exp .)
    DIFF            reduce using rule 74 (expresion_logica1 -> OR exp .)
    RPAREN          reduce using rule 74 (expresion_logica1 -> OR exp .)


state 221

    (123) funcion5 -> ID declareFunc LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 . funcion6
    (125) funcion6 -> . RCURL
    (126) funcion6 -> . RETURN ID RCURL

    RCURL           shift and go to state 237
    RETURN          shift and go to state 238

    funcion6                       shift and go to state 236

state 222

    (118) funcion2 -> estatuto . funcion2
    (117) funcion2 -> . epsilon
    (118) funcion2 -> . estatuto funcion2
    (135) epsilon -> .
    (55) estatuto -> . asignacion
    (56) estatuto -> . llamada
    (57) estatuto -> . condicion
    (58) estatuto -> . switch
    (59) estatuto -> . while
    (60) estatuto -> . for
    (61) asignacion -> . ID EQUALS asignacion1
    (75) llamada -> . ID LPAREN llamada1 RPAREN
    (76) llamada -> . print
    (77) llamada -> . input
    (99) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (127) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (49) while -> . WHILE LPAREN expresion RPAREN bloque
    (109) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (94) print -> . PRINT LPAREN print1 RPAREN
    (106) input -> . INPUT LPAREN input1 RPAREN

    RCURL           reduce using rule 135 (epsilon -> .)
    RETURN          reduce using rule 135 (epsilon -> .)
    ID              shift and go to state 111
    IF              shift and go to state 112
    SWITCH          shift and go to state 105
    WHILE           shift and go to state 100
    FOR             shift and go to state 109
    PRINT           shift and go to state 101
    INPUT           shift and go to state 110

    funcion2                       shift and go to state 239
    for                            shift and go to state 102
    estatuto                       shift and go to state 222
    while                          shift and go to state 115
    llamada                        shift and go to state 104
    condicion                      shift and go to state 106
    print                          shift and go to state 107
    input                          shift and go to state 108
    epsilon                        shift and go to state 223
    asignacion                     shift and go to state 113
    switch                         shift and go to state 114

state 223

    (117) funcion2 -> epsilon .

    RCURL           reduce using rule 117 (funcion2 -> epsilon .)
    RETURN          reduce using rule 117 (funcion2 -> epsilon .)


state 224

    (27) bloque -> LCURL estatuto . bloque1 RCURL
    (28) bloque1 -> . estatuto bloque1
    (29) bloque1 -> . epsilon
    (55) estatuto -> . asignacion
    (56) estatuto -> . llamada
    (57) estatuto -> . condicion
    (58) estatuto -> . switch
    (59) estatuto -> . while
    (60) estatuto -> . for
    (135) epsilon -> .
    (61) asignacion -> . ID EQUALS asignacion1
    (75) llamada -> . ID LPAREN llamada1 RPAREN
    (76) llamada -> . print
    (77) llamada -> . input
    (99) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (127) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (49) while -> . WHILE LPAREN expresion RPAREN bloque
    (109) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (94) print -> . PRINT LPAREN print1 RPAREN
    (106) input -> . INPUT LPAREN input1 RPAREN

    RCURL           reduce using rule 135 (epsilon -> .)
    ID              shift and go to state 111
    IF              shift and go to state 112
    SWITCH          shift and go to state 105
    WHILE           shift and go to state 100
    FOR             shift and go to state 109
    PRINT           shift and go to state 101
    INPUT           shift and go to state 110

    for                            shift and go to state 102
    estatuto                       shift and go to state 240
    switch                         shift and go to state 114
    llamada                        shift and go to state 104
    condicion                      shift and go to state 106
    print                          shift and go to state 107
    input                          shift and go to state 108
    epsilon                        shift and go to state 241
    bloque1                        shift and go to state 242
    asignacion                     shift and go to state 113
    while                          shift and go to state 115

state 225

    (131) switch2 -> CASE varcte . COLON switch4 switch2

    COLON           shift and go to state 243


state 226

    (127) switch -> SWITCH ID switch1 LCURL switch2 switch3 . RCURL

    RCURL           shift and go to state 244


state 227

    (132) switch3 -> DEFAULT . COLON switch4

    COLON           shift and go to state 245


state 228

    (109) for -> FOR CTE_INT TO CTE_INT BY LPAREN . for1 CTE_INT RPAREN bloque
    (110) for1 -> . PLUS
    (111) for1 -> . TIMES
    (112) for1 -> . DIVIDE
    (113) for1 -> . MINUS

    PLUS            shift and go to state 248
    TIMES           shift and go to state 247
    DIVIDE          shift and go to state 246
    MINUS           shift and go to state 250

    for1                           shift and go to state 249

state 229

    (90) varcte2 -> epsilon .
    (80) llamada2 -> epsilon .

  ! reduce/reduce conflict for RPAREN resolved using rule 80 (llamada2 -> epsilon .)
    RPAREN          reduce using rule 80 (llamada2 -> epsilon .)

  ! RPAREN          [ reduce using rule 90 (varcte2 -> epsilon .) ]


state 230

    (91) varcte2 -> COMMA . exp varcte2
    (81) llamada2 -> COMMA . exp llamada2
    (30) exp -> . termino exp1
    (34) termino -> . factor termino1
    (50) factor -> . LPAREN expresion RPAREN
    (51) factor -> . factor1
    (52) factor1 -> . PLUS varcte
    (53) factor1 -> . MINUS varcte
    (54) factor1 -> . varcte
    (82) varcte -> . ID varcte1
    (83) varcte -> . CTE_INT
    (84) varcte -> . CTE_FLOAT
    (85) varcte -> . CTE_STRING
    (86) varcte -> . cte_bool
    (92) cte_bool -> . TRUE
    (93) cte_bool -> . FALSE

    LPAREN          shift and go to state 41
    PLUS            shift and go to state 45
    MINUS           shift and go to state 52
    ID              shift and go to state 50
    CTE_INT         shift and go to state 40
    CTE_FLOAT       shift and go to state 43
    CTE_STRING      shift and go to state 44
    TRUE            shift and go to state 42
    FALSE           shift and go to state 49

    factor1                        shift and go to state 53
    cte_bool                       shift and go to state 51
    termino                        shift and go to state 46
    exp                            shift and go to state 251
    factor                         shift and go to state 48
    varcte                         shift and go to state 39

state 231

    (81) llamada2 -> COMMA exp llamada2 .

    RPAREN          reduce using rule 81 (llamada2 -> COMMA exp llamada2 .)


state 232

    (103) condicion2 -> epsilon .

    ELSE            reduce using rule 103 (condicion2 -> epsilon .)
    ID              reduce using rule 103 (condicion2 -> epsilon .)
    IF              reduce using rule 103 (condicion2 -> epsilon .)
    SWITCH          reduce using rule 103 (condicion2 -> epsilon .)
    WHILE           reduce using rule 103 (condicion2 -> epsilon .)
    FOR             reduce using rule 103 (condicion2 -> epsilon .)
    PRINT           reduce using rule 103 (condicion2 -> epsilon .)
    INPUT           reduce using rule 103 (condicion2 -> epsilon .)
    RCURL           reduce using rule 103 (condicion2 -> epsilon .)
    RETURN          reduce using rule 103 (condicion2 -> epsilon .)
    CASE            reduce using rule 103 (condicion2 -> epsilon .)
    DEFAULT         reduce using rule 103 (condicion2 -> epsilon .)


state 233

    (99) condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 . condicion3
    (104) condicion3 -> . ELSE condicion1
    (105) condicion3 -> . epsilon
    (135) epsilon -> .

    ELSE            shift and go to state 253
    ID              reduce using rule 135 (epsilon -> .)
    IF              reduce using rule 135 (epsilon -> .)
    SWITCH          reduce using rule 135 (epsilon -> .)
    WHILE           reduce using rule 135 (epsilon -> .)
    FOR             reduce using rule 135 (epsilon -> .)
    PRINT           reduce using rule 135 (epsilon -> .)
    INPUT           reduce using rule 135 (epsilon -> .)
    RCURL           reduce using rule 135 (epsilon -> .)
    RETURN          reduce using rule 135 (epsilon -> .)
    CASE            reduce using rule 135 (epsilon -> .)
    DEFAULT         reduce using rule 135 (epsilon -> .)

    epsilon                        shift and go to state 252
    condicion3                     shift and go to state 254

state 234

    (102) condicion2 -> ELSEIF . condicion1 condicion2
    (100) condicion1 -> . bloque
    (101) condicion1 -> . LCURL bloque RCURL
    (27) bloque -> . LCURL estatuto bloque1 RCURL

    LCURL           shift and go to state 217

    bloque                         shift and go to state 216
    condicion1                     shift and go to state 255

state 235

    (101) condicion1 -> LCURL bloque . RCURL

    RCURL           shift and go to state 256


state 236

    (123) funcion5 -> ID declareFunc LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 funcion6 .

    FUNCTION        reduce using rule 123 (funcion5 -> ID declareFunc LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 funcion6 .)
    MAIN            reduce using rule 123 (funcion5 -> ID declareFunc LPAREN funcion3 RPAREN LCURL funcion1 estatuto funcion2 funcion6 .)


state 237

    (125) funcion6 -> RCURL .

    FUNCTION        reduce using rule 125 (funcion6 -> RCURL .)
    MAIN            reduce using rule 125 (funcion6 -> RCURL .)


state 238

    (126) funcion6 -> RETURN . ID RCURL

    ID              shift and go to state 257


state 239

    (118) funcion2 -> estatuto funcion2 .

    RCURL           reduce using rule 118 (funcion2 -> estatuto funcion2 .)
    RETURN          reduce using rule 118 (funcion2 -> estatuto funcion2 .)


state 240

    (28) bloque1 -> estatuto . bloque1
    (28) bloque1 -> . estatuto bloque1
    (29) bloque1 -> . epsilon
    (55) estatuto -> . asignacion
    (56) estatuto -> . llamada
    (57) estatuto -> . condicion
    (58) estatuto -> . switch
    (59) estatuto -> . while
    (60) estatuto -> . for
    (135) epsilon -> .
    (61) asignacion -> . ID EQUALS asignacion1
    (75) llamada -> . ID LPAREN llamada1 RPAREN
    (76) llamada -> . print
    (77) llamada -> . input
    (99) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (127) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (49) while -> . WHILE LPAREN expresion RPAREN bloque
    (109) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (94) print -> . PRINT LPAREN print1 RPAREN
    (106) input -> . INPUT LPAREN input1 RPAREN

    RCURL           reduce using rule 135 (epsilon -> .)
    ID              shift and go to state 111
    IF              shift and go to state 112
    SWITCH          shift and go to state 105
    WHILE           shift and go to state 100
    FOR             shift and go to state 109
    PRINT           shift and go to state 101
    INPUT           shift and go to state 110

    for                            shift and go to state 102
    estatuto                       shift and go to state 240
    switch                         shift and go to state 114
    llamada                        shift and go to state 104
    condicion                      shift and go to state 106
    print                          shift and go to state 107
    input                          shift and go to state 108
    epsilon                        shift and go to state 241
    bloque1                        shift and go to state 258
    asignacion                     shift and go to state 113
    while                          shift and go to state 115

state 241

    (29) bloque1 -> epsilon .

    RCURL           reduce using rule 29 (bloque1 -> epsilon .)


state 242

    (27) bloque -> LCURL estatuto bloque1 . RCURL

    RCURL           shift and go to state 259


state 243

    (131) switch2 -> CASE varcte COLON . switch4 switch2
    (133) switch4 -> . LCURL PASS RCURL
    (134) switch4 -> . estatuto
    (55) estatuto -> . asignacion
    (56) estatuto -> . llamada
    (57) estatuto -> . condicion
    (58) estatuto -> . switch
    (59) estatuto -> . while
    (60) estatuto -> . for
    (61) asignacion -> . ID EQUALS asignacion1
    (75) llamada -> . ID LPAREN llamada1 RPAREN
    (76) llamada -> . print
    (77) llamada -> . input
    (99) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (127) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (49) while -> . WHILE LPAREN expresion RPAREN bloque
    (109) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (94) print -> . PRINT LPAREN print1 RPAREN
    (106) input -> . INPUT LPAREN input1 RPAREN

    LCURL           shift and go to state 260
    ID              shift and go to state 111
    IF              shift and go to state 112
    SWITCH          shift and go to state 105
    WHILE           shift and go to state 100
    FOR             shift and go to state 109
    PRINT           shift and go to state 101
    INPUT           shift and go to state 110

    for                            shift and go to state 102
    estatuto                       shift and go to state 261
    switch                         shift and go to state 114
    llamada                        shift and go to state 104
    condicion                      shift and go to state 106
    print                          shift and go to state 107
    input                          shift and go to state 108
    asignacion                     shift and go to state 113
    switch4                        shift and go to state 262
    while                          shift and go to state 115

state 244

    (127) switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .

    ID              reduce using rule 127 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    IF              reduce using rule 127 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    SWITCH          reduce using rule 127 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    WHILE           reduce using rule 127 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    FOR             reduce using rule 127 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    PRINT           reduce using rule 127 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    INPUT           reduce using rule 127 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    RCURL           reduce using rule 127 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    CASE            reduce using rule 127 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    DEFAULT         reduce using rule 127 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)
    RETURN          reduce using rule 127 (switch -> SWITCH ID switch1 LCURL switch2 switch3 RCURL .)


state 245

    (132) switch3 -> DEFAULT COLON . switch4
    (133) switch4 -> . LCURL PASS RCURL
    (134) switch4 -> . estatuto
    (55) estatuto -> . asignacion
    (56) estatuto -> . llamada
    (57) estatuto -> . condicion
    (58) estatuto -> . switch
    (59) estatuto -> . while
    (60) estatuto -> . for
    (61) asignacion -> . ID EQUALS asignacion1
    (75) llamada -> . ID LPAREN llamada1 RPAREN
    (76) llamada -> . print
    (77) llamada -> . input
    (99) condicion -> . IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3
    (127) switch -> . SWITCH ID switch1 LCURL switch2 switch3 RCURL
    (49) while -> . WHILE LPAREN expresion RPAREN bloque
    (109) for -> . FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque
    (94) print -> . PRINT LPAREN print1 RPAREN
    (106) input -> . INPUT LPAREN input1 RPAREN

    LCURL           shift and go to state 260
    ID              shift and go to state 111
    IF              shift and go to state 112
    SWITCH          shift and go to state 105
    WHILE           shift and go to state 100
    FOR             shift and go to state 109
    PRINT           shift and go to state 101
    INPUT           shift and go to state 110

    for                            shift and go to state 102
    estatuto                       shift and go to state 261
    switch                         shift and go to state 114
    llamada                        shift and go to state 104
    condicion                      shift and go to state 106
    print                          shift and go to state 107
    input                          shift and go to state 108
    asignacion                     shift and go to state 113
    switch4                        shift and go to state 263
    while                          shift and go to state 115

state 246

    (112) for1 -> DIVIDE .

    CTE_INT         reduce using rule 112 (for1 -> DIVIDE .)


state 247

    (111) for1 -> TIMES .

    CTE_INT         reduce using rule 111 (for1 -> TIMES .)


state 248

    (110) for1 -> PLUS .

    CTE_INT         reduce using rule 110 (for1 -> PLUS .)


state 249

    (109) for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 . CTE_INT RPAREN bloque

    CTE_INT         shift and go to state 264


state 250

    (113) for1 -> MINUS .

    CTE_INT         reduce using rule 113 (for1 -> MINUS .)


state 251

    (91) varcte2 -> COMMA exp . varcte2
    (81) llamada2 -> COMMA exp . llamada2
    (90) varcte2 -> . epsilon
    (91) varcte2 -> . COMMA exp varcte2
    (80) llamada2 -> . epsilon
    (81) llamada2 -> . COMMA exp llamada2
    (135) epsilon -> .

    COMMA           shift and go to state 230
    RPAREN          reduce using rule 135 (epsilon -> .)

    llamada2                       shift and go to state 231
    epsilon                        shift and go to state 229
    varcte2                        shift and go to state 172

state 252

    (105) condicion3 -> epsilon .

    ID              reduce using rule 105 (condicion3 -> epsilon .)
    IF              reduce using rule 105 (condicion3 -> epsilon .)
    SWITCH          reduce using rule 105 (condicion3 -> epsilon .)
    WHILE           reduce using rule 105 (condicion3 -> epsilon .)
    FOR             reduce using rule 105 (condicion3 -> epsilon .)
    PRINT           reduce using rule 105 (condicion3 -> epsilon .)
    INPUT           reduce using rule 105 (condicion3 -> epsilon .)
    RCURL           reduce using rule 105 (condicion3 -> epsilon .)
    RETURN          reduce using rule 105 (condicion3 -> epsilon .)
    CASE            reduce using rule 105 (condicion3 -> epsilon .)
    DEFAULT         reduce using rule 105 (condicion3 -> epsilon .)


state 253

    (104) condicion3 -> ELSE . condicion1
    (100) condicion1 -> . bloque
    (101) condicion1 -> . LCURL bloque RCURL
    (27) bloque -> . LCURL estatuto bloque1 RCURL

    LCURL           shift and go to state 217

    bloque                         shift and go to state 216
    condicion1                     shift and go to state 265

state 254

    (99) condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .

    ID              reduce using rule 99 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    IF              reduce using rule 99 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    SWITCH          reduce using rule 99 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    WHILE           reduce using rule 99 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    FOR             reduce using rule 99 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    PRINT           reduce using rule 99 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    INPUT           reduce using rule 99 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    RCURL           reduce using rule 99 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    RETURN          reduce using rule 99 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    CASE            reduce using rule 99 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)
    DEFAULT         reduce using rule 99 (condicion -> IF LPAREN expresion_logica RPAREN condicion1 condicion2 condicion3 .)


state 255

    (102) condicion2 -> ELSEIF condicion1 . condicion2
    (102) condicion2 -> . ELSEIF condicion1 condicion2
    (103) condicion2 -> . epsilon
    (135) epsilon -> .

    ELSEIF          shift and go to state 234
    ELSE            reduce using rule 135 (epsilon -> .)
    ID              reduce using rule 135 (epsilon -> .)
    IF              reduce using rule 135 (epsilon -> .)
    SWITCH          reduce using rule 135 (epsilon -> .)
    WHILE           reduce using rule 135 (epsilon -> .)
    FOR             reduce using rule 135 (epsilon -> .)
    PRINT           reduce using rule 135 (epsilon -> .)
    INPUT           reduce using rule 135 (epsilon -> .)
    RCURL           reduce using rule 135 (epsilon -> .)
    RETURN          reduce using rule 135 (epsilon -> .)
    CASE            reduce using rule 135 (epsilon -> .)
    DEFAULT         reduce using rule 135 (epsilon -> .)

    epsilon                        shift and go to state 232
    condicion2                     shift and go to state 266

state 256

    (101) condicion1 -> LCURL bloque RCURL .

    ID              reduce using rule 101 (condicion1 -> LCURL bloque RCURL .)
    IF              reduce using rule 101 (condicion1 -> LCURL bloque RCURL .)
    SWITCH          reduce using rule 101 (condicion1 -> LCURL bloque RCURL .)
    WHILE           reduce using rule 101 (condicion1 -> LCURL bloque RCURL .)
    FOR             reduce using rule 101 (condicion1 -> LCURL bloque RCURL .)
    PRINT           reduce using rule 101 (condicion1 -> LCURL bloque RCURL .)
    INPUT           reduce using rule 101 (condicion1 -> LCURL bloque RCURL .)
    RCURL           reduce using rule 101 (condicion1 -> LCURL bloque RCURL .)
    RETURN          reduce using rule 101 (condicion1 -> LCURL bloque RCURL .)
    CASE            reduce using rule 101 (condicion1 -> LCURL bloque RCURL .)
    DEFAULT         reduce using rule 101 (condicion1 -> LCURL bloque RCURL .)
    ELSEIF          reduce using rule 101 (condicion1 -> LCURL bloque RCURL .)
    ELSE            reduce using rule 101 (condicion1 -> LCURL bloque RCURL .)


state 257

    (126) funcion6 -> RETURN ID . RCURL

    RCURL           shift and go to state 267


state 258

    (28) bloque1 -> estatuto bloque1 .

    RCURL           reduce using rule 28 (bloque1 -> estatuto bloque1 .)


state 259

    (27) bloque -> LCURL estatuto bloque1 RCURL .

    ELSEIF          reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    ELSE            reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    ID              reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    IF              reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    SWITCH          reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    WHILE           reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    FOR             reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    PRINT           reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    INPUT           reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    RCURL           reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    RETURN          reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    CASE            reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)
    DEFAULT         reduce using rule 27 (bloque -> LCURL estatuto bloque1 RCURL .)


state 260

    (133) switch4 -> LCURL . PASS RCURL

    PASS            shift and go to state 268


state 261

    (134) switch4 -> estatuto .

    CASE            reduce using rule 134 (switch4 -> estatuto .)
    DEFAULT         reduce using rule 134 (switch4 -> estatuto .)
    RCURL           reduce using rule 134 (switch4 -> estatuto .)


state 262

    (131) switch2 -> CASE varcte COLON switch4 . switch2
    (130) switch2 -> . epsilon
    (131) switch2 -> . CASE varcte COLON switch4 switch2
    (135) epsilon -> .

    CASE            shift and go to state 208
    DEFAULT         reduce using rule 135 (epsilon -> .)

    switch2                        shift and go to state 269
    epsilon                        shift and go to state 210

state 263

    (132) switch3 -> DEFAULT COLON switch4 .

    RCURL           reduce using rule 132 (switch3 -> DEFAULT COLON switch4 .)


state 264

    (109) for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT . RPAREN bloque

    RPAREN          shift and go to state 270


state 265

    (104) condicion3 -> ELSE condicion1 .

    ID              reduce using rule 104 (condicion3 -> ELSE condicion1 .)
    IF              reduce using rule 104 (condicion3 -> ELSE condicion1 .)
    SWITCH          reduce using rule 104 (condicion3 -> ELSE condicion1 .)
    WHILE           reduce using rule 104 (condicion3 -> ELSE condicion1 .)
    FOR             reduce using rule 104 (condicion3 -> ELSE condicion1 .)
    PRINT           reduce using rule 104 (condicion3 -> ELSE condicion1 .)
    INPUT           reduce using rule 104 (condicion3 -> ELSE condicion1 .)
    RCURL           reduce using rule 104 (condicion3 -> ELSE condicion1 .)
    RETURN          reduce using rule 104 (condicion3 -> ELSE condicion1 .)
    CASE            reduce using rule 104 (condicion3 -> ELSE condicion1 .)
    DEFAULT         reduce using rule 104 (condicion3 -> ELSE condicion1 .)


state 266

    (102) condicion2 -> ELSEIF condicion1 condicion2 .

    ELSE            reduce using rule 102 (condicion2 -> ELSEIF condicion1 condicion2 .)
    ID              reduce using rule 102 (condicion2 -> ELSEIF condicion1 condicion2 .)
    IF              reduce using rule 102 (condicion2 -> ELSEIF condicion1 condicion2 .)
    SWITCH          reduce using rule 102 (condicion2 -> ELSEIF condicion1 condicion2 .)
    WHILE           reduce using rule 102 (condicion2 -> ELSEIF condicion1 condicion2 .)
    FOR             reduce using rule 102 (condicion2 -> ELSEIF condicion1 condicion2 .)
    PRINT           reduce using rule 102 (condicion2 -> ELSEIF condicion1 condicion2 .)
    INPUT           reduce using rule 102 (condicion2 -> ELSEIF condicion1 condicion2 .)
    RCURL           reduce using rule 102 (condicion2 -> ELSEIF condicion1 condicion2 .)
    RETURN          reduce using rule 102 (condicion2 -> ELSEIF condicion1 condicion2 .)
    CASE            reduce using rule 102 (condicion2 -> ELSEIF condicion1 condicion2 .)
    DEFAULT         reduce using rule 102 (condicion2 -> ELSEIF condicion1 condicion2 .)


state 267

    (126) funcion6 -> RETURN ID RCURL .

    FUNCTION        reduce using rule 126 (funcion6 -> RETURN ID RCURL .)
    MAIN            reduce using rule 126 (funcion6 -> RETURN ID RCURL .)


state 268

    (133) switch4 -> LCURL PASS . RCURL

    RCURL           shift and go to state 271


state 269

    (131) switch2 -> CASE varcte COLON switch4 switch2 .

    DEFAULT         reduce using rule 131 (switch2 -> CASE varcte COLON switch4 switch2 .)


state 270

    (109) for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN . bloque
    (27) bloque -> . LCURL estatuto bloque1 RCURL

    LCURL           shift and go to state 206

    bloque                         shift and go to state 272

state 271

    (133) switch4 -> LCURL PASS RCURL .

    CASE            reduce using rule 133 (switch4 -> LCURL PASS RCURL .)
    DEFAULT         reduce using rule 133 (switch4 -> LCURL PASS RCURL .)
    RCURL           reduce using rule 133 (switch4 -> LCURL PASS RCURL .)


state 272

    (109) for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .

    ID              reduce using rule 109 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    IF              reduce using rule 109 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    SWITCH          reduce using rule 109 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    WHILE           reduce using rule 109 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    FOR             reduce using rule 109 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    PRINT           reduce using rule 109 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    INPUT           reduce using rule 109 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    RCURL           reduce using rule 109 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    RETURN          reduce using rule 109 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    CASE            reduce using rule 109 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)
    DEFAULT         reduce using rule 109 (for -> FOR CTE_INT TO CTE_INT BY LPAREN for1 CTE_INT RPAREN bloque .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 229 resolved using rule (llamada2 -> epsilon)
WARNING: rejected rule (varcte2 -> epsilon) in state 229
